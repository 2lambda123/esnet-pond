{
	"id": 0,
	"name": "pond-typescript",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 343,
			"name": "\"collection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/collection.ts",
			"children": [
				{
					"id": 344,
					"name": "Collection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Collection holds a ordered (but not sorted) map of Events.",
						"text": "The Events stored in a `Collection` are mapped by their key\nso a Collection can not hold more than one Event of the same\nkey, thus de-duplication is part of how a Collection works.\nLater Events to be added supersede early ones. Internally, a\nCollection holds its data in an Immutable.OrderedMap.\n\nIn Typescript, you can give a Collection<T> a type T, which is\nthe Event type accepted into the Collection (e.g. Collection<Time>).\n"
					},
					"typeParameter": [
						{
							"id": 345,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 347,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 348,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344
									}
								},
								{
									"id": 349,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 350,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "OrderedMap",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "reference",
														"name": "Event",
														"id": 272,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344
									}
								},
								{
									"id": 351,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 352,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 344,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 35,
									"character": 55
								},
								{
									"fileName": "collection.ts",
									"line": 37,
									"character": 18
								},
								{
									"fileName": "collection.ts",
									"line": 38,
									"character": 57
								},
								{
									"fileName": "collection.ts",
									"line": 39,
									"character": 37
								}
							]
						},
						{
							"id": 346,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 35,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "OrderedMap",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									},
									{
										"type": "reference",
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 357,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 358,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a new Event into the Collection. Since a Collection only\nrepresents a bag of Events with unique keys, the Event will\nbe deduped. You can optionally provide a callback that will\nbe called with the existing event in the case of an Event\nalready existing in the Collection. You can return from this\nthe Event to actually add. The default is to replace existing\nEvents with the new Event.",
										"returns": "Collection<T> The new Collection with the Event\n                       added into it\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\ncollection = collection.addEvent(e2, e => {\n    return new Event<Time>(\n        timestamp1,\n        { a: e2.get(\"a\") + e.get(\"a\") } // sum them\n    );\n});\n```"
											}
										]
									},
									"parameters": [
										{
											"id": 359,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new Event of type T to be added into the Collection"
											},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 360,
											"name": "dedup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 361,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 362,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 363,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 272,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 272,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 102,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 100,
									"character": 12
								}
							]
						},
						{
							"id": 372,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 373,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Event at the given position `pos` in the\nCollection. Note that this probably the least efficient\nway to fetch a point. If you wish to scan the whole set\nof Events, use an iterator (see `forEach()` and `map()`).\nFor direct access the Collection is optimised for\nreturning results via key (see `atKey()`)."
									},
									"parameters": [
										{
											"id": 374,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The position of the Event to return\n"
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 157,
									"character": 6
								}
							]
						},
						{
							"id": 375,
							"name": "atKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 376,
									"name": "atKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Event located at the key specified, if it\nexists. Note that this doesn't find the closest key, or\nimplement bisect. For that you need the order maintained\nCollection that is part of TimeSeries.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst timestamp = new Time(\"2015-04-22T03:30:00Z\");\nconst event = collection.atKey(timestamp)\n```"
											}
										]
									},
									"parameters": [
										{
											"id": 377,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the Event\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 174,
									"character": 9
								}
							]
						},
						{
							"id": 382,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 383,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterator into the internal event SortedMap.",
										"returns": "Immutable.Iterator<any[]> Iterator\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nlet iterator = this._events.entries();\nfor (let x = iterator.next(); !x.done; x = iterator.next()) {\n    const [key, event] = x.value;\n    console.log(\"Key:\", +key, \"Event:\", event.toString());\n}\n```"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Iterator",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 214,
									"character": 11
								}
							]
						},
						{
							"id": 378,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 379,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the Events as an Immutable.List",
										"returns": "Immutable.List<Event<t>> The list of Events in\n                                  this Collection, converted to\n                                  a List.\n"
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 185,
									"character": 13
								}
							]
						},
						{
							"id": 380,
							"name": "eventMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 381,
									"name": "eventMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the events in the Collection as a Immutable.Map, where\nthe key of the Event (e.g. timestamp, index, or TimeRange),\nrepresented as a string, is mapped to the Event.",
										"returns": "Immutable.Map<T, Event<T>> Events in this Collection,\n                                    converted to a Map.\n"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 197,
									"character": 12
								}
							]
						},
						{
							"id": 384,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 385,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this Collection. Events are in the\norder that they were added, unless the Collection has since been\nsorted.",
										"text": "If you return false from the sideEffect callback, the iteration\nwill end. The function returns the number of events iterated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\ncollection.forEach((e, k) => {\n    console.log(e, k);\n})\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 386,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 387,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 388,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 389,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 272,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 390,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																},
																{
																	"id": 391,
																	"name": "iter",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Iterable",
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			},
																			{
																				"type": "reference",
																				"name": "Event",
																				"id": 272,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T",
																						"constraint": {
																							"type": "reference",
																							"name": "Key",
																							"id": 2
																						}
																					}
																				]
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 233,
															"character": 23
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 233,
									"character": 11
								}
							]
						},
						{
							"id": 392,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 393,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map over the events in this Collection. For each Event\npassed to your callback function you should map that to\na new Event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst mapped = sorted.map(event => {\n    return new Event(event.key(), { a: 55 });\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 394,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 395,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 396,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 397,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 272,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 398,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 253,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 253,
									"character": 7
								}
							]
						},
						{
							"id": 364,
							"name": "setEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 365,
									"name": "setEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 366,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "OrderedMap",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "reference",
														"name": "Event",
														"id": 272,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 112,
									"character": 13
								}
							]
						},
						{
							"id": 367,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 368,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "The number of Events in this Collection\n"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 121,
									"character": 8
								}
							]
						},
						{
							"id": 369,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 370,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `Collection`.",
										"text": "Uses the `fieldPath` to look up values in all Events.\nIt then counts the number that are considered valid, which\nspecifically are not:\n * NaN\n * undefined\n * null.\n",
										"returns": "Count of valid events\n"
									},
									"parameters": [
										{
											"id": 371,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 139,
									"character": 13
								}
							]
						},
						{
							"id": 401,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 402,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the Collection using the value referenced by\nthe `field`."
									},
									"parameters": [
										{
											"id": 403,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 294,
									"character": 8
								}
							]
						},
						{
							"id": 399,
							"name": "sortByTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 400,
									"name": "sortByTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` by the `Event` key `T`.",
										"text": "In the case case of the key being `Time`, this is clear.\nFor `TimeRangeEvents` and `IndexedEvents`, the `Collection`\nwill be sorted by the begin time.\n\nThis method is particularly useful when the `Collection`\nwill be passed into a `TimeSeries`.\n\nSee also `Collection.isChronological()`.\n",
										"returns": "Collection<T> A new collection, sorted by the\n                       Event key of type T\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst sorted = collection.sortByTime();\n```"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 344,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 281,
									"character": 14
								}
							]
						},
						{
							"id": 404,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 405,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the extents of the Collection as a TimeRange.\nSince this Collection is not necessarily in order, this\nmethod will traverse the Collection and determine the\nealiest and latest time represented within it."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 310,
									"character": 13
								}
							]
						},
						{
							"id": 353,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 354,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Collection as a regular JSON object. This\nis implementation specific, in that different types of\nCollections will likely implement this in their own way.",
										"text": "In the case of our OrderedMap, this code simply called\ninternalOrderedMap.toJS() and lets Immutable.js do its\nthing.\n",
										"returns": "The JSON representation of this Collection\n"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 62,
									"character": 10
								}
							]
						},
						{
							"id": 355,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize out the Collection as a string. This will be the\nstring representation of `toJSON()`.",
										"returns": "The Collection serialized as a string.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 72,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								347
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								346
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								357,
								372,
								375,
								382,
								378,
								380,
								384,
								392,
								364,
								367,
								369,
								401,
								399,
								404,
								353,
								355
							]
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 33,
							"character": 16
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						344
					]
				}
			],
			"sources": [
				{
					"fileName": "collection.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 268,
			"name": "\"event\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/event.ts",
			"children": [
				{
					"id": 272,
					"name": "Event",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Event is a mapping from a time based key to a set\nof unstuctured data.",
						"text": "The key needs to be a sub-class of the `Key`, though\ntypically, this would either be one of the following:\n * `Time` - a single timestamp\n * `TimeRange` - a timerange over which the Event took place\n * `Index` - a different representation of a TimeRange\n\nThe data can be specified as either a JS object or an\nImmutable.Map<string, any>. To get values out of the data,\nuse `get()`. This method takes what is called a field, which\nis any key into the data. Fields can refer to deep data with\neither a path (as an array) or dot notation. Not specifying\na field implies a field of name \"value\".\n"
					},
					"typeParameter": [
						{
							"id": 273,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 276,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 277,
									"name": "new Event",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 278,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										},
										{
											"id": 279,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 272
									}
								},
								{
									"id": 280,
									"name": "new Event",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 281,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										},
										{
											"id": 282,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 272
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 43,
									"character": 47
								},
								{
									"fileName": "event.ts",
									"line": 45,
									"character": 38
								},
								{
									"fileName": "event.ts",
									"line": 46,
									"character": 57
								}
							]
						},
						{
							"id": 275,
							"name": "_data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 43,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 274,
							"name": "_key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 42,
									"character": 18
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"name": "Key",
									"id": 2
								}
							}
						},
						{
							"id": 310,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 311,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 153,
									"character": 16
								}
							]
						},
						{
							"id": 287,
							"name": "data",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 288,
									"name": "data",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the data associated with this event as the\ninternal Immutable data structure"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 70,
									"character": 8
								}
							]
						},
						{
							"id": 312,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 313,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 157,
									"character": 14
								}
							]
						},
						{
							"id": 289,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 290,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value of a specific field within the Event.",
										"text": "You can refer to a fields with one of the following notations:\n * (undefined) -> \"value\"\n * \"temperature\"\n * \"path.to.deep.data\"\n * [\"path\", \"to\", \"deep\", \"data\"].\n",
										"returns": "Object\n"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								},
								{
									"id": 291,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 292,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								},
								{
									"id": 293,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 294,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 85,
									"character": 7
								},
								{
									"fileName": "event.ts",
									"line": 86,
									"character": 7
								},
								{
									"fileName": "event.ts",
									"line": 87,
									"character": 7
								},
								{
									"fileName": "event.ts",
									"line": 88,
									"character": 7
								}
							]
						},
						{
							"id": 299,
							"name": "isValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 300,
									"name": "isValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Will return false if the value in this `Event` is\neither `undefined`, `NaN` or `null` for the given field\nor fields. This serves as a determination of a \"missing\"\nvalue within a `TimeSeries` or `Collection`.",
										"returns": "boolean If this Event is valid\n"
									},
									"parameters": [
										{
											"id": 301,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								},
								{
									"id": 302,
									"name": "isValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 303,
											"name": "fields",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 119,
									"character": 11
								},
								{
									"fileName": "event.ts",
									"line": 120,
									"character": 11
								},
								{
									"fileName": "event.ts",
									"line": 121,
									"character": 11
								}
							]
						},
						{
							"id": 283,
							"name": "key",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 284,
									"name": "key",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the key this Event was constructed with"
									},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 55,
									"character": 7
								}
							]
						},
						{
							"id": 285,
							"name": "keyType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 286,
									"name": "keyType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the label of the key"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 62,
									"character": 11
								}
							]
						},
						{
							"id": 295,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 296,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a new value on the Event and return a new Event",
										"returns": "Event<T> The `Event` with modified data\n"
									},
									"parameters": [
										{
											"id": 297,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The Event key, for example the Time of the Event"
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 298,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new value to set on the Event.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 105,
									"character": 7
								}
							]
						},
						{
							"id": 308,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 309,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 149,
									"character": 20
								}
							]
						},
						{
							"id": 304,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 305,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 138,
									"character": 17
								}
							]
						},
						{
							"id": 306,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 307,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 145,
									"character": 19
								}
							]
						},
						{
							"id": 332,
							"name": "combine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 333,
									"name": "combine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Combines multiple `Event`s together into a new array of events, one\nfor each key of the source events. The list of Events may be specified\nas an array or `Immutable.List`.",
										"text": "Combining acts on the fields specified in the `fieldSpec` (or all\nfields) and uses the reducer function supplied to take the multiple\nvalues associated with the key and reduce them down to a single value.\n\nThe return result will be an Event of the same type as the input.\n\nAdditionally, if you pass in an array of `Events`, you will get an\narray of events back. If you pass an `Immutable.List` of events then\nyou will get an `Immutable.List` of events back.\n\nThis is the general version of `Event.sum()` and `Event.avg()`. If those\ncommon use cases are what you want, just use those functions. If you\nwant to specify your own reducer you can use this function.\n\nSee also: `TimeSeries.timeSeriesListSum()`\n"
									},
									"typeParameter": [
										{
											"id": 334,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 335,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 336,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 269
											}
										},
										{
											"id": 337,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								},
								{
									"id": 338,
									"name": "combine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 339,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 340,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 272,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 341,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 269
											}
										},
										{
											"id": 342,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 294,
									"character": 18
								},
								{
									"fileName": "event.ts",
									"line": 297,
									"character": 18
								},
								{
									"fileName": "event.ts",
									"line": 300,
									"character": 18
								}
							]
						},
						{
							"id": 314,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 315,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Do the two supplied events contain the same data, even if they are not\nthe same instance? Uses Immutable.is() to compare the event data and\nthe string representation of the key to compare those."
									},
									"parameters": [
										{
											"id": 316,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 317,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 166,
									"character": 13
								}
							]
						},
						{
							"id": 318,
							"name": "isDuplicate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 319,
									"name": "isDuplicate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two supplied events are duplicates of each other.",
										"text": "Duplicated means that the keys are the same. This is the case\nwith incoming events sometimes where a second event is either known\nto be the same (but duplicate) of the first, or supersedes the first.\n\nYou can also pass in false for ignoreValues and get a full compare,\nincluding the data of the event, thus ignoring the supersede case.\n"
									},
									"parameters": [
										{
											"id": 320,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 321,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 322,
											"name": "ignoreValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 183,
									"character": 22
								}
							]
						},
						{
							"id": 323,
							"name": "merge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 324,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Merges multiple `events` together into a new array of events, one\nfor each key of the source events. Merging is done on the data of\neach event. Values from later events in the list overwrite\nearly values if fields conflict.",
										"text": "Common use cases:\n  - append events of different timestamps\n  - merge in events with one field to events with another\n  - merge in events that supersede the previous events\n\nEvents in the supplied list need to be of homogeneous types\n\nSee also: TimeSeries.timeSeriesListMerge()\n"
									},
									"typeParameter": [
										{
											"id": 325,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 326,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 327,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"isArray": true,
										"name": "Event",
										"id": 272,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								},
								{
									"id": 328,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 329,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 330,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 272,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 331,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 272,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 209,
									"character": 16
								},
								{
									"fileName": "event.ts",
									"line": 211,
									"character": 16
								},
								{
									"fileName": "event.ts",
									"line": 213,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								276
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								275,
								274
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								310,
								287,
								312,
								289,
								299,
								283,
								285,
								295,
								308,
								304,
								306,
								332,
								314,
								318,
								323
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 40,
							"character": 11
						}
					]
				},
				{
					"id": 269,
					"name": "ReducerFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 270,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 271,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 19,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						272
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						269
					]
				}
			],
			"sources": [
				{
					"fileName": "event.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 406,
			"name": "\"exports\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/exports.ts",
			"sources": [
				{
					"fileName": "exports.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 407,
			"name": "\"functions\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/functions.ts",
			"children": [
				{
					"id": 411,
					"name": "PercentileOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 414,
							"name": "clean",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 260,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 415,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 416,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 417,
													"name": "a",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "functions.ts",
											"line": 260,
											"character": 11
										}
									]
								}
							}
						},
						{
							"id": 413,
							"name": "interp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 259,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "linear"
									},
									{
										"type": "stringLiteral",
										"value": "lower"
									},
									{
										"type": "stringLiteral",
										"value": "higher"
									},
									{
										"type": "stringLiteral",
										"value": "nearest"
									},
									{
										"type": "stringLiteral",
										"value": "midpoint"
									}
								]
							}
						},
						{
							"id": 412,
							"name": "q",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 258,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								414,
								413,
								412
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 257,
							"character": 27
						}
					]
				},
				{
					"id": 408,
					"name": "ReducerFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 409,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 410,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 27,
							"character": 32
						}
					]
				},
				{
					"id": 448,
					"name": "avg",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 449,
							"name": "avg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a avg function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe average calculation. Other possibilities are:\n    `propergateMissing` - which will cause the avg itself to\n    be null if the values contain a missing value\n    `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 450,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 88,
							"character": 19
						}
					]
				},
				{
					"id": 457,
					"name": "count",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 458,
							"name": "count",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a count() function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe count. Other possibilities are:\n    `propergateMissing` - which will cause the count itself to\n    be null if the values contain a missing value\n"
							},
							"parameters": [
								{
									"id": 459,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 154,
							"character": 21
						}
					]
				},
				{
					"id": 466,
					"name": "difference",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 467,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a difference() function, i.e. a function that returns\nthe difference between the min and max values.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n    `propergateMissing` - which will cause the min itself to\n    be null if the values contain a missing value\n    `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 468,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 214,
							"character": 26
						}
					]
				},
				{
					"id": 460,
					"name": "first",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 461,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a first() function, i.e. a function that returns the first\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the first non-missing value. Other\npossibilities are:\n    `keepMissing` - to return the first value, regardless of if\n    it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 462,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 173,
							"character": 21
						}
					]
				},
				{
					"id": 424,
					"name": "ignoreMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 425,
							"name": "ignoreMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 426,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 21,
							"character": 19
						}
					]
				},
				{
					"id": 418,
					"name": "isValid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 419,
							"name": "isValid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 420,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 13,
							"character": 16
						}
					]
				},
				{
					"id": 442,
					"name": "keep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 443,
							"name": "keep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Like first() except it will return null if not all the values are\nthe same. This can be used to transfer a value when doing aggregation.\nFor instance you might group by the 'type', then avg the 'value', but\nyou want to results to include the type. So you would 'keep' the type\nand 'avg' the value."
							},
							"parameters": [
								{
									"id": 444,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 46,
							"character": 20
						}
					]
				},
				{
					"id": 421,
					"name": "keepMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 422,
							"name": "keepMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 423,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 20,
							"character": 17
						}
					]
				},
				{
					"id": 463,
					"name": "last",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 464,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a last() function, i.e. a function that returns the list\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n    `keepMissing` - to return the last value, regardless of if\n    it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 465,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 192,
							"character": 20
						}
					]
				},
				{
					"id": 451,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 452,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a max function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe maximum search. Other possibilities are:\n    `propergateMissing` - which will cause the max itself to\n    be null if the values contain a missing value\n    `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 453,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 113,
							"character": 19
						}
					]
				},
				{
					"id": 469,
					"name": "median",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 470,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the median() function, i.e. a function that returns\nthe median of the values supplied to it."
							},
							"parameters": [
								{
									"id": 471,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 226,
							"character": 22
						}
					]
				},
				{
					"id": 454,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 455,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a min function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe minimum search. Other possibilities are:\n    `propergateMissing` - which will cause the min itself to\n    be null if the values contain a missing value\n    `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 456,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 134,
							"character": 19
						}
					]
				},
				{
					"id": 433,
					"name": "noneIfEmpty",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 434,
							"name": "noneIfEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 435,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 25,
							"character": 17
						}
					]
				},
				{
					"id": 475,
					"name": "percentile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 476,
							"name": "percentile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a percentile function within the a values list.\nThe parameters controlling the function:\n * q        The percentile (should be between 0 and 100), e.g q=75 for 75th percentile.\n * interp   Specifies the interpolation method to use when the desired\n            quantile lies between two data points. Options are:\n             * linear: i + (j - i) * fraction, where fraction is the fractional part of the index surrounded by i and j.\n             * lower: i.\n             * higher: j.\n             * nearest: i or j whichever is nearest.\n             * midpoint: (i + j) / 2.\n * clean    Strategy to use when encountering missing data:\n             * `propergateMissing` - which will cause the min\n                itself to be null if the values contain a\n                missing value\n             * `zeroMissing` - will replace missing values\n                with a zero"
							},
							"parameters": [
								{
									"id": 477,
									"name": "q",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 478,
									"name": "interp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "linear"
											},
											{
												"type": "stringLiteral",
												"value": "lower"
											},
											{
												"type": "stringLiteral",
												"value": "higher"
											},
											{
												"type": "stringLiteral",
												"value": "nearest"
											},
											{
												"type": "stringLiteral",
												"value": "midpoint"
											}
										]
									},
									"defaultValue": "\"linear\""
								},
								{
									"id": 479,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 281,
							"character": 26
						}
					]
				},
				{
					"id": 430,
					"name": "propagateMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 431,
							"name": "propagateMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 432,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 23,
							"character": 22
						}
					]
				},
				{
					"id": 472,
					"name": "stdev",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 473,
							"name": "stdev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that returns a stdev() function, i.e. a function\nthat returns the standard deviation of the values supplied to it."
							},
							"parameters": [
								{
									"id": 474,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 246,
							"character": 21
						}
					]
				},
				{
					"id": 445,
					"name": "sum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 446,
							"name": "sum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a sum function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe sum calculation. Other possibilities are:\n    `propergateMissing` - which will cause the min itself to\n    be null if the values contain a missing value\n    `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 447,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 425
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 408
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 70,
							"character": 19
						}
					]
				},
				{
					"id": 427,
					"name": "zeroMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 428,
							"name": "zeroMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 429,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 22,
							"character": 17
						}
					]
				},
				{
					"id": 436,
					"name": "filter",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 438,
							"name": "ignoreMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 33,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 425
							}
						},
						{
							"id": 437,
							"name": "keepMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 32,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 422
							}
						},
						{
							"id": 441,
							"name": "noneIfEmpty",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 36,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 434
							}
						},
						{
							"id": 440,
							"name": "propagateMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 35,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 431
							}
						},
						{
							"id": 439,
							"name": "zeroMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 34,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 428
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								438,
								437,
								441,
								440,
								439
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 31,
							"character": 19
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						411,
						408
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						448,
						457,
						466,
						460,
						424,
						418,
						442,
						421,
						463,
						451,
						469,
						454,
						433,
						475,
						430,
						472,
						445,
						427
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						436
					]
				}
			],
			"sources": [
				{
					"fileName": "functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 220,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/index.ts",
			"children": [
				{
					"id": 221,
					"name": "Indexed",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An index is simply a string that represents a fixed range of time.\nThere are two basic types:\n*Multiplier index* - the number of some unit of time\n(hours, days etc) since the UNIX epoch.\n*Calendar index* - The second represents a calendar range,\nsuch as Oct 2014.",
						"text": "For the first type, a multiplier index, an example might be:\n\n```text\n1d-12355      // 30th Oct 2003 (GMT), the 12355th day since the\n// UNIX epoch\n```\n\nYou can also use seconds (e.g. 30s), minutes (e.g. 5m), hours (e.g. 1h)\nor days (e.g. 7d).\n\nHere are several examples of a calendar index:\n\n```text\n2003-10-30    // 30th Oct 2003\n2014-09       // Sept 2014\n2015          // All of the year 2015\n```\n\nAn Index is a nice representation of certain types of time intervals\nbecause it can be cached with its string representation as a key.\nA specific period of time, and associated data can be looked up based\non that string. It also allows us to represent things like months,\nwhich have variable length.\n\nAn Index is also useful when collecting into specific time ranges,\nfor example generating all the 5 min (\"5m\") maximum rollups within a\nspecific day (\"1d\"). See the processing section within these docs.\n\n"
					},
					"children": [
						{
							"id": 225,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 226,
									"name": "new Indexed",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 227,
											"name": "s",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 228,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "reference",
										"name": "Indexed",
										"id": 221
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 59,
									"character": 34
								}
							]
						},
						{
							"id": 223,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 58,
									"character": 19
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 224,
							"name": "_timerange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 59,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 77
							}
						},
						{
							"id": 222,
							"name": "_utc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 57,
									"character": 16
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 240,
							"name": "asString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 241,
									"name": "asString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Alias for toString()"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 109,
									"character": 12
								}
							]
						},
						{
							"id": 242,
							"name": "asTimerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 243,
									"name": "asTimerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Index as a TimeRange"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 116,
									"character": 15
								}
							]
						},
						{
							"id": 244,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 245,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the start date of the Index"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 123,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 246,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 247,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end date of the Index"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 130,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 231,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 232,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the timestamp to represent this Index\nwhich in this case will return the midpoint\nof the TimeRange"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 77,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 233,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 234,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Index as JSON, which will just be its string\nrepresentation"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 85,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 237,
							"name": "toNiceString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 238,
									"name": "toNiceString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "for the calendar range style Indexes, this lets you return\nthat calendar range as a human readable format, e.g. \"June, 2014\".",
										"text": "The format specified is a Moment.format.\n"
									},
									"parameters": [
										{
											"id": 239,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 102,
									"character": 16
								}
							]
						},
						{
							"id": 235,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 236,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Simply returns the Index as its string"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 92,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 229,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 230,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 68,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 256,
							"name": "getDailyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 257,
									"name": "getDailyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an index string with day granularity."
									},
									"parameters": [
										{
											"id": 258,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 259,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 173,
									"character": 30
								}
							]
						},
						{
							"id": 248,
							"name": "getIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 249,
									"name": "getIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the index string given an time period (e.g. 1 hour) and a Date.\nThe resulting string represents the 1 hour period that Date is in.",
										"text": "This lets you find the index string (e.g \"1h-412715\") given that you\nwant a 1 hour index and you have a Date. For example:\n```\n    import { Index } from \"pondjs\";\n    const d = new Date(\"2017-01-30T11:58:38.741Z\");\n    const index = Index.getIndexString(\"1h\", d);   // '1h-412715'\n```\n"
									},
									"parameters": [
										{
											"id": 250,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 251,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 146,
									"character": 25
								}
							]
						},
						{
							"id": 252,
							"name": "getIndexStringList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 253,
									"name": "getIndexStringList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Given a TimeRange, return a list of strings of index values,\nassuming a period, e.g. \"1h\".",
										"text": "This is like `Index.getIndexString()` except it returns a sequence of\nindex strings.\n"
									},
									"parameters": [
										{
											"id": 254,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 255,
											"name": "timerange",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 158,
									"character": 29
								}
							]
						},
						{
							"id": 260,
							"name": "getMonthlyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "getMonthlyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an index string with month granularity."
									},
									"parameters": [
										{
											"id": 262,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 263,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 185,
									"character": 32
								}
							]
						},
						{
							"id": 264,
							"name": "getYearlyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 265,
									"name": "getYearlyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an index string with year granularity."
									},
									"parameters": [
										{
											"id": 266,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 267,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 196,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								225
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								223,
								224,
								222
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								240,
								242,
								244,
								246,
								231,
								233,
								237,
								235,
								229,
								256,
								248,
								252,
								260,
								264
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 55,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						221
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"key\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/key.ts",
			"children": [
				{
					"id": 2,
					"name": "Key",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Defines the interface for all event keys"
					},
					"children": [
						{
							"id": 11,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 19,
									"character": 18
								}
							]
						},
						{
							"id": 13,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 20,
									"character": 16
								}
							]
						},
						{
							"id": 9,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 10,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 18,
									"character": 22
								}
							]
						},
						{
							"id": 5,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 16,
									"character": 19
								}
							]
						},
						{
							"id": 7,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 8,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 17,
									"character": 21
								}
							]
						},
						{
							"id": 3,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 15,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								11,
								13,
								9,
								5,
								7,
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "key.ts",
							"line": 14,
							"character": 18
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Time",
							"id": 16
						},
						{
							"type": "reference",
							"name": "TimeRange",
							"id": 77
						},
						{
							"type": "reference",
							"name": "Indexed",
							"id": 221
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "key.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 47,
			"name": "\"period\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/period.ts",
			"children": [
				{
					"id": 48,
					"name": "Period",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs a new Period object that can be used as\na key for Events."
					},
					"children": [
						{
							"id": 51,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Passing a number to the constructor will\nbe considered as a ms duration\nPassing a string to the constuctor will\nbe considered a duration string, with a\nformat of %d[s|m|h|d]\nPassing a number and a string will be considered\na quantity and a unit. The string should be one of:\n * milliseconds\n * seconds\n * minutes\n * hours\n * days\n * weeks"
							},
							"signatures": [
								{
									"id": 52,
									"name": "new Period",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Passing a number to the constructor will\nbe considered as a ms duration"
									},
									"parameters": [
										{
											"id": 53,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 48
									}
								},
								{
									"id": 54,
									"name": "new Period",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Passing a string to the constuctor will\nbe considered a duration string, with a\nformat of %d[s|m|h|d]"
									},
									"parameters": [
										{
											"id": 55,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 48
									}
								},
								{
									"id": 56,
									"name": "new Period",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Passing a number and a string will be considered\na quantity and a unit. The string should be one of:\n * milliseconds\n * seconds\n * minutes\n * hours\n * days\n * weeks"
									},
									"parameters": [
										{
											"id": 57,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 58,
											"name": "arg2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 48
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 38,
									"character": 28
								},
								{
									"fileName": "period.ts",
									"line": 44,
									"character": 27
								},
								{
									"fileName": "period.ts",
									"line": 51,
									"character": 27
								},
								{
									"fileName": "period.ts",
									"line": 63,
									"character": 44
								}
							]
						},
						{
							"id": 49,
							"name": "_duration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 37,
									"character": 21
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						},
						{
							"id": 50,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 38,
									"character": 19
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 59,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 60,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 91,
									"character": 12
								}
							]
						},
						{
							"id": 61,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 62,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 98,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								51
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								49,
								50
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								59,
								61
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 35,
							"character": 27
						}
					]
				},
				{
					"id": 70,
					"name": "SHORT_UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 74,
							"name": "d",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 27,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 73,
							"name": "h",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 26,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 72,
							"name": "m",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 25,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 71,
							"name": "s",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 24,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 75,
							"name": "w",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 28,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								74,
								73,
								72,
								71,
								75
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 23,
							"character": 17
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				},
				{
					"id": 63,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 68,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 67,
							"name": "hours",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 18,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 64,
							"name": "milliseconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 15,
									"character": 16
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1"
						},
						{
							"id": 66,
							"name": "minutes",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 65,
							"name": "seconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 16,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 69,
							"name": "weeks",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								68,
								67,
								64,
								66,
								65,
								69
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						48
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						70,
						63
					]
				}
			],
			"sources": [
				{
					"fileName": "period.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 15,
			"name": "\"time\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/time.ts",
			"children": [
				{
					"id": 16,
					"name": "Time",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs a new Time object that can be used as\na key for Events. A Time object represents a\ntimestamp, and is stored as a Javascript Date\nobject. The difference with just a Date is that\nis conforms to the interface required to be an\nEvent key."
					},
					"children": [
						{
							"id": 18,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 19,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 16
									}
								},
								{
									"id": 20,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 21,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 16
									}
								},
								{
									"id": 22,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 23,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 16
									}
								},
								{
									"id": 24,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 25,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 16
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 24,
									"character": 21
								},
								{
									"fileName": "time.ts",
									"line": 26,
									"character": 18
								},
								{
									"fileName": "time.ts",
									"line": 27,
									"character": 25
								},
								{
									"fileName": "time.ts",
									"line": 28,
									"character": 27
								},
								{
									"fileName": "time.ts",
									"line": 29,
									"character": 27
								}
							]
						},
						{
							"id": 17,
							"name": "_d",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "time.ts",
									"line": 24,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 40,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 41,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The begin time of this Event, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 81,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 42,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 43,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The end time of this Event, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 88,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 36,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 37,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 70,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 28,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 29,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 45,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 34,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 35,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in Local time, as a string."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 63,
									"character": 17
								}
							]
						},
						{
							"id": 30,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 31,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 49,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 32,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 33,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in UTC time, as a string."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 56,
									"character": 15
								}
							]
						},
						{
							"id": 26,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 27,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 41,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 38,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 39,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 74,
									"character": 11
								}
							]
						},
						{
							"id": 44,
							"name": "isTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 45,
									"name": "isTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 46,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 16
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 92,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								18
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								40,
								42,
								36,
								28,
								34,
								30,
								32,
								26,
								38,
								44
							]
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 22,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						16
					]
				}
			],
			"sources": [
				{
					"fileName": "time.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 76,
			"name": "\"timerange\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/timerange.ts",
			"children": [
				{
					"id": 77,
					"name": "TimeRange",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A time range is a simple representation of a begin and end time, used\nto maintain consistency across an application.",
						"text": "### Construction\n\nYou can define a TimeRange with moments, Javascript Date objects\nor ms since UNIX epoch. Here we construct one with two moments:\n\n```js\nvar fmt = \"YYYY-MM-DD HH:mm\";\nvar beginTime = moment(\"2012-01-11 11:11\", fmt);\nvar endTime =   moment(\"2012-02-22 12:12\", fmt);\nvar range = new TimeRange(beginTime, endTime);\n```\n\nor with ms times:\n\n```js\nvar range = new TimeRange([1326309060000, 1329941520000]);\n```\n\n"
					},
					"children": [
						{
							"id": 79,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
							},
							"signatures": [
								{
									"id": 80,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 81,
											"name": "timerange",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								},
								{
									"id": 82,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 83,
											"name": "dateList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Date"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								},
								{
									"id": 84,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 85,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 86,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								},
								{
									"id": 87,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 88,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 16
											}
										},
										{
											"id": 89,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								},
								{
									"id": 90,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 91,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										},
										{
											"id": 92,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								},
								{
									"id": 93,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new TimeRange which may be of several different formats:\n  - Another TimeRange (copy constructor)\n  - An Immutable.List containing two Dates.\n  - A Javascript array containing two Date or ms timestamps\n  - Two arguments, begin and end, each of which may be a Data,\n    a Moment, or a ms timestamp."
									},
									"parameters": [
										{
											"id": 94,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 95,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 49,
									"character": 41
								},
								{
									"fileName": "timerange.ts",
									"line": 59,
									"character": 38
								},
								{
									"fileName": "timerange.ts",
									"line": 60,
									"character": 48
								},
								{
									"fileName": "timerange.ts",
									"line": 61,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 62,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 63,
									"character": 44
								},
								{
									"fileName": "timerange.ts",
									"line": 64,
									"character": 44
								}
							]
						},
						{
							"id": 78,
							"name": "_range",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Internally, the timerange is stored as an Immutable.List"
							},
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 49,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Date"
									}
								]
							}
						},
						{
							"id": 112,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 113,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the begin time of the TimeRange."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 166,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 129,
							"name": "contains",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 130,
									"name": "contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if a Date or a TimeRange is contained entirely\nwithin this TimeRange"
									},
									"parameters": [
										{
											"id": 131,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								},
								{
									"id": 132,
									"name": "contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 133,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 221,
									"character": 12
								},
								{
									"fileName": "timerange.ts",
									"line": 222,
									"character": 12
								},
								{
									"fileName": "timerange.ts",
									"line": 223,
									"character": 12
								}
							]
						},
						{
							"id": 140,
							"name": "disjoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 141,
									"name": "disjoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other TimeRange in no way\noverlaps this TimeRange."
									},
									"parameters": [
										{
											"id": 142,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 264,
									"character": 12
								}
							]
						},
						{
							"id": 149,
							"name": "duration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 150,
									"name": "duration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the duration of the TimeRange in milliseconds"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 294,
									"character": 12
								}
							]
						},
						{
							"id": 114,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 115,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end time of the TimeRange."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 173,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 126,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 127,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two TimeRanges can be considered equal,\nin that they have the same times."
									},
									"parameters": [
										{
											"id": 128,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 212,
									"character": 10
								}
							]
						},
						{
							"id": 143,
							"name": "extents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 144,
									"name": "extents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new Timerange which covers the extents of this and\nother combined."
									},
									"parameters": [
										{
											"id": 145,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 272,
									"character": 11
								}
							]
						},
						{
							"id": 108,
							"name": "humanize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 109,
									"name": "humanize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the TimeRange, e.g.\n\"Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am\""
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 144,
									"character": 12
								}
							]
						},
						{
							"id": 151,
							"name": "humanizeDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 152,
									"name": "humanizeDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A user friendly version of the duration."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 301,
									"character": 20
								}
							]
						},
						{
							"id": 98,
							"name": "internal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 99,
									"name": "internal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the internal range, which is an Immutable.List of two elements\ncontaining begin and end times as Dates."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 105,
									"character": 12
								}
							]
						},
						{
							"id": 146,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 147,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new TimeRange which represents the intersection\n(overlapping) part of this and other."
									},
									"parameters": [
										{
											"id": 148,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											},
											{
												"type": "instrinct",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 282,
									"character": 16
								}
							]
						},
						{
							"id": 116,
							"name": "mid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 117,
									"name": "mid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the TimeRange"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 180,
									"character": 7
								}
							]
						},
						{
							"id": 137,
							"name": "overlaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 138,
									"name": "overlaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other TimeRange overlaps\nthis time Range."
									},
									"parameters": [
										{
											"id": 139,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 249,
									"character": 12
								}
							]
						},
						{
							"id": 110,
							"name": "relativeString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 111,
									"name": "relativeString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the TimeRange",
										"tags": [
											{
												"tag": "example",
												"text": "\n\"a few seconds ago to a month ago\"\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 157,
									"character": 18
								}
							]
						},
						{
							"id": 120,
							"name": "setBegin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 121,
									"name": "setBegin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new begin time on the TimeRange. The result will be\na new TimeRange."
									},
									"parameters": [
										{
											"id": 122,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 196,
									"character": 12
								}
							]
						},
						{
							"id": 123,
							"name": "setEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 124,
									"name": "setEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new end time on the TimeRange. The result will be\na new TimeRange."
									},
									"parameters": [
										{
											"id": 125,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 204,
									"character": 10
								}
							]
						},
						{
							"id": 118,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 119,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the TimeRange as the representitive\ntimestamp for the timerange."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 188,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 100,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 101,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the TimeRange as JSON, which will be a Javascript array\nof two ms timestamps."
									},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "number"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 113,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 104,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 105,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the TimeRange as a string expressed in local time"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 129,
									"character": 17
								}
							]
						},
						{
							"id": 102,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 103,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the TimeRange as a string, useful for serialization.",
										"returns": "String representation of the TimeRange\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 122,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 106,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 107,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the TimeRange as a string expressed in UTC time"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 136,
									"character": 15
								}
							]
						},
						{
							"id": 96,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 97,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 97,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 134,
							"name": "within",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 135,
									"name": "within",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this TimeRange is completely within the supplied\nother TimeRange."
									},
									"parameters": [
										{
											"id": 136,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 77
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 241,
									"character": 10
								}
							]
						},
						{
							"id": 153,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 154,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The last"
									},
									"parameters": [
										{
											"id": 155,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 48
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 308,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								79
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								78
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								112,
								129,
								140,
								149,
								114,
								126,
								143,
								108,
								151,
								98,
								146,
								116,
								137,
								110,
								120,
								123,
								118,
								100,
								104,
								102,
								106,
								96,
								134,
								153
							]
						}
					],
					"sources": [
						{
							"fileName": "timerange.ts",
							"line": 44,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						77
					]
				}
			],
			"sources": [
				{
					"fileName": "timerange.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 156,
			"name": "\"util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/src/util.ts",
			"children": [
				{
					"id": 217,
					"name": "dataFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 218,
							"name": "dataFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor arg into an Immutable.Map\nof data."
							},
							"parameters": [
								{
									"id": 219,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Object"
											},
											{
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											},
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 302,
							"character": 20
						}
					]
				},
				{
					"id": 191,
					"name": "fieldAsArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 192,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the field spec into a list if it is not already.",
								"text": "This is deployed in Event.get() to process anything passed\nto it, but this should also be deployed \"upstream\" to avoid\nhaving that split() done over and over in a loop.\n"
							},
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 193,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 194,
									"name": "fieldSpec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 195,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 196,
									"name": "fieldSpec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 224,
							"character": 21
						},
						{
							"fileName": "util.ts",
							"line": 225,
							"character": 21
						},
						{
							"fileName": "util.ts",
							"line": 226,
							"character": 21
						},
						{
							"fileName": "util.ts",
							"line": 227,
							"character": 21
						}
					]
				},
				{
					"id": 213,
					"name": "indexFromArgs",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 214,
							"name": "indexFromArgs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor of two args into an Index.\nThe second arg defines the timezone (local or UTC)"
							},
							"parameters": [
								{
									"id": 215,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Index"
											}
										]
									}
								},
								{
									"id": 216,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Index"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 286,
							"character": 22
						}
					]
				},
				{
					"id": 188,
					"name": "isMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 189,
							"name": "isMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the value is null, undefined or NaN"
							},
							"parameters": [
								{
									"id": 190,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 213,
							"character": 18
						}
					]
				},
				{
					"id": 170,
					"name": "leftPad",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 171,
							"name": "leftPad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Single zero left padding, for days and months."
							},
							"parameters": [
								{
									"id": 172,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 29,
							"character": 16
						}
					]
				},
				{
					"id": 184,
					"name": "niceIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 185,
							"name": "niceIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a nice string for an index string. If the index string is of\nthe form 1d-2345 then just that string is returned (there's not nice\nway to put it), but if it represents a day, month, or year\n(e.g. 2015-07) then a nice string like \"July\" will be returned. It's\nalso possible to pass in the format of the reply for these types of\nstrings. See moment's format naming conventions:\nhttp://momentjs.com/docs/#/displaying/format/"
							},
							"parameters": [
								{
									"id": 186,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 187,
									"name": "format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 154,
							"character": 24
						}
					]
				},
				{
					"id": 180,
					"name": "rangeFromIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 181,
							"name": "rangeFromIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given an index string, return the TimeRange that represents."
							},
							"parameters": [
								{
									"id": 182,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 183,
									"name": "utc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 77
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 64,
							"character": 29
						}
					]
				},
				{
					"id": 206,
					"name": "timeRangeFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 207,
							"name": "timeRangeFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a TimeRange"
							},
							"parameters": [
								{
									"id": 208,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 77
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 77
							}
						},
						{
							"id": 209,
							"name": "timeRangeFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 210,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 77
							}
						},
						{
							"id": 211,
							"name": "timeRangeFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 212,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 77
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 263,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 264,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 265,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 266,
							"character": 25
						}
					]
				},
				{
					"id": 197,
					"name": "timestampFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 198,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a timestamp"
							},
							"parameters": [
								{
									"id": 199,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 200,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 201,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 202,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 203,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 204,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 205,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Moment"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 240,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 241,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 242,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 243,
							"character": 25
						},
						{
							"fileName": "util.ts",
							"line": 244,
							"character": 25
						}
					]
				},
				{
					"id": 173,
					"name": "windowDuration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 174,
							"name": "windowDuration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a duration in milliseconds given a window period.\nFor example \"30s\" (30 seconds) should return 30000ms. Accepts\nseconds (e.g. \"30s\"), minutes (e.g. \"5m\"), hours (e.g. \"6h\") and\ndays (e.g. \"30d\") as the period."
							},
							"parameters": [
								{
									"id": 175,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 39,
							"character": 23
						}
					]
				},
				{
					"id": 176,
					"name": "windowPositionFromDate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 177,
							"name": "windowPositionFromDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Helper function to get the window position relative\nto Jan 1, 1970."
							},
							"parameters": [
								{
									"id": 178,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 179,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 55,
							"character": 31
						}
					]
				},
				{
					"id": 157,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 167,
							"name": "d",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 168,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"days\""
								},
								{
									"id": 169,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 30
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": " 60 * 60 * 24"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										168,
										169
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 164,
							"name": "h",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 165,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"hours\""
								},
								{
									"id": 166,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 31
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": " 60 * 60"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										165,
										166
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 22,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 161,
							"name": "m",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 162,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 21,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"minutes\""
								},
								{
									"id": 163,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 21,
											"character": 33
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "60"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										162,
										163
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 158,
							"name": "s",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 159,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 20,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"seconds\""
								},
								{
									"id": 160,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 20,
											"character": 33
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										159,
										160
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 20,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								167,
								164,
								161,
								158
							]
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 19,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						217,
						191,
						213,
						188,
						170,
						184,
						180,
						206,
						197,
						173,
						176
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						157
					]
				}
			],
			"sources": [
				{
					"fileName": "util.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				343,
				268,
				406,
				407,
				220,
				1,
				47,
				15,
				76,
				156
			]
		}
	]
}