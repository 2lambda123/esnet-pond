{
	"id": 0,
	"name": "pond-typescript",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1821,
			"name": "\"align\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/align.ts",
			"children": [
				{
					"id": 1822,
					"name": "Align",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A processor to align the data into bins of regular time period."
					},
					"typeParameter": [
						{
							"id": 1823,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1829,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1830,
									"name": "new Align",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1831,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Align",
										"id": 1822
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 34,
									"character": 32
								}
							]
						},
						{
							"id": 1824,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 30,
									"character": 22
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 1827,
							"name": "_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 33,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "number"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1826,
							"name": "_method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 32,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "AlignmentMethod",
								"id": 664
							}
						},
						{
							"id": 1828,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 34,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1825,
							"name": "_window",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 31,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 16
							}
						},
						{
							"id": 1849,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1850,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the align operation on the event and emit."
									},
									"parameters": [
										{
											"id": 1851,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 53
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 142,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 53
							}
						},
						{
							"id": 1835,
							"name": "getBoundaries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1836,
									"name": "getBoundaries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of indexes of window boundaries if the current\nevent and the previous event do not lie in the same window. If\nthey are in the same window, return an empty list."
									},
									"parameters": [
										{
											"id": 1837,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 64,
									"character": 17
								}
							]
						},
						{
							"id": 1838,
							"name": "getBoundaryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1839,
									"name": "getBoundaryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "We are dealing in UTC only with the Index because the events\nall have internal timestamps in UTC and that's what we're\naligning. Let the user display in local time if that's\nwhat they want."
									},
									"parameters": [
										{
											"id": 1840,
											"name": "boundaryIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 81,
									"character": 19
								}
							]
						},
						{
							"id": 1841,
							"name": "interpolateHold",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1842,
									"name": "interpolateHold",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new event on the requested boundary and carry over the\nvalue from the previous event.",
										"text": "A variation just sets the values to null, this is used when the\nlimit is hit.\n"
									},
									"parameters": [
										{
											"id": 1843,
											"name": "boundaryIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1844,
											"name": "setNone",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 741
											},
											{
												"type": "instrinct",
												"name": "Object"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 93,
									"character": 19
								}
							]
						},
						{
							"id": 1845,
							"name": "interpolateLinear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1846,
									"name": "interpolateLinear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a linear differential between two counter values that lie\non either side of a window boundary."
									},
									"parameters": [
										{
											"id": 1847,
											"name": "boundary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 1848,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 741
											},
											{
												"type": "instrinct",
												"name": "Object"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 107,
									"character": 21
								}
							]
						},
						{
							"id": 1832,
							"name": "isAligned",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1833,
									"name": "isAligned",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Test to see if an event is perfectly aligned. Used on first event."
									},
									"parameters": [
										{
											"id": 1834,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 54,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1829
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1824,
								1827,
								1826,
								1828,
								1825
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1849,
								1835,
								1838,
								1841,
								1845,
								1832
							]
						}
					],
					"sources": [
						{
							"fileName": "align.ts",
							"line": 28,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 50,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1822
					]
				}
			],
			"sources": [
				{
					"fileName": "align.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1673,
			"name": "\"base\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/base.ts",
			"children": [
				{
					"id": 1674,
					"name": "Base",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "base.ts",
							"line": 29,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "WindowedCollection",
							"id": 1335
						},
						{
							"type": "reference",
							"name": "Collection",
							"id": 1387
						},
						{
							"type": "reference",
							"name": "GroupedCollection",
							"id": 1636
						},
						{
							"type": "reference",
							"name": "Event",
							"id": 1676
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1674
					]
				}
			],
			"sources": [
				{
					"fileName": "base.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 929,
			"name": "\"collapse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/collapse.ts",
			"children": [
				{
					"id": 930,
					"name": "Collapse",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A processor which takes a fieldSpec and returns a new event\nwith a new column that is a collapsed result of the selected\ncolumns. To collapse the columns it uses the supplied reducer\nfunction. Optionally the new column can completely replace\nthe existing columns in the event."
					},
					"typeParameter": [
						{
							"id": 931,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 932,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 934,
									"name": "new Collapse",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 935,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collapse",
										"id": 930
									}
								}
							],
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 32,
									"character": 62
								}
							]
						},
						{
							"id": 933,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 33,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"name": "CollapseOptions",
								"id": 685
							}
						},
						{
							"id": 936,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 937,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 938,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 53
									}
								}
							],
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 36,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 53
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								932
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								933
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								936
							]
						}
					],
					"sources": [
						{
							"fileName": "collapse.ts",
							"line": 32,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 50,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						930
					]
				}
			],
			"sources": [
				{
					"fileName": "collapse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1386,
			"name": "\"collection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/collection.ts",
			"children": [
				{
					"id": 1387,
					"name": "Collection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Collection holds a ordered (but not sorted) list of Events.",
						"text": "In Typescript, you can give a `Collection<T>` a type T, which is\nthe `Event` type accepted into the Collection (e.g. `Collection<Time>`).\n"
					},
					"typeParameter": [
						{
							"id": 1388,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1395,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a new Collection",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst e1 = new Event(time(\"2015-04-22T03:30:00Z\"), { a: 5, b: 6 });\nconst e2 = new Event(time(\"2015-04-22T02:30:00Z\"), { a: 4, b: 2 });\n\nlet collection = new Collection<Time>();\ncollection = collection\n    .addEvent(e1)\n    .addEvent(e2);\n```\n"
									}
								]
							},
							"signatures": [
								{
									"id": 1396,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a new Collection",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst e1 = new Event(time(\"2015-04-22T03:30:00Z\"), { a: 5, b: 6 });\nconst e2 = new Event(time(\"2015-04-22T02:30:00Z\"), { a: 4, b: 2 });\n\nlet collection = new Collection<Time>();\ncollection = collection\n    .addEvent(e1)\n    .addEvent(e2);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1397,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														]
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 1387,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 96,
									"character": 68
								}
							]
						},
						{
							"id": 1393,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 95,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 1394,
							"name": "_keyMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 96,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Set",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "number"
											}
										]
									}
								]
							}
						},
						{
							"id": 1402,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1403,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a new `Event` into the `Collection`, returning a new `Collection`\ncontaining that `Event`. Optionally the Events may be de-duplicated.",
										"text": "The dedup arg may either be a boolean (in which case any existing\nEvents with the same key will be replaced by this new Event), or\nwith a function. If dedup is a function that function will be\npassed a list of all `Event`'s with that key and will be expected\nto return a single `Event` to replace them with.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nlet collection = pond.collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2);\n```"
											},
											{
												"tag": "example",
												"text": "\n```\n// dedup with the sum of the duplicated events\nconst collection = pond.collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3, (events) => {\n        const a = events.reduce((sum, e) => sum + e.get(\"a\"), 0);\n        return new Event<Time>(timestamp2, { a });\n    });\n\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1404,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 1405,
											"name": "dedup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DedupFunction",
														"id": 718,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "instrinct",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 177,
									"character": 19
								}
							]
						},
						{
							"id": 1487,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1488,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Collection`'s `Event`s down using a user defined function\n`reducer` to do the reduction. Fields to be aggregated are specified using a\n`fieldSpec` argument, which can be a field name or array of field names.",
										"text": "If the `fieldSpec` matches multiple fields then an object is returned\nwith keys being the fields and values being the aggregation.\n\nThe `Collection` class itself contains most of the common aggregation functions\nbuilt in, but this is here to help when what you need isn't supplied\nout of the box.\n"
									},
									"parameters": [
										{
											"id": 1489,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 1490,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 590,
									"character": 20
								},
								{
									"fileName": "collection.ts",
									"line": 591,
									"character": 20
								}
							]
						},
						{
							"id": 1602,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1603,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The `align()` method applied to a collection of events that might come in with timestamps\nat uneven intervals and produces a new `Collection` of those points, but aligned on\nprecise time window boundaries. A `Collection` containing four events with following\ntimestamps:\n```\n    0:40\n    1:05\n    1:45\n    2:10\n```",
										"text": "Given a period of 1m (every one minute), a new `Collection` with two events at the following\ntimes will be produced:\n\n```\n    1:00\n    2:00\n```\n\nOnly a `Collection` of `Event<Time>` objects can be aligned. `Event<Index>` objects are basically\nalready aligned and it makes no sense in the case of a `Event<TimeRange>`.\n\nIt should also be noted that the aligned event will only contain the fields that\nalignment was requested on. Which is to say if you have two columns, \"in\" and \"out\",\nand only request to align the \"in\" column, the \"out\" value will not be contained in\nthe resulting collection.\n"
									},
									"parameters": [
										{
											"id": 1604,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 809,
									"character": 16
								}
							]
						},
						{
							"id": 1422,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1423,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` at the given position `pos` in the\n`Collection`.",
										"text": "Note: this is the least efficient way to fetch a point.\n\nIf you wish to scan the whole set of Events, use an\niterator (see `forEach()` and `map()`). For direct access\nthe `Collection` is optimised for returning results via\nthe `Event`'s key (see `atKey()`).\n"
									},
									"parameters": [
										{
											"id": 1424,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 307,
									"character": 13
								}
							]
						},
						{
							"id": 1425,
							"name": "atKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1426,
									"name": "atKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` located at the key specified, if it\nexists. Note that this doesn't find the closest key, or\nimplement `bisect`. For that you need the sorted\nCollection that is part of a `TimeSeries`. On the plus side,\nif you know the key this is an efficient way to access the\n`Event` within the `Collection`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst timestamp = new Time(\"2015-04-22T03:30:00Z\");\nconst event = collection.atKey(timestamp)\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1427,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 325,
									"character": 16
								}
							]
						},
						{
							"id": 1521,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1522,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down\nto their average(s)"
									},
									"parameters": [
										{
											"id": 1523,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1524,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1525,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1526,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1527,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1528,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1529,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1530,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 633,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 632,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 633,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 634,
									"character": 14
								}
							]
						},
						{
							"id": 1617,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1618,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1619,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 1620,
											"name": "keyMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Base",
										"id": 1674
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 838,
									"character": 19
								}
							]
						},
						{
							"id": 1611,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1612,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1613,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 824,
									"character": 19
								}
							]
						},
						{
							"id": 1436,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1437,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterator (`Immutable.Iterator`) into the internal\nevent `OrderedMap`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nlet iterator = collection.entries();\nfor (let x = iterator.next(); !x.done; x = iterator.next()) {\n    const [key, event] = x.value;\n    console.log(`Key: ${key}, Event: ${event.toString()}`);\n}\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "Object"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 380,
									"character": 18
								}
							]
						},
						{
							"id": 1432,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1433,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the `Event<T>`s as an `Immutable.List`."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 351,
									"character": 20
								}
							]
						},
						{
							"id": 1434,
							"name": "eventMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1435,
									"name": "eventMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the events in the `Collection` as an `Immutable.Map`, where\nthe key of type `T` (e.g. Time, Index, or TimeRange),\nrepresented as a string, is mapped to the Event itself.",
										"returns": "Immutable.Map<T, Event<T>> Events in this Collection,\n                                    converted to a Map.\n"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 363,
									"character": 19
								}
							]
						},
						{
							"id": 1608,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1609,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1610,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 819,
									"character": 15
								}
							]
						},
						{
							"id": 1491,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1492,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1493,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1494,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1495,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1496,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1497,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1498,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1499,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1500,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 604,
													"character": 47
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 603,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 604,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 605,
									"character": 16
								}
							]
						},
						{
							"id": 1428,
							"name": "firstEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1429,
									"name": "firstEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 337,
									"character": 21
								}
							]
						},
						{
							"id": 1460,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1461,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "FlatMap over the events in this `Collection`. For each `Event`\npassed to your callback function you should map that to\nzero, one or many Events, returned as an `Immutable.List`."
									},
									"typeParameter": [
										{
											"id": 1462,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1463,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1464,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1465,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1466,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1467,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "U",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 450,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 449,
									"character": 18
								}
							]
						},
						{
							"id": 1438,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1439,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this `Collection`. Events are in the\norder that they were added, unless the Collection has since been\nsorted.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\ncollection.forEach((e, k) => {\n    console.log(e, k);\n})\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1440,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1441,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1442,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1443,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1444,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 396,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 396,
									"character": 18
								}
							]
						},
						{
							"id": 1473,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1474,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "GroupBy a field's value. The result is a `CollectionMap`, mapping\na key (the value of the field) to a `Collection` of Events that\nmatched field.",
										"text": "```\nconst grouped = c\n    .groupBy(\"team_name\")\n    .aggregate({\n        \"a_avg\": [\"a\", avg()],\n        \"b_avg\": [\"b\", avg()],\n    });\n```\n"
									},
									"parameters": [
										{
											"id": 1475,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													},
													{
														"type": "reference",
														"name": "GroupingFunction",
														"id": 1664,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 510,
									"character": 18
								}
							]
						},
						{
							"id": 1600,
							"name": "isChronological",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1601,
									"name": "isChronological",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if all events in this `Collection` are in chronological order."
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 765,
									"character": 26
								}
							]
						},
						{
							"id": 1420,
							"name": "isEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1421,
									"name": "isEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return if the `Collection` has any events in it"
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 292,
									"character": 18
								}
							]
						},
						{
							"id": 1501,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1502,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1503,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1504,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1505,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1506,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1507,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1508,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1509,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1510,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 613,
													"character": 46
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 612,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 613,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 614,
									"character": 15
								}
							]
						},
						{
							"id": 1430,
							"name": "lastEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1431,
									"name": "lastEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 344,
									"character": 20
								}
							]
						},
						{
							"id": 1445,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1446,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map over the events in this Collection. For each `Event`\npassed to your callback function you should map that to\na new Event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst mapped = sorted.map(event => {\n    return new Event(event.key(), { a: 55 });\n});\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 1447,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1448,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1449,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1450,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1451,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1452,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 413,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 412,
									"character": 14
								}
							]
						},
						{
							"id": 1453,
							"name": "mapKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1454,
									"name": "mapKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remap the keys, but keep the data the same. You can use this if you\nhave a `Collection` of `Index`es and want to convert to `Time`s, for\nexample. The return result of remapping the keys of a `Collection<T>`\nwith new keys of type `U`, will be a `Collection<U>`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nHere we remap Time keys to `TimeRange` keys using the `Time.toTimeRange()`\nmethod to center new `TimeRange`s around each `Time` with duration given\nby the `Period`, in this case 1 hour.\n\n```\nconst remapped = myCollection.mapKeys<TimeRange>((t) =>\n    t.toTimeRange(period(\"1h\"), TimeAlignment.Middle));\n```\n\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 1455,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1456,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1457,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1458,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1459,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 437,
															"character": 41
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 437,
									"character": 18
								}
							]
						},
						{
							"id": 1531,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1532,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir maximum value(s)"
									},
									"parameters": [
										{
											"id": 1533,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1534,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1535,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1536,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1537,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1538,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1539,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1540,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 643,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 642,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 643,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 644,
									"character": 14
								}
							]
						},
						{
							"id": 1571,
							"name": "mean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1572,
									"name": "mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their mean (same as avg)"
									},
									"parameters": [
										{
											"id": 1573,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1574,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1575,
									"name": "mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1576,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1577,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1578,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1579,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1580,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 680,
													"character": 46
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 679,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 680,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 681,
									"character": 15
								}
							]
						},
						{
							"id": 1551,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1552,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their median value"
									},
									"parameters": [
										{
											"id": 1553,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1554,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1555,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1556,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1557,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1558,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1559,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1560,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 662,
													"character": 48
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 661,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 662,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 663,
									"character": 17
								}
							]
						},
						{
							"id": 1541,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1542,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir minimum value(s)"
									},
									"parameters": [
										{
											"id": 1543,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1544,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1545,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1546,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1547,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1548,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1549,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1550,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 653,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 652,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 653,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 654,
									"character": 14
								}
							]
						},
						{
							"id": 1621,
							"name": "onEventAdded",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1622,
									"name": "onEventAdded",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1623,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 845,
									"character": 26
								}
							]
						},
						{
							"id": 1581,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1582,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `Collection`. This works the same way as numpy.",
										"text": "The percentile function has several parameters that can be supplied:\n* q - The percentile (should be between 0 and 100)\n* fieldSpec - Field or fields to find the percentile of\n* interp - Specifies the interpolation method to use when the desired\n* filter - Optional filter function used to clean data before aggregating\n\nPercentile lies between two data points.\n\nOptions are:\n  * linear: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * lower: i.\n  * higher: j.\n  * nearest: i or j whichever is nearest.\n  * midpoint: (i + j) / 2.\n\n"
									},
									"parameters": [
										{
											"id": 1583,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 1584,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1585,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											}
										},
										{
											"id": 1586,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1587,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1588,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 1589,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1590,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											}
										},
										{
											"id": 1591,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1592,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1593,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1594,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 711,
													"character": 6
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 705,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 706,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 712,
									"character": 21
								}
							]
						},
						{
							"id": 1595,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1596,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `Collection`.\nThis works the same way as numpy."
									},
									"parameters": [
										{
											"id": 1597,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 1598,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1599,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 725,
									"character": 19
								}
							]
						},
						{
							"id": 1605,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1606,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1607,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 814,
									"character": 15
								}
							]
						},
						{
							"id": 1406,
							"name": "removeEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1407,
									"name": "removeEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the `Event` (or duplicate keyed Events) with the given key."
									},
									"parameters": [
										{
											"id": 1408,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 229,
									"character": 23
								}
							]
						},
						{
							"id": 1483,
							"name": "rest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1484,
									"name": "rest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Collection` with all `Event`s except the first"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 538,
									"character": 15
								}
							]
						},
						{
							"id": 1614,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1615,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1616,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 829,
									"character": 17
								}
							]
						},
						{
							"id": 1412,
							"name": "setEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1413,
									"name": "setEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completely replace the existing `Event`'s in this Collection."
									},
									"parameters": [
										{
											"id": 1414,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 249,
									"character": 20
								}
							]
						},
						{
							"id": 1415,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1416,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of `Event`'s in this Collection"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 264,
									"character": 15
								}
							]
						},
						{
							"id": 1417,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1418,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `Collection`.",
										"text": "Uses the `fieldPath` to look up values in all Events.\n\nIt then counts the number that are considered valid, which\nspecifically are not:\n * NaN\n * undefined\n * null.\n"
									},
									"parameters": [
										{
											"id": 1419,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 279,
									"character": 20
								}
							]
						},
						{
							"id": 1479,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1480,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `Collection`, returns a new\n`Collection` representing a portion of this `TimeSeries` from `begin` up to\nbut not including `end`."
									},
									"parameters": [
										{
											"id": 1481,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 1482,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 531,
									"character": 16
								}
							]
						},
						{
							"id": 1470,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1471,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` using the value referenced by\nthe `field`."
									},
									"parameters": [
										{
											"id": 1472,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 486,
									"character": 15
								}
							]
						},
						{
							"id": 1468,
							"name": "sortByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1469,
									"name": "sortByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` by the `Event` key `T`.",
										"text": "In the case case of the key being `Time`, this is clear.\nFor `TimeRangeEvents` and `IndexedEvents`, the `Collection`\nwill be sorted by the begin time.\n\nThis method is particularly useful when the `Collection`\nwill be passed into a `TimeSeries`.\n\nSee also `Collection.isChronological()`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst sorted = collection.sortByKey();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 473,
									"character": 20
								}
							]
						},
						{
							"id": 1561,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1562,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their standard deviation"
									},
									"parameters": [
										{
											"id": 1563,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1564,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1565,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1566,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1567,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1568,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1569,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1570,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 671,
													"character": 47
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 670,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 671,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 672,
									"character": 16
								}
							]
						},
						{
							"id": 1511,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1512,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum of the `Event`'s in this `Collection`\nfor the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1513,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1514,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 1515,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1516,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1517,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1518,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1519,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1520,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 623,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 622,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 623,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 624,
									"character": 14
								}
							]
						},
						{
							"id": 1409,
							"name": "takeLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1410,
									"name": "takeLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes the last n `Event`'s of the `Collection` and returns a new `Collection`."
									},
									"parameters": [
										{
											"id": 1411,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 240,
									"character": 19
								}
							]
						},
						{
							"id": 1485,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1486,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the extents of the `Collection` as a `TimeRange`.\nSince this `Collection` is not necessarily in order, this\nmethod will traverse the `Collection` and determine the\nealiest and latest time represented within it."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 562,
									"character": 20
								}
							]
						},
						{
							"id": 1398,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1399,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Collection` as a regular JSON object. This\nis implementation specific, in that different types of\n`Collections` will likely implement this in their own way.",
										"text": "In the case of our `OrderedMap`, this code simply called\n`internalOrderedMap.toJS()` and lets `Immutable.js` do its\nthing.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 136,
									"character": 17
								}
							]
						},
						{
							"id": 1400,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1401,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize out the `Collection` as a string. This will be the\nstring representation of `toJSON()`."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 144,
									"character": 19
								}
							]
						},
						{
							"id": 1476,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1477,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Window the `Collection` into a given period of time.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst windowed = collection.window(period(\"1h\"));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1478,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 522,
									"character": 17
								}
							]
						},
						{
							"id": 1389,
							"name": "buildKeyMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1390,
									"name": "buildKeyMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rebuild the keyMap from scratch"
									},
									"typeParameter": [
										{
											"id": 1391,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1392,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "number"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 78,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1395
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1393,
								1394
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1402,
								1487,
								1602,
								1422,
								1425,
								1521,
								1617,
								1611,
								1436,
								1432,
								1434,
								1608,
								1491,
								1428,
								1460,
								1438,
								1473,
								1600,
								1420,
								1501,
								1430,
								1445,
								1453,
								1531,
								1571,
								1551,
								1541,
								1621,
								1581,
								1595,
								1605,
								1406,
								1483,
								1614,
								1412,
								1415,
								1417,
								1479,
								1470,
								1468,
								1561,
								1511,
								1409,
								1485,
								1398,
								1400,
								1476,
								1389
							]
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 74,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1674
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "SortedCollection",
							"id": 68
						}
					]
				},
				{
					"id": 1627,
					"name": "collectionFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1628,
							"name": "collectionFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1629,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1630,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Collection",
								"id": 1387,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 850,
							"character": 26
						}
					]
				},
				{
					"id": 1624,
					"name": "fieldAsArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1625,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the `fieldspec` into a list if it is not already."
							},
							"parameters": [
								{
									"id": 1626,
									"name": "field",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 60,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1387
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1627,
						1624
					]
				}
			],
			"sources": [
				{
					"fileName": "collection.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1675,
			"name": "\"event\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/event.ts",
			"children": [
				{
					"id": 1676,
					"name": "Event",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Event is a mapping from a time based key to a Data object.",
						"text": "The key needs to be a sub-class of the `Key`, which typically\nwould be one of the following:\n\n * `Time` - a single timestamp\n * `TimeRange` - a timerange over which the Event took place\n * `Index` - a different representation of a TimeRange\n\nThe data needs to be a sub-class of the `Data` type. That\ntype lets you construct it as either:\n - A string or number\n - A JS object\n - An Immutable.Map<string, any>\n\nInternally the Data object is, by default (since subclasses my\nimplement differently) a `Immutable.Map`.\n\nTo get values out of the data, use `get()`. This method takes\nwhat is called a field, which is a top level key of the Data\nMap.\n\nFields can refer to deep data with either a path (as an array)\nor dot notation. Not specifying  a field implies a field of\nname `\"value\"\"`.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```\nconst timestamp = time(new Date(\"2015-04-22T03:30:00Z\");\nconst e = new Event(timestamp, data({ temperature: 42 }));\n```\n\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 1677,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1678,
							"name": "Time",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1726,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1729,
									"name": "new Event",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1730,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										},
										{
											"id": 1731,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 393,
									"character": 5
								}
							]
						},
						{
							"id": 1728,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 395,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 1727,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 395,
									"character": 29
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"name": "Key",
									"id": 2
								}
							}
						},
						{
							"id": 1757,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1758,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 491,
									"character": 16
								}
							]
						},
						{
							"id": 1771,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1772,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapses multiple fields (specified in the `fieldSpecList`) into a single\nfield named `fieldName` using the supplied reducer. Optionally you can keep\nall existing fields by supplying the `append` argument as true.",
										"tags": [
											{
												"tag": "example",
												"text": ":\n```\nconst t = time(new Date(\"2015-04-22T03:30:00Z\"));\nconst e = event(t, Immutable.Map({ in: 5, out: 6, status: \"ok\" }));\nconst result = e.collapse([\"in\", \"out\"], \"total\", sum(), true);\n// result: data: { \"in\": 5, \"out\": 6, \"status\": \"ok\", \"total\": 11 } }\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1773,
											"name": "fieldSpecList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 1774,
											"name": "fieldName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 1775,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 1776,
											"name": "append",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 538,
									"character": 19
								}
							]
						},
						{
							"id": 1759,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1760,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 495,
									"character": 14
								}
							]
						},
						{
							"id": 1741,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1742,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the `value` of a specific field within the `Event`.",
										"text": "You can refer to a fields with one of the following notations:\n * (undefined) -> \"value\"\n * \"temperature\"\n * \"path.to.deep.data\"\n * [\"path\", \"to\", \"deep\", \"data\"].\n\n"
									},
									"parameters": [
										{
											"id": 1743,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 439,
									"character": 14
								}
							]
						},
						{
							"id": 1736,
							"name": "getData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1737,
									"name": "getData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the data associated with this event, which be\nof type `T`."
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 417,
									"character": 18
								}
							]
						},
						{
							"id": 1732,
							"name": "getKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1733,
									"name": "getKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the key this `Event` was constructed with"
									},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 402,
									"character": 17
								}
							]
						},
						{
							"id": 1761,
							"name": "indexAsString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1762,
									"name": "indexAsString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 499,
									"character": 24
								}
							]
						},
						{
							"id": 1748,
							"name": "isValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1749,
									"name": "isValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Will return false if the value in this `Event` is either `undefined`, `NaN` or\n`null` for the given field or fields. This serves as a determination of a \"missing\"\nvalue within a `TimeSeries` or `Collection`."
									},
									"parameters": [
										{
											"id": 1750,
											"name": "fields",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 465,
									"character": 18
								}
							]
						},
						{
							"id": 1734,
							"name": "keyType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1735,
									"name": "keyType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the label of the key"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 409,
									"character": 18
								}
							]
						},
						{
							"id": 1777,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1778,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Selects specific fields of an `Event` using a `fields` and returns\na new event with just those fields."
									},
									"parameters": [
										{
											"id": 1779,
											"name": "fields",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 554,
									"character": 17
								}
							]
						},
						{
							"id": 1744,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1745,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a new `value` on the `Event` for the given `field`, and return a new `Event`.",
										"text": "You can refer to a `field`s with one of the following notations:\n * (undefined) -> \"value\"\n * \"temperature\"\n * \"path.to.deep.data\"\n * [\"path\", \"to\", \"deep\", \"data\"].\n\n`value` is the new value to set on for the given `field` on the `Event`.\n"
									},
									"parameters": [
										{
											"id": 1746,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1747,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 455,
									"character": 14
								}
							]
						},
						{
							"id": 1738,
							"name": "setData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1739,
									"name": "setData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the data associated with this event, which be\nof type `T`."
									},
									"parameters": [
										{
											"id": 1740,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 425,
									"character": 18
								}
							]
						},
						{
							"id": 1763,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1764,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 503,
									"character": 20
								}
							]
						},
						{
							"id": 1765,
							"name": "timerangeAsUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1766,
									"name": "timerangeAsUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 507,
									"character": 31
								}
							]
						},
						{
							"id": 1755,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1756,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 487,
									"character": 20
								}
							]
						},
						{
							"id": 1767,
							"name": "timestampAsUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1768,
									"name": "timestampAsUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 511,
									"character": 31
								}
							]
						},
						{
							"id": 1751,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1752,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 475,
									"character": 17
								}
							]
						},
						{
							"id": 1769,
							"name": "toPoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1770,
									"name": "toPoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 515,
									"character": 18
								}
							]
						},
						{
							"id": 1753,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1754,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 483,
									"character": 19
								}
							]
						},
						{
							"id": 1720,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1721,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a `Immutable.List` of events and a reducer function and a\n`fieldSpec` (or list of fieldSpecs) and returns an aggregated\nresult in the form of a new Event, for each column.\nThe reducer is of the form:\n```\nfunction sum(valueList) {\n    return calcValue;\n}\n```",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst result = Event.aggregate(EVENT_LIST, avg(), [\"in\", \"out\"]);\n// result = { in: 5, out: 14.25 }\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 1722,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1723,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1724,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 1725,
											"name": "multiFieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ValueMap",
										"id": 654
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 379,
									"character": 27
								}
							]
						},
						{
							"id": 1700,
							"name": "combine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1701,
									"name": "combine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Combines multiple `Event`s together into a new array of events, one\nfor each key of the source events. The list of Events may be specified\nas an array or `Immutable.List`.",
										"text": "Combining acts on the fields specified in the `fieldSpec` (or all\nfields) and uses the reducer function supplied to take the multiple\nvalues associated with the key and reduce them down to a single value.\n\nThe return result will be an `Event` of the same type as the input.\n\nThis is the general version of `Event.sum()` and `Event.avg()`. If those\ncommon use cases are what you want, just use those functions. If you\nwant to specify your own reducer you can use this function.\n\nSee also: `TimeSeries.timeSeriesListSum()`\n"
									},
									"typeParameter": [
										{
											"id": 1702,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1703,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1704,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 1705,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 1706,
									"name": "combine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1707,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1708,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1709,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 1710,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 210,
									"character": 25
								},
								{
									"fileName": "event.ts",
									"line": 215,
									"character": 25
								},
								{
									"fileName": "event.ts",
									"line": 220,
									"character": 25
								}
							]
						},
						{
							"id": 1711,
							"name": "combiner",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1712,
									"name": "combiner",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a function that will take a list of `Event`'s and combine them\ntogether using the `fieldSpec` and reducer function provided. This is\nused as an event reducer for merging multiple `TimeSeries` together\nwith `timeSeriesListReduce()`."
									},
									"parameters": [
										{
											"id": 1713,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 1714,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "(Anonymous function)"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 310,
									"character": 19
								}
							]
						},
						{
							"id": 1679,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1680,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Do the two supplied events contain the same data, even if they are not\nthe same instance? Uses `Immutable.is()` to compare the event data and\nthe key."
									},
									"parameters": [
										{
											"id": 1681,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1682,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 65,
									"character": 20
								}
							]
						},
						{
							"id": 1683,
							"name": "isDuplicate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1684,
									"name": "isDuplicate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two supplied events are duplicates of each other.",
										"text": "Duplicated means that the keys are the same. This is the case\nwith incoming events sometimes where a second event is either known\nto be the same (but duplicate) of the first, or supersedes the first.\n\nYou can also pass in false for ignoreValues and get a full compare,\nincluding the data of the event, thus ignoring the supersede case.\n"
									},
									"parameters": [
										{
											"id": 1685,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1686,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1687,
											"name": "ignoreValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 82,
									"character": 29
								}
							]
						},
						{
							"id": 1715,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1716,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a list of `Events<T>` and makes a map from the `Event` field names\nto an array of values, one value for each Event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst eventMap = Event.map(events, [\"in\"]);\n// { in: [ 2, 4, 6, 8 ], out: [ 11, 13, 15, 18 ] }\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 1717,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1718,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1719,
											"name": "multiFieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ValueListMap",
										"id": 651
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 324,
									"character": 21
								},
								{
									"fileName": "event.ts",
									"line": 328,
									"character": 21
								}
							]
						},
						{
							"id": 1688,
							"name": "merge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1689,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Merges multiple `Event`'s together into a new array of events, one\nfor each key of the source events. Merging is done on the data of\neach event. Values from later events in the list overwrite\nearly values if fields conflict.",
										"text": "Common use cases:\n  - append events of different timestamps\n  - merge in events with one field to events with another\n  - merge in events that supersede the previous events\n\nEvents in the supplied list need to be of homogeneous types\n\nSee also: `TimeSeries.timeSeriesListMerge()`.\n"
									},
									"typeParameter": [
										{
											"id": 1690,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1691,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1692,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 1693,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1694,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1695,
											"name": "eventList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1696,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 112,
									"character": 23
								},
								{
									"fileName": "event.ts",
									"line": 113,
									"character": 23
								},
								{
									"fileName": "event.ts",
									"line": 117,
									"character": 23
								}
							]
						},
						{
							"id": 1697,
							"name": "merger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1698,
									"name": "merger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a function that will take a list of `event`'s and merge them\ntogether using the `fieldSpec` provided. This is used as a reducer for\nmerging multiple `TimeSeries` together with `timeSeriesListMerge()`."
									},
									"parameters": [
										{
											"id": 1699,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "(Anonymous function)"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 188,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1726
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1728,
								1727
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1757,
								1771,
								1759,
								1741,
								1736,
								1732,
								1761,
								1748,
								1734,
								1777,
								1744,
								1738,
								1763,
								1765,
								1755,
								1767,
								1751,
								1769,
								1753,
								1720,
								1700,
								1711,
								1679,
								1683,
								1715,
								1688,
								1697
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 59,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1674
						}
					]
				},
				{
					"id": 1786,
					"name": "IndexedEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1788,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 584,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1789,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1790,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1791,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 584,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1787,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 583,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1788,
								1787
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 582,
							"character": 35
						}
					]
				},
				{
					"id": 1780,
					"name": "TimeEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1782,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 566,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1783,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1784,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1785,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 566,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1781,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 565,
									"character": 8
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1782,
								1781
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 564,
							"character": 32
						}
					]
				},
				{
					"id": 1792,
					"name": "TimeRangeEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1794,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 602,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1795,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1796,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1797,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 602,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1793,
							"name": "timerange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 601,
									"character": 13
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1794,
								1793
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 600,
							"character": 37
						}
					]
				},
				{
					"id": 1816,
					"name": "event",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1817,
							"name": "event",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1818,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1819,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								},
								{
									"id": 1820,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 618,
							"character": 14
						}
					]
				},
				{
					"id": 1804,
					"name": "indexedEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1805,
							"name": "indexedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1806,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IndexedEventObject",
										"id": 1786
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								]
							}
						},
						{
							"id": 1807,
							"name": "indexedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1808,
									"name": "idx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								},
								{
									"id": 1809,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 587,
							"character": 21
						},
						{
							"fileName": "event.ts",
							"line": 588,
							"character": 21
						},
						{
							"fileName": "event.ts",
							"line": 589,
							"character": 21
						}
					]
				},
				{
					"id": 1798,
					"name": "timeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1799,
							"name": "timeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1800,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeEventObject",
										"id": 1780
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								]
							}
						},
						{
							"id": 1801,
							"name": "timeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1802,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								},
								{
									"id": 1803,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 569,
							"character": 18
						},
						{
							"fileName": "event.ts",
							"line": 570,
							"character": 18
						},
						{
							"fileName": "event.ts",
							"line": 571,
							"character": 18
						}
					]
				},
				{
					"id": 1810,
					"name": "timeRangeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1811,
							"name": "timeRangeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1812,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeRangeEventObject",
										"id": 1792
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								]
							}
						},
						{
							"id": 1813,
							"name": "timeRangeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1814,
									"name": "idx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								},
								{
									"id": 1815,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 605,
							"character": 23
						},
						{
							"fileName": "event.ts",
							"line": 606,
							"character": 23
						},
						{
							"fileName": "event.ts",
							"line": 607,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1676
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1786,
						1780,
						1792
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1816,
						1804,
						1798,
						1810
					]
				}
			],
			"sources": [
				{
					"fileName": "event.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1852,
			"name": "\"exports\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/exports.ts",
			"sources": [
				{
					"fileName": "exports.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 939,
			"name": "\"fill\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/fill.ts",
			"children": [
				{
					"id": 940,
					"name": "Fill",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` that fills missing/invalid values in the `Event` with\nnew values (zero, interpolated or padded).",
						"text": "When doing a linear fill, Filler instances should be chained.\n\nIf no `fieldSpec` is supplied, the default field \"value\" will be used.\n"
					},
					"typeParameter": [
						{
							"id": 941,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 949,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 950,
									"name": "new Fill",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 951,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Fill",
										"id": 940
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 40,
									"character": 29
								}
							]
						},
						{
							"id": 942,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 32,
									"character": 22
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 946,
							"name": "_keyCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 38,
									"character": 21
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 947,
							"name": "_lastGoodLinear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 39,
									"character": 27
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 944,
							"name": "_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 34,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "number"
									},
									{
										"type": "instrinct",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 948,
							"name": "_linearFillCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 40,
									"character": 28
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 943,
							"name": "_method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 33,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "FillMethod",
								"id": 667
							}
						},
						{
							"id": 945,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 37,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 964,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 965,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the fill operation on the `Event` and return filled\nin events"
									},
									"parameters": [
										{
											"id": 966,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 53
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 303,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 53
							}
						},
						{
							"id": 952,
							"name": "constFill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 953,
									"name": "constFill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process and fill the values at the paths as apropos when the fill\nmethod is either pad or zero."
									},
									"parameters": [
										{
											"id": 954,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 68,
									"character": 13
								}
							]
						},
						{
							"id": 961,
							"name": "interpolateEventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 962,
									"name": "interpolateEventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The fundamental linear interpolation workhorse code. Process\na list of `Event`'s and return a new list. Does a pass for\nevery `fieldSpec`.",
										"text": "This is abstracted out like this because we probably want\nto interpolate a list of `Event`'s not tied to a `Collection`.\nA Pipeline result list, etc etc.\n\n"
									},
									"parameters": [
										{
											"id": 963,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 225,
									"character": 24
								}
							]
						},
						{
							"id": 955,
							"name": "isValidLinearEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 956,
									"name": "isValidLinearEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Check to see if an `Event` has good values when doing\nlinear fill since we need to keep a completely intact\nevent for the values.\nWhile we are inspecting the data payload, make a note if\nany of the paths are pointing at a list. Then it\nwill trigger that filling code later."
									},
									"parameters": [
										{
											"id": 957,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 126,
									"character": 22
								}
							]
						},
						{
							"id": 958,
							"name": "linearFill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 959,
									"name": "linearFill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This handles the linear filling. It returns a list of\nzero or more `Event`'s to be emitted.",
										"text": "If an `Event` is valid\n* it has valid values for all of the field paths\n* it is cached as \"last good\" and returned to be emitted.\nThe return value is then a list of one `Event`.\n\nIf an `Event` has invalid values, it is cached to be\nprocessed later and an empty list is returned.\n\nAdditional invalid `Event`'s will continue to be cached until\na new valid value is seen, then the cached events will\nbe filled and returned. That will be a list of indeterminate\nlength.\n"
									},
									"parameters": [
										{
											"id": 960,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 162,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								949
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								942,
								946,
								947,
								944,
								948,
								943,
								945
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								964,
								952,
								961,
								955,
								958
							]
						}
					],
					"sources": [
						{
							"fileName": "fill.ts",
							"line": 30,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 50,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						940
					]
				}
			],
			"sources": [
				{
					"fileName": "fill.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 374,
			"name": "\"functions\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/functions.ts",
			"children": [
				{
					"id": 375,
					"name": "InterpolationType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 378,
							"name": "higher",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 260,
									"character": 10
								}
							]
						},
						{
							"id": 376,
							"name": "linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 258,
									"character": 10
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 377,
							"name": "lower",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 259,
									"character": 9
								}
							]
						},
						{
							"id": 380,
							"name": "midpoint",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 262,
									"character": 12
								}
							]
						},
						{
							"id": 379,
							"name": "nearest",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 261,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								378,
								376,
								377,
								380,
								379
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 257,
							"character": 29
						}
					]
				},
				{
					"id": 402,
					"name": "avg",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 403,
							"name": "avg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an `avg()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe average calculation. Other possibilities are:\n* `propergateMissing` - which will cause the avg itself to be null if the values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 404,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 78,
							"character": 19
						}
					]
				},
				{
					"id": 411,
					"name": "count",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 412,
							"name": "count",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `count()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe count. Other possibilities are:\n* `propergateMissing` - which will cause the count itself to be null if the values contain a missing value\n"
							},
							"parameters": [
								{
									"id": 413,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 147,
							"character": 21
						}
					]
				},
				{
					"id": 420,
					"name": "difference",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 421,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `difference()` function, i.e. a function that returns\nthe difference between the `min` and `max` values.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n* `propergateMissing` - which will cause the min itself to be null if the values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 422,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 208,
							"character": 26
						}
					]
				},
				{
					"id": 414,
					"name": "first",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 415,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `first()` function, i.e. a function that returns the first\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the first non-missing value. Other\npossibilities are:\n* `keepMissing` - to return the first value, regardless of if it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 416,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 167,
							"character": 21
						}
					]
				},
				{
					"id": 384,
					"name": "ignoreMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 385,
							"name": "ignoreMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 386,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 396,
					"name": "keep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 397,
							"name": "keep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Like `first()` except it will return null if not all the values are\nthe same. This can be used to transfer a value when doing aggregation.",
								"text": "For instance you might `group by` the 'type', then `avg` the 'value', but\nyou want to results to include the type. So you would `'keep'` the type\nand `'avg'` the value.\n"
							},
							"parameters": [
								{
									"id": 398,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 34,
							"character": 20
						}
					]
				},
				{
					"id": 381,
					"name": "keepMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 382,
							"name": "keepMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 383,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 19,
							"character": 17
						}
					]
				},
				{
					"id": 417,
					"name": "last",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 418,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `last()` function, i.e. a function that returns the list\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n* `keepMissing` - to return the last value, regardless of if it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 419,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 187,
							"character": 20
						}
					]
				},
				{
					"id": 405,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 406,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a `max()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe maximum search. Other possibilities are:\n*`propergateMissing` - which will cause the max itself to be null if the values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 407,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 104,
							"character": 19
						}
					]
				},
				{
					"id": 423,
					"name": "median",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 424,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the `median()` function, i.e. a function that returns\nthe median of the values supplied to it."
							},
							"parameters": [
								{
									"id": 425,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 222,
							"character": 22
						}
					]
				},
				{
					"id": 408,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 409,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a `min()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe minimum search. Other possibilities are:\n* `propergateMissing` - which will cause the min itself to be null if the values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 410,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 126,
							"character": 19
						}
					]
				},
				{
					"id": 393,
					"name": "noneIfEmpty",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 394,
							"name": "noneIfEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 395,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 24,
							"character": 17
						}
					]
				},
				{
					"id": 429,
					"name": "percentile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 430,
							"name": "percentile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `percentile` function within the a values list.",
								"text": "The parameters controlling the function:\n * q -      The percentile (should be between 0 and 100), e.g q=75 for 75th percentile.\n * interp - Specifies the interpolation method to use when the desired\n            quantile lies between two data points.\n            Options are:\n             * linear: i + (j - i) * fraction, where fraction is\n               the fractional part of the index surrounded by i and j.\n             * lower: i.\n             * higher: j.\n             * nearest: i or j whichever is nearest.\n             * midpoint: (i + j) / 2.\n * clean    Strategy to use when encountering missing data:\n             * `propergateMissing` - which will cause the min\n                itself to be null if the values contain a\n                missing value\n             * `zeroMissing` - will replace missing values\n                with a zero\n"
							},
							"parameters": [
								{
									"id": 431,
									"name": "q",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 432,
									"name": "interp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "InterpolationType",
										"id": 375
									},
									"defaultValue": " InterpolationType.linear"
								},
								{
									"id": 433,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 286,
							"character": 26
						}
					]
				},
				{
					"id": 390,
					"name": "propagateMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 391,
							"name": "propagateMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 392,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 22,
							"character": 22
						}
					]
				},
				{
					"id": 426,
					"name": "stdev",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 427,
							"name": "stdev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that returns a `stdev()` function, i.e. a function\nthat returns the standard deviation of the values supplied to it."
							},
							"parameters": [
								{
									"id": 428,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 244,
							"character": 21
						}
					]
				},
				{
					"id": 399,
					"name": "sum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 400,
							"name": "sum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `sum()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe sum calculation. Other possibilities are:\n* `propergateMissing` - which will cause the min itself to be null if the values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 401,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "(Anonymous function)",
										"id": 385
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 59,
							"character": 19
						}
					]
				},
				{
					"id": 387,
					"name": "zeroMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 388,
							"name": "zeroMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 389,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 21,
							"character": 17
						}
					]
				},
				{
					"id": 434,
					"name": "filter",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 436,
							"name": "ignoreMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 339,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 385
							}
						},
						{
							"id": 435,
							"name": "keepMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 338,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 382
							}
						},
						{
							"id": 439,
							"name": "noneIfEmpty",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 342,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 394
							}
						},
						{
							"id": 438,
							"name": "propagateMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 341,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 391
							}
						},
						{
							"id": 437,
							"name": "zeroMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 340,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)",
								"id": 388
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								436,
								435,
								439,
								438,
								437
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 337,
							"character": 19
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						375
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						402,
						411,
						420,
						414,
						384,
						396,
						381,
						417,
						405,
						423,
						408,
						393,
						429,
						390,
						426,
						399,
						387
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						434
					]
				}
			],
			"sources": [
				{
					"fileName": "functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1631,
			"name": "\"grouped\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/grouped.ts",
			"children": [
				{
					"id": 1636,
					"name": "GroupedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 1637,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1639,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`"
							},
							"signatures": [
								{
									"id": 1640,
									"name": "new GroupedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`"
									},
									"parameters": [
										{
											"id": 1641,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 1387,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636
									}
								},
								{
									"id": 1642,
									"name": "new GroupedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`"
									},
									"parameters": [
										{
											"id": 1643,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													},
													{
														"type": "reference",
														"name": "GroupingFunction",
														"id": 1664,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1644,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 68,
									"character": 64
								},
								{
									"fileName": "grouped.ts",
									"line": 73,
									"character": 69
								},
								{
									"fileName": "grouped.ts",
									"line": 74,
									"character": 95
								}
							]
						},
						{
							"id": 1638,
							"name": "collections",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 68,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 1648,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1649,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```\ngrouped\n    .aggregate({\n        a_avg: [ \"a\", avg() ],\n        b_avg: [ \"b\", avg() ],\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1650,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 1632,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 116,
									"character": 20
								}
							]
						},
						{
							"id": 1658,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1659,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1660,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 152,
									"character": 16
								}
							]
						},
						{
							"id": 1653,
							"name": "flatten",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1654,
									"name": "flatten",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 144,
									"character": 18
								}
							]
						},
						{
							"id": 1645,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1646,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the `Collection` of `Event`'s contained in the grouping"
									},
									"parameters": [
										{
											"id": 1647,
											"name": "grouping",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 101,
									"character": 14
								}
							]
						},
						{
							"id": 1661,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1662,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1663,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 159,
									"character": 15
								}
							]
						},
						{
							"id": 1651,
							"name": "ungroup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1652,
									"name": "ungroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 135,
									"character": 18
								}
							]
						},
						{
							"id": 1655,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1656,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1657,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 148,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1639
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1638
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1648,
								1658,
								1653,
								1645,
								1661,
								1651,
								1655
							]
						}
					],
					"sources": [
						{
							"fileName": "grouped.ts",
							"line": 67,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1674
						}
					]
				},
				{
					"id": 1632,
					"name": "AggregationSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```\nconst spec: AggregationSpec = {\n   in_avg: [\"in\", avg(), \"bob\"],\n   out_avg: [\"out\", avg()],\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 1633,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 1634,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1635,
									"name": "dest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Aggregation",
								"id": 739,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grouped.ts",
							"line": 61,
							"character": 32
						}
					]
				},
				{
					"id": 1664,
					"name": "GroupingFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "grouped.ts",
							"line": 65,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1665,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1666,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1667,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "grouped.ts",
									"line": 65,
									"character": 45
								}
							]
						}
					}
				},
				{
					"id": 1668,
					"name": "groupedFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1669,
							"name": "groupedFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1670,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1671,
									"name": "fieldSpec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											},
											{
												"type": "reference",
												"name": "GroupingFunction",
												"id": 1664,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 1672,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GroupedCollection",
								"id": 1636,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "grouped.ts",
							"line": 167,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1636
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1632
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1664
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1668
					]
				}
			],
			"sources": [
				{
					"fileName": "grouped.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 862,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/index.ts",
			"children": [
				{
					"id": 863,
					"name": "Index",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An index is simply a string that represents a fixed range of time.\nThere are two basic types:\n* *Multiplier index* - the number of some unit of time\n                      (hours, days etc) since the UNIX epoch.\n* *Calendar index* - The second represents a calendar range,\n                    such as Oct 2014.",
						"text": "For the first type, a multiplier index, an example might be:\n\n```text\n    1d-12355      // 30th Oct 2003 (GMT), the 12355th day since the\n                  // UNIX epoch\n```\n\nYou can also use seconds (e.g. 30s), minutes (e.g. 5m), hours (e.g. 1h)\nor days (e.g. 7d).\n\nHere are several examples of a calendar index:\n\n```text\n    2003-10-30    // 30th Oct 2003\n    2014-09       // Sept 2014\n    2015          // All of the year 2015\n```\n\nAn `Index` is a nice representation of certain types of time intervals\nbecause it can be cached with its string representation as a key.\n\nA specific period of time, and associated data can be looked up based\non that string. It also allows us to represent things like months,\nwhich have variable length.\n\nAn `Index` is also useful when collecting into specific time ranges,\nfor example generating all the 5 min (\"5m\") maximum rollups within a\nspecific day (\"1d\"). See the processing section within these docs.\n"
					},
					"children": [
						{
							"id": 887,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 888,
									"name": "new Index",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 889,
											"name": "s",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 890,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 121,
									"character": 34
								}
							]
						},
						{
							"id": 885,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 120,
									"character": 19
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 886,
							"name": "_timerange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 121,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 775
							}
						},
						{
							"id": 884,
							"name": "_utc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 119,
									"character": 16
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 902,
							"name": "asString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 903,
									"name": "asString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Alias for `toString()`"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 171,
									"character": 19
								}
							]
						},
						{
							"id": 904,
							"name": "asTimerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 905,
									"name": "asTimerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Index` as a `TimeRange`"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 178,
									"character": 22
								}
							]
						},
						{
							"id": 906,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 907,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the start date of the `Index`"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 185,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 908,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 909,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end date of the `Index`"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 192,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 893,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 894,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the timestamp to represent this `Index`\nwhich in this case will return the midpoint\nof the `TimeRange`"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 139,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 895,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 896,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Index` as JSON, which will just be its string\nrepresentation"
									},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 147,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 899,
							"name": "toNiceString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 900,
									"name": "toNiceString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "For the calendar range style `Index`es, this lets you return\nthat calendar range as a human readable format, e.g. \"June, 2014\".",
										"text": "The format specified is a `Moment.format`.\n"
									},
									"parameters": [
										{
											"id": 901,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 164,
									"character": 23
								}
							]
						},
						{
							"id": 897,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 898,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Simply returns the `Index` as its string"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 154,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 891,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 892,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 130,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 872,
							"name": "getDailyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 873,
									"name": "getDailyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an `Index` string with day granularity."
									},
									"parameters": [
										{
											"id": 874,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 875,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 95,
									"character": 37
								}
							]
						},
						{
							"id": 864,
							"name": "getIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 865,
									"name": "getIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the `index` string given an time period (e.g. 1 hour) and a `Date`.\nThe resulting string represents the 1 hour period that `Date` is in.",
										"text": "This lets you find the index string (e.g \"1h-412715\") given that you\nwant a 1 hour index and you have a Date. For example:\n```\n    import { Index } from \"pondjs\";\n    const d = new Date(\"2017-01-30T11:58:38.741Z\");\n    const index = Index.getIndexString(\"1h\", d);   // '1h-412715'\n```\n"
									},
									"parameters": [
										{
											"id": 866,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 867,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 68,
									"character": 32
								}
							]
						},
						{
							"id": 868,
							"name": "getIndexStringList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 869,
									"name": "getIndexStringList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Given a `TimeRange`, return a list of strings of index values,\nassuming a period, e.g. \"1h\".",
										"text": "This is like `Index.getIndexString()` except it returns a sequence of\nindex strings.\n"
									},
									"parameters": [
										{
											"id": 870,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 871,
											"name": "timerange",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 80,
									"character": 36
								}
							]
						},
						{
							"id": 876,
							"name": "getMonthlyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 877,
									"name": "getMonthlyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an `Index` string with month granularity."
									},
									"parameters": [
										{
											"id": 878,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 879,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 105,
									"character": 39
								}
							]
						},
						{
							"id": 880,
							"name": "getYearlyIndexString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 881,
									"name": "getYearlyIndexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate an `Index` string with year granularity."
									},
									"parameters": [
										{
											"id": 882,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 883,
											"name": "utc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 114,
									"character": 38
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								887
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								885,
								886,
								884
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								902,
								904,
								906,
								908,
								893,
								895,
								899,
								897,
								891,
								872,
								864,
								868,
								876,
								880
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 55,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 910,
					"name": "indexFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 911,
							"name": "indexFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An `Index` is simply a string that represents a fixed range of time.\nThere are two basic types:\n* *Multiplier index* - the number of some unit of time\n   (hours, days etc) since the UNIX epoch.\n* *Calendar index* - The second represents a calendar range,\n   such as Oct 2014."
							},
							"parameters": [
								{
									"id": 912,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								},
								{
									"id": 913,
									"name": "utc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Index",
								"id": 863
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 204,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						863
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						910
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"key\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/key.ts",
			"children": [
				{
					"id": 2,
					"name": "Key",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Defines the interface for all event keys"
					},
					"children": [
						{
							"id": 11,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 19,
									"character": 25
								}
							]
						},
						{
							"id": 13,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 20,
									"character": 23
								}
							]
						},
						{
							"id": 9,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 10,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 18,
									"character": 29
								}
							]
						},
						{
							"id": 5,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 6,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 16,
									"character": 26
								}
							]
						},
						{
							"id": 7,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 8,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 17,
									"character": 28
								}
							]
						},
						{
							"id": 3,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 4,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 15,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								11,
								13,
								9,
								5,
								7,
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "key.ts",
							"line": 14,
							"character": 25
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Time",
							"id": 741
						},
						{
							"type": "reference",
							"name": "TimeRange",
							"id": 775
						},
						{
							"type": "reference",
							"name": "Index",
							"id": 863
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "key.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 15,
			"name": "\"period\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/period.ts",
			"children": [
				{
					"id": 16,
					"name": "Period",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A period is a repeating unit of time which is typically\nused in pond to describe an aggregation bucket. For example\na `period(\"1d\")` would indicate buckets that are a day long."
					},
					"children": [
						{
							"id": 19,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "* Passing a number to the constructor will\nbe considered as a `ms` duration.\n* Passing a string to the constuctor will\nbe considered a duration string, with a\nformat of `%d[s|m|h|d]`\n* Passing a number and a string will be considered\na quantity and a unit. The string should be one of:\n  * milliseconds\n  * seconds\n  * minutes\n  * hours\n  * days\n  * weeks\n* Finally, you can pass either a `moment.Duration` or a\n`Moment.Duration-like` object to the constructor"
							},
							"signatures": [
								{
									"id": 20,
									"name": "new Period",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "* Passing a number to the constructor will\nbe considered as a `ms` duration.\n* Passing a string to the constuctor will\nbe considered a duration string, with a\nformat of `%d[s|m|h|d]`\n* Passing a number and a string will be considered\na quantity and a unit. The string should be one of:\n  * milliseconds\n  * seconds\n  * minutes\n  * hours\n  * days\n  * weeks\n* Finally, you can pass either a `moment.Duration` or a\n`Moment.Duration-like` object to the constructor"
									},
									"parameters": [
										{
											"id": 21,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "number"
													},
													{
														"type": "instrinct",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 22,
											"name": "arg2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 16
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 38,
									"character": 28
								}
							]
						},
						{
							"id": 17,
							"name": "_duration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 37,
									"character": 21
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						},
						{
							"id": 18,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 38,
									"character": 19
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 23,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 24,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 91,
									"character": 12
								}
							]
						},
						{
							"id": 25,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 26,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 98,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								19
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17,
								18
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								23,
								25
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 36,
							"character": 19
						}
					]
				},
				{
					"id": 40,
					"name": "periodFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 41,
							"name": "periodFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 42,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 43,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 44,
							"name": "periodFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 45,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 46,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 47,
							"name": "periodFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 48,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "any"
											},
											{
												"type": "reference",
												"name": "Duration"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 103,
							"character": 22
						},
						{
							"fileName": "period.ts",
							"line": 104,
							"character": 22
						},
						{
							"fileName": "period.ts",
							"line": 105,
							"character": 22
						},
						{
							"fileName": "period.ts",
							"line": 106,
							"character": 22
						}
					]
				},
				{
					"id": 34,
					"name": "SHORT_UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 38,
							"name": "d",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 27,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 37,
							"name": "h",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 26,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 36,
							"name": "m",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 25,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 35,
							"name": "s",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 24,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 39,
							"name": "w",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 28,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								38,
								37,
								36,
								35,
								39
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 23,
							"character": 17
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				},
				{
					"id": 27,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 32,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 31,
							"name": "hours",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 18,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 28,
							"name": "milliseconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 15,
									"character": 16
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1"
						},
						{
							"id": 30,
							"name": "minutes",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 17,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 29,
							"name": "seconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 16,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 33,
							"name": "weeks",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								32,
								31,
								28,
								30,
								29,
								33
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						16
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						40
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						34,
						27
					]
				}
			],
			"sources": [
				{
					"fileName": "period.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 49,
			"name": "\"processor\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/processor.ts",
			"children": [
				{
					"id": 50,
					"name": "Processor",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 51,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 52,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 53,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 54,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 55,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 56,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "processor.ts",
									"line": 17,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								53
							]
						}
					],
					"sources": [
						{
							"fileName": "processor.ts",
							"line": 16,
							"character": 31
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Select",
							"id": 58
						},
						{
							"type": "reference",
							"name": "Rate",
							"id": 915
						},
						{
							"type": "reference",
							"name": "Collapse",
							"id": 930
						},
						{
							"type": "reference",
							"name": "Fill",
							"id": 940
						},
						{
							"type": "reference",
							"name": "Align",
							"id": 1822
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						50
					]
				}
			],
			"sources": [
				{
					"fileName": "processor.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 914,
			"name": "\"rate\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/rate.ts",
			"children": [
				{
					"id": 915,
					"name": "Rate",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` to align the data into bins of regular time period."
					},
					"typeParameter": [
						{
							"id": 916,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 920,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 921,
									"name": "new Rate",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 922,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Rate",
										"id": 915
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 33,
									"character": 32
								}
							]
						},
						{
							"id": 918,
							"name": "_allowNegative",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 31,
									"character": 26
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 917,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 30,
									"character": 22
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 919,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 33,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 926,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 927,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the `fill` operation on the `Event` and emit."
									},
									"parameters": [
										{
											"id": 928,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 775
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 53
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 87,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 53
							}
						},
						{
							"id": 923,
							"name": "getRate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 924,
									"name": "getRate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new `TimeRangeEvent` containing the rate per second\nbetween two events."
									},
									"parameters": [
										{
											"id": 925,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 51,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								920
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								918,
								917,
								919
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								926,
								923
							]
						}
					],
					"sources": [
						{
							"fileName": "rate.ts",
							"line": 28,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 50,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "reference",
									"name": "TimeRange",
									"id": 775
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						915
					]
				}
			],
			"sources": [
				{
					"fileName": "rate.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 57,
			"name": "\"select\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/select.ts",
			"children": [
				{
					"id": 58,
					"name": "Select",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` which takes a `fieldSpec` and returns a new `Event`\nwith only those selected columns."
					},
					"typeParameter": [
						{
							"id": 59,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 60,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 62,
									"name": "new Select",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 63,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Select",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "select.ts",
									"line": 25,
									"character": 60
								}
							]
						},
						{
							"id": 61,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "select.ts",
									"line": 26,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectOptions",
								"id": 701
							}
						},
						{
							"id": 64,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 65,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 66,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 53
									}
								}
							],
							"sources": [
								{
									"fileName": "select.ts",
									"line": 29,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 53
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								60
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								61
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								64
							]
						}
					],
					"sources": [
						{
							"fileName": "select.ts",
							"line": 25,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 50,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						58
					]
				}
			],
			"sources": [
				{
					"fileName": "select.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 67,
			"name": "\"sorted\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/sorted.ts",
			"children": [
				{
					"id": 68,
					"name": "SortedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "In general, a `Collection` is a bucket of `Event`'s, with no particular order. This,\nhowever, is a sub-class of a `Collection` which always maintains time-based sorting.",
						"text": "As a result, it allows certain operations such as `bisect()` which depend on a\nknown ordering.\n\nThis is the backing structure for a `TimeSeries`. You probably want to use a\n`TimeSeries` directly.\n"
					},
					"typeParameter": [
						{
							"id": 69,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 70,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a new `Sorted Collection` (experimental)"
							},
							"signatures": [
								{
									"id": 71,
									"name": "new SortedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a new `Sorted Collection` (experimental)"
									},
									"parameters": [
										{
											"id": 72,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														]
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 1387,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 68
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.__constructor",
										"id": 1395
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 30,
									"character": 68
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.__constructor",
								"id": 1395
							}
						},
						{
							"id": 100,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 95,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection._events",
								"id": 1393
							}
						},
						{
							"id": 101,
							"name": "_keyMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 96,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Set",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "number"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection._keyMap",
								"id": 1394
							}
						},
						{
							"id": 106,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 107,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a new `Event` into the `Collection`, returning a new `Collection`\ncontaining that `Event`. Optionally the Events may be de-duplicated.",
										"text": "The dedup arg may either be a boolean (in which case any existing\nEvents with the same key will be replaced by this new Event), or\nwith a function. If dedup is a function that function will be\npassed a list of all `Event`'s with that key and will be expected\nto return a single `Event` to replace them with.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nlet collection = pond.collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2);\n```"
											},
											{
												"tag": "example",
												"text": "\n```\n// dedup with the sum of the duplicated events\nconst collection = pond.collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3, (events) => {\n        const a = events.reduce((sum, e) => sum + e.get(\"a\"), 0);\n        return new Event<Time>(timestamp2, { a });\n    });\n\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 108,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 109,
											"name": "dedup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DedupFunction",
														"id": 718,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "instrinct",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.addEvent",
										"id": 1402
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 177,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.addEvent",
								"id": 1402
							}
						},
						{
							"id": 183,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 184,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Collection`'s `Event`s down using a user defined function\n`reducer` to do the reduction. Fields to be aggregated are specified using a\n`fieldSpec` argument, which can be a field name or array of field names.",
										"text": "If the `fieldSpec` matches multiple fields then an object is returned\nwith keys being the fields and values being the aggregation.\n\nThe `Collection` class itself contains most of the common aggregation functions\nbuilt in, but this is here to help when what you need isn't supplied\nout of the box.\n"
									},
									"parameters": [
										{
											"id": 185,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 186,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.aggregate",
										"id": 1487
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 590,
									"character": 20
								},
								{
									"fileName": "collection.ts",
									"line": 591,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.aggregate",
								"id": 1487
							}
						},
						{
							"id": 298,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 299,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The `align()` method applied to a collection of events that might come in with timestamps\nat uneven intervals and produces a new `Collection` of those points, but aligned on\nprecise time window boundaries. A `Collection` containing four events with following\ntimestamps:\n```\n    0:40\n    1:05\n    1:45\n    2:10\n```",
										"text": "Given a period of 1m (every one minute), a new `Collection` with two events at the following\ntimes will be produced:\n\n```\n    1:00\n    2:00\n```\n\nOnly a `Collection` of `Event<Time>` objects can be aligned. `Event<Index>` objects are basically\nalready aligned and it makes no sense in the case of a `Event<TimeRange>`.\n\nIt should also be noted that the aligned event will only contain the fields that\nalignment was requested on. Which is to say if you have two columns, \"in\" and \"out\",\nand only request to align the \"in\" column, the \"out\" value will not be contained in\nthe resulting collection.\n"
									},
									"parameters": [
										{
											"id": 300,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.align",
										"id": 1602
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 809,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.align",
								"id": 1602
							}
						},
						{
							"id": 126,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 127,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` at the given position `pos` in the\n`Collection`.",
										"text": "Note: this is the least efficient way to fetch a point.\n\nIf you wish to scan the whole set of Events, use an\niterator (see `forEach()` and `map()`). For direct access\nthe `Collection` is optimised for returning results via\nthe `Event`'s key (see `atKey()`).\n"
									},
									"parameters": [
										{
											"id": 128,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.at",
										"id": 1422
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 307,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.at",
								"id": 1422
							}
						},
						{
							"id": 129,
							"name": "atKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 130,
									"name": "atKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` located at the key specified, if it\nexists. Note that this doesn't find the closest key, or\nimplement `bisect`. For that you need the sorted\nCollection that is part of a `TimeSeries`. On the plus side,\nif you know the key this is an efficient way to access the\n`Event` within the `Collection`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst timestamp = new Time(\"2015-04-22T03:30:00Z\");\nconst event = collection.atKey(timestamp)\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 131,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.atKey",
										"id": 1425
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 325,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.atKey",
								"id": 1425
							}
						},
						{
							"id": 217,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 218,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down\nto their average(s)"
									},
									"parameters": [
										{
											"id": 219,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 220,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.avg",
										"id": 1521
									}
								},
								{
									"id": 221,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 222,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 223,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 224,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 225,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 226,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 633,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.avg",
										"id": 1521
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 632,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 633,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 634,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.avg",
								"id": 1521
							}
						},
						{
							"id": 81,
							"name": "bisect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 82,
									"name": "bisect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index that `bisect`'s the `TimeSeries` at the time specified.",
										"returns": "The row number that is the greatest, but still below t.\n"
									},
									"parameters": [
										{
											"id": 83,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The time to bisect the TimeSeries with"
											},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 84,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The position to begin searching at\n"
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 68,
									"character": 17
								}
							]
						},
						{
							"id": 89,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 90,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 91,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 92,
											"name": "keyMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.clone",
										"id": 1617
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 116,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.clone",
								"id": 1617
							}
						},
						{
							"id": 307,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 308,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 309,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.collapse",
										"id": 1611
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 824,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.collapse",
								"id": 1611
							}
						},
						{
							"id": 140,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 141,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterator (`Immutable.Iterator`) into the internal\nevent `OrderedMap`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nlet iterator = collection.entries();\nfor (let x = iterator.next(); !x.done; x = iterator.next()) {\n    const [key, event] = x.value;\n    console.log(`Key: ${key}, Event: ${event.toString()}`);\n}\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "Object"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.entries",
										"id": 1436
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 380,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.entries",
								"id": 1436
							}
						},
						{
							"id": 136,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 137,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the `Event<T>`s as an `Immutable.List`."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.eventList",
										"id": 1432
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 351,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.eventList",
								"id": 1432
							}
						},
						{
							"id": 138,
							"name": "eventMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 139,
									"name": "eventMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the events in the `Collection` as an `Immutable.Map`, where\nthe key of type `T` (e.g. Time, Index, or TimeRange),\nrepresented as a string, is mapped to the Event itself.",
										"returns": "Immutable.Map<T, Event<T>> Events in this Collection,\n                                    converted to a Map.\n"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.eventMap",
										"id": 1434
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 363,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.eventMap",
								"id": 1434
							}
						},
						{
							"id": 304,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 305,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 306,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.fill",
										"id": 1608
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 819,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.fill",
								"id": 1608
							}
						},
						{
							"id": 187,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 188,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 189,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 190,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.first",
										"id": 1491
									}
								},
								{
									"id": 191,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 192,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 193,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 194,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 195,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 196,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 604,
													"character": 47
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.first",
										"id": 1491
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 603,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 604,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 605,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.first",
								"id": 1491
							}
						},
						{
							"id": 132,
							"name": "firstEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 133,
									"name": "firstEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.firstEvent",
										"id": 1428
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 337,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.firstEvent",
								"id": 1428
							}
						},
						{
							"id": 156,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 157,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "FlatMap over the events in this `Collection`. For each `Event`\npassed to your callback function you should map that to\nzero, one or many Events, returned as an `Immutable.List`."
									},
									"typeParameter": [
										{
											"id": 158,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 159,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 160,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 161,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 162,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 163,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "U",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 450,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.flatMap",
										"id": 1460
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 449,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.flatMap",
								"id": 1460
							}
						},
						{
							"id": 142,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 143,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this `Collection`. Events are in the\norder that they were added, unless the Collection has since been\nsorted.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\ncollection.forEach((e, k) => {\n    console.log(e, k);\n})\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 144,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 145,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 146,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 147,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 148,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 396,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.forEach",
										"id": 1438
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 396,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 1438
							}
						},
						{
							"id": 169,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 170,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "GroupBy a field's value. The result is a `CollectionMap`, mapping\na key (the value of the field) to a `Collection` of Events that\nmatched field.",
										"text": "```\nconst grouped = c\n    .groupBy(\"team_name\")\n    .aggregate({\n        \"a_avg\": [\"a\", avg()],\n        \"b_avg\": [\"b\", avg()],\n    });\n```\n"
									},
									"parameters": [
										{
											"id": 171,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													},
													{
														"type": "reference",
														"name": "GroupingFunction",
														"id": 1664,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.groupBy",
										"id": 1473
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 510,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.groupBy",
								"id": 1473
							}
						},
						{
							"id": 296,
							"name": "isChronological",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 297,
									"name": "isChronological",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if all events in this `Collection` are in chronological order."
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.isChronological",
										"id": 1600
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 765,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isChronological",
								"id": 1600
							}
						},
						{
							"id": 124,
							"name": "isEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 125,
									"name": "isEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return if the `Collection` has any events in it"
									},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.isEmpty",
										"id": 1420
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 292,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 1420
							}
						},
						{
							"id": 197,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 198,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 199,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 200,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.last",
										"id": 1501
									}
								},
								{
									"id": 201,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 202,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 203,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 204,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 205,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 206,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 613,
													"character": 46
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.last",
										"id": 1501
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 612,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 613,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 614,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.last",
								"id": 1501
							}
						},
						{
							"id": 134,
							"name": "lastEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 135,
									"name": "lastEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.lastEvent",
										"id": 1430
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 344,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.lastEvent",
								"id": 1430
							}
						},
						{
							"id": 73,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 74,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map over the events in this `Collection`. For each `Event`\npassed to your callback function you should map that to\na new `Event`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst mapped = sorted.map(event => {\n    return new Event(event.key(), { a: 55 });\n});\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 75,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 76,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 77,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 78,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 79,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 80,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "sorted.ts",
															"line": 54,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 68,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.map",
										"id": 1445
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 53,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.map",
								"id": 1445
							}
						},
						{
							"id": 149,
							"name": "mapKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 150,
									"name": "mapKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remap the keys, but keep the data the same. You can use this if you\nhave a `Collection` of `Index`es and want to convert to `Time`s, for\nexample. The return result of remapping the keys of a `Collection<T>`\nwith new keys of type `U`, will be a `Collection<U>`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nHere we remap Time keys to `TimeRange` keys using the `Time.toTimeRange()`\nmethod to center new `TimeRange`s around each `Time` with duration given\nby the `Period`, in this case 1 hour.\n\n```\nconst remapped = myCollection.mapKeys<TimeRange>((t) =>\n    t.toTimeRange(period(\"1h\"), TimeAlignment.Middle));\n```\n\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 151,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 152,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 153,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 154,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 155,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 437,
															"character": 41
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.mapKeys",
										"id": 1453
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 437,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.mapKeys",
								"id": 1453
							}
						},
						{
							"id": 227,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 228,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir maximum value(s)"
									},
									"parameters": [
										{
											"id": 229,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 230,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.max",
										"id": 1531
									}
								},
								{
									"id": 231,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 232,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 233,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 234,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 235,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 236,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 643,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.max",
										"id": 1531
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 642,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 643,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 644,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.max",
								"id": 1531
							}
						},
						{
							"id": 267,
							"name": "mean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 268,
									"name": "mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their mean (same as avg)"
									},
									"parameters": [
										{
											"id": 269,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 270,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.mean",
										"id": 1571
									}
								},
								{
									"id": 271,
									"name": "mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 272,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 273,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 274,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 275,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 276,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 680,
													"character": 46
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.mean",
										"id": 1571
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 679,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 680,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 681,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.mean",
								"id": 1571
							}
						},
						{
							"id": 247,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 248,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their median value"
									},
									"parameters": [
										{
											"id": 249,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 250,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.median",
										"id": 1551
									}
								},
								{
									"id": 251,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 252,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 253,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 254,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 255,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 256,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 662,
													"character": 48
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.median",
										"id": 1551
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 661,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 662,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 663,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.median",
								"id": 1551
							}
						},
						{
							"id": 237,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 238,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir minimum value(s)"
									},
									"parameters": [
										{
											"id": 239,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 240,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.min",
										"id": 1541
									}
								},
								{
									"id": 241,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 242,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 243,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 244,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 245,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 246,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 653,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.min",
										"id": 1541
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 652,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 653,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 654,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.min",
								"id": 1541
							}
						},
						{
							"id": 93,
							"name": "onEventAdded",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 94,
									"name": "onEventAdded",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If our new `Event` was added at the end, then we don't have anything to maintain.\nHowever, if the `Event` would otherwise be out of order then we sort the `Collection`."
									},
									"parameters": [
										{
											"id": 95,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.onEventAdded",
										"id": 1621
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 127,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.onEventAdded",
								"id": 1621
							}
						},
						{
							"id": 277,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 278,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `Collection`. This works the same way as numpy.",
										"text": "The percentile function has several parameters that can be supplied:\n* q - The percentile (should be between 0 and 100)\n* fieldSpec - Field or fields to find the percentile of\n* interp - Specifies the interpolation method to use when the desired\n* filter - Optional filter function used to clean data before aggregating\n\nPercentile lies between two data points.\n\nOptions are:\n  * linear: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * lower: i.\n  * higher: j.\n  * nearest: i or j whichever is nearest.\n  * midpoint: (i + j) / 2.\n\n"
									},
									"parameters": [
										{
											"id": 279,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 280,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 281,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											}
										},
										{
											"id": 282,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.percentile",
										"id": 1581
									}
								},
								{
									"id": 283,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 284,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 285,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 286,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											}
										},
										{
											"id": 287,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 288,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 289,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 290,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 711,
													"character": 6
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.percentile",
										"id": 1581
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 705,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 706,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 712,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.percentile",
								"id": 1581
							}
						},
						{
							"id": 291,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 292,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `Collection`.\nThis works the same way as numpy."
									},
									"parameters": [
										{
											"id": 293,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 294,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 295,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.quantile",
										"id": 1595
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 725,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.quantile",
								"id": 1595
							}
						},
						{
							"id": 301,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 302,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 303,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.rate",
										"id": 1605
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 814,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.rate",
								"id": 1605
							}
						},
						{
							"id": 110,
							"name": "removeEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 111,
									"name": "removeEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the `Event` (or duplicate keyed Events) with the given key."
									},
									"parameters": [
										{
											"id": 112,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.removeEvents",
										"id": 1406
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 229,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeEvents",
								"id": 1406
							}
						},
						{
							"id": 179,
							"name": "rest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 180,
									"name": "rest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Collection` with all `Event`s except the first"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.rest",
										"id": 1483
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 538,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.rest",
								"id": 1483
							}
						},
						{
							"id": 310,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 311,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 312,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.select",
										"id": 1614
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 829,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.select",
								"id": 1614
							}
						},
						{
							"id": 116,
							"name": "setEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 117,
									"name": "setEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completely replace the existing `Event`'s in this Collection."
									},
									"parameters": [
										{
											"id": 118,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.setEvents",
										"id": 1412
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 249,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.setEvents",
								"id": 1412
							}
						},
						{
							"id": 119,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 120,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of `Event`'s in this Collection"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.size",
										"id": 1415
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 264,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 1415
							}
						},
						{
							"id": 121,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 122,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `Collection`.",
										"text": "Uses the `fieldPath` to look up values in all Events.\n\nIt then counts the number that are considered valid, which\nspecifically are not:\n * NaN\n * undefined\n * null.\n"
									},
									"parameters": [
										{
											"id": 123,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sizeValid",
										"id": 1417
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 279,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sizeValid",
								"id": 1417
							}
						},
						{
							"id": 175,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 176,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `Collection`, returns a new\n`Collection` representing a portion of this `TimeSeries` from `begin` up to\nbut not including `end`."
									},
									"parameters": [
										{
											"id": 177,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 178,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.slice",
										"id": 1479
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 531,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.slice",
								"id": 1479
							}
						},
						{
							"id": 166,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 167,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` using the value referenced by\nthe `field`."
									},
									"parameters": [
										{
											"id": 168,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sort",
										"id": 1470
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 486,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sort",
								"id": 1470
							}
						},
						{
							"id": 164,
							"name": "sortByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 165,
									"name": "sortByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` by the `Event` key `T`.",
										"text": "In the case case of the key being `Time`, this is clear.\nFor `TimeRangeEvents` and `IndexedEvents`, the `Collection`\nwill be sorted by the begin time.\n\nThis method is particularly useful when the `Collection`\nwill be passed into a `TimeSeries`.\n\nSee also `Collection.isChronological()`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst sorted = collection.sortByKey();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sortByKey",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 473,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sortByKey",
								"id": 1468
							}
						},
						{
							"id": 257,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 258,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their standard deviation"
									},
									"parameters": [
										{
											"id": 259,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 260,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.stdev",
										"id": 1561
									}
								},
								{
									"id": 261,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 262,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 263,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 264,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 265,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 266,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 671,
													"character": 47
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.stdev",
										"id": 1561
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 670,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 671,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 672,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.stdev",
								"id": 1561
							}
						},
						{
							"id": 207,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 208,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum of the `Event`'s in this `Collection`\nfor the `fieldspec`"
									},
									"parameters": [
										{
											"id": 209,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 210,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sum",
										"id": 1511
									}
								},
								{
									"id": 211,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 212,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										},
										{
											"id": 213,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 214,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 215,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 216,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"isArray": true,
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 623,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sum",
										"id": 1511
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 622,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 623,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 624,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sum",
								"id": 1511
							}
						},
						{
							"id": 113,
							"name": "takeLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 114,
									"name": "takeLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes the last n `Event`'s of the `Collection` and returns a new `Collection`."
									},
									"parameters": [
										{
											"id": 115,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.takeLast",
										"id": 1409
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 240,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.takeLast",
								"id": 1409
							}
						},
						{
							"id": 181,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 182,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the extents of the `Collection` as a `TimeRange`.\nSince this `Collection` is not necessarily in order, this\nmethod will traverse the `Collection` and determine the\nealiest and latest time represented within it."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.timerange",
										"id": 1485
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 562,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.timerange",
								"id": 1485
							}
						},
						{
							"id": 102,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 103,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Collection` as a regular JSON object. This\nis implementation specific, in that different types of\n`Collections` will likely implement this in their own way.",
										"text": "In the case of our `OrderedMap`, this code simply called\n`internalOrderedMap.toJS()` and lets `Immutable.js` do its\nthing.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.toJSON",
										"id": 1398
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 136,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toJSON",
								"id": 1398
							}
						},
						{
							"id": 104,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 105,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize out the `Collection` as a string. This will be the\nstring representation of `toJSON()`."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.toString",
										"id": 1400
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 144,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toString",
								"id": 1400
							}
						},
						{
							"id": 172,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 173,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Window the `Collection` into a given period of time.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst windowed = collection.window(period(\"1h\"));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 174,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.window",
										"id": 1476
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 522,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.window",
								"id": 1476
							}
						},
						{
							"id": 96,
							"name": "buildKeyMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 97,
									"name": "buildKeyMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rebuild the keyMap from scratch"
									},
									"typeParameter": [
										{
											"id": 98,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 99,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "number"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.buildKeyMap",
										"id": 1389
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 78,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.buildKeyMap",
								"id": 1389
							}
						},
						{
							"id": 85,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 86,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two collections to each other. If the collections\nare of the same value as each other then equals will return true.",
										"returns": "result\n"
									},
									"parameters": [
										{
											"id": 87,
											"name": "collection1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 68,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 88,
											"name": "collection2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 68,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "sorted.ts",
									"line": 100,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								70
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								100,
								101
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								106,
								183,
								298,
								126,
								129,
								217,
								81,
								89,
								307,
								140,
								136,
								138,
								304,
								187,
								132,
								156,
								142,
								169,
								296,
								124,
								197,
								134,
								73,
								149,
								227,
								267,
								247,
								237,
								93,
								277,
								291,
								301,
								110,
								179,
								310,
								116,
								119,
								121,
								175,
								166,
								164,
								257,
								207,
								113,
								181,
								102,
								104,
								172,
								96,
								85
							]
						}
					],
					"sources": [
						{
							"fileName": "sorted.ts",
							"line": 30,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Collection",
							"id": 1387,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				},
				{
					"id": 313,
					"name": "sortedCollectionFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 314,
							"name": "sortedCollectionFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 315,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 316,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedCollection",
								"id": 68,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "sorted.ts",
							"line": 136,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						68
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						313
					]
				}
			],
			"sources": [
				{
					"fileName": "sorted.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 967,
			"name": "\"stream\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/stream.ts",
			"children": [
				{
					"id": 1205,
					"name": "AggregationNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1206,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1207,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1209,
									"name": "new AggregationNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1210,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 714,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AggregationNode",
										"id": 1205
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 296,
									"character": 85
								}
							]
						},
						{
							"id": 1208,
							"name": "aggregationSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 297,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"name": "AggregationSpec",
								"id": 714,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								]
							}
						},
						{
							"id": 1214,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1215,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1216,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1217,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Index",
																"id": 863
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1221,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1222,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1223,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Index",
														"id": 863
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1211,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1212,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1213,
											"name": "keyedCollection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Index",
														"id": 863
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 301,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1218,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1219,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1220,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1207
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1208,
								1214
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1215,
								1221,
								1211,
								1218
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 296,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 1326,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Index",
											"id": 863
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1110,
					"name": "AlignNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1111,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1113,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1114,
									"name": "new AlignNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1115,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AlignNode",
										"id": 1110
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 211,
									"character": 32
								}
							]
						},
						{
							"id": 1119,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1112,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 211,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Align",
								"id": 1822,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1120,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1121,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1122,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1126,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1127,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1128,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1116,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1117,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1118,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 217,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1123,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1124,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1125,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1113
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1119,
								1112
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1120,
								1126,
								1116,
								1123
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 210,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1148,
					"name": "CollapseNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1149,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1151,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1152,
									"name": "new CollapseNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1153,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CollapseNode",
										"id": 1148
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 245,
									"character": 35
								}
							]
						},
						{
							"id": 1157,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1150,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 245,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Collapse",
								"id": 930,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1158,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1159,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1160,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1164,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1165,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1166,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1154,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1155,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1156,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 251,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1161,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1162,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1163,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1151
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1157,
								1150
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1158,
								1164,
								1154,
								1161
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 244,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 984,
					"name": "EventInputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 985,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 986,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 987,
									"name": "new EventInputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventInputNode",
										"id": 984
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 112,
									"character": 70
								}
							]
						},
						{
							"id": 991,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 992,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 993,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 994,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 998,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 999,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1000,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 988,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 989,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 990,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 117,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 995,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 996,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 997,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								986
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								991
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								992,
								998,
								988,
								995
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 112,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1001,
					"name": "EventOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1002,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1003,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1005,
									"name": "new EventOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1006,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventCallback",
												"id": 1317
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventOutputNode",
										"id": 1001
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 127,
									"character": 71
								}
							]
						},
						{
							"id": 1004,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 128,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "EventCallback",
								"id": 1317
							}
						},
						{
							"id": 1010,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1011,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1012,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1013,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1017,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1018,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1019,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1007,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1008,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1009,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 132,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1014,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1015,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1016,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1003
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1004,
								1010
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1011,
								1017,
								1007,
								1014
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 127,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1224,
					"name": "EventStream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An `EventStream` is the interface to the stream provided for manipulation of\nparts of the streaming pipeline that map a stream of Events of type <T>.",
						"text": "For example a stream of Events<Time> can be mapped to an output stream of\nnew Events<Time> that are aligned to a fixed period boundary. Less or more Events\nmay result.\n\nThe type parameter `<U>` is the input `Event` type at the top of the stream, since each\ninterface exposes the `addEvent(Event<U>)` method for inserting events at the top of\nthe stream.\n\nThe type parameter `<T>` is the type of `Event`s in this part of the stream. That is\nnodes created by the API at this point of the stream will expect Events of type T,\nand will output new Events, potentially of a different type.\n"
					},
					"typeParameter": [
						{
							"id": 1225,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1226,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1227,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1229,
									"name": "new EventStream",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1230,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Stream",
												"id": 1285,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 1224
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 336,
									"character": 56
								}
							]
						},
						{
							"id": 1228,
							"name": "stream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 338,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 1285,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1231,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1232,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add events into the stream"
									},
									"parameters": [
										{
											"id": 1233,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 343,
									"character": 12
								}
							]
						},
						{
							"id": 1251,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1252,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Align Events in the stream to a specific boundary at a fixed period.\nOptions are a `AlignmentOptions` object where you specify which field to\nalign with `fieldSpec`, what boundary period to use with `window` and\nthe method of alignment with `method` (which can be either `Linear`\ninterpolation, or `Hold`).",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst s = stream()\n    .align({\n        fieldSpec: \"value\",\n        window: period(\"1m\"),\n        method: AlignmentMethod.Linear\n    })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1253,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 406,
									"character": 9
								}
							]
						},
						{
							"id": 1260,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1261,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming events to new events with specified\nfields collapsed into a new field using an aggregation function.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nEvents with fields a, b, c can be mapped to events with only a field\ncontaining the avg of a and b called \"ab\".\n\n```\nconst s = stream()\n     .collapse({\n         fieldSpecList: [\"a\", \"b\"],\n         fieldName: \"ab\",\n         reducer: avg(),\n         append: false\n     })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1262,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 473,
									"character": 12
								}
							]
						},
						{
							"id": 1248,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1249,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill missing values in stream events.",
										"text": "Missing values can be filled with different `method`s:\n * FillMethod.Linear - linear interpolation\n * FillMethod.Pad - as padding (filling with a previous value)\n * FillMethod.Zero or filled with zeros.\n\nYou can also specify the number of events you are willing to fill\nbefore giving up using the `limit` option. This is because commonly\nyou might want to fill the occasional hole in data, but if you have\na true outage of data then you want to keep that instead of a\nworthless fill.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream()\n    .fill({ method: FillMethod.Linear, fieldSpec: \"value\", limit: 2 })\n    .output(event => {\n        const e = event as Event;\n        results.push(e);\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1250,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 385,
									"character": 8
								}
							]
						},
						{
							"id": 1241,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1242,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remaps each Event<T> in the stream to 0, 1 or many Event<M>s."
									},
									"typeParameter": [
										{
											"id": 1243,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1244,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1245,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1246,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1247,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "M",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 357,
															"character": 34
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 357,
									"character": 11
								}
							]
						},
						{
							"id": 1266,
							"name": "groupByWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1267,
									"name": "groupByWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The heart of the streaming code is that in addition to remapping operations of\na stream of events, you can also group by a window. This is what allows you to do\nrollups with the streaming code.",
										"text": "A window is defined with the `WindowingOptions`, which allows you to specify\nthe window period as a `Period` (e.g. `period(\"30m\")` for each 30 minutes window)\nas the `window` and a `Trigger` enum value (emit a completed window on each\nincoming `Event` or on each completed window).\n\nThe return type of this operation will no longer be an `EventStream` but rather\na `KeyedCollectionStream` as each entity passed down the stream is no longer an\n`Event` but rather a tuple mapping a key (the window name) to a `Collection`\nwhich contains all `Event`s in the window. So, see `KeyedCollectionStream`\nfor what can be done as the next pipeline step. But spoiler alert, generally\nthe next step is to `aggregate()` those windows back to `Events` or to `output()`\nto `Collection`s.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst source = stream<Time>()\n    .groupByWindow({\n        window: period(\"30m\"),\n        trigger: Trigger.perEvent\n    })\n    .aggregate({...})\n    .output(event => {\n        ...\n    });\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1268,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 677
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 530,
									"character": 17
								}
							]
						},
						{
							"id": 1234,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1235,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remaps each Event<T> in the stream to a new Event<M>."
									},
									"typeParameter": [
										{
											"id": 1236,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1237,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1238,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1239,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1240,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 350,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 350,
									"character": 7
								}
							]
						},
						{
							"id": 1263,
							"name": "output",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1264,
									"name": "output",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An output, specified as an `EventCallback`, essentially `(event: Event<Key>) => void`.\nUsing this method you are able to access the stream result. Your callback\nfunction will be called whenever a new Event is available. Not that currently the\ntype will be Event<Key> as the event is generically passed through the stream, but\nyou can cast the type (if you are using Typescript).",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream<Time>()\n    .groupByWindow({...})\n    .aggregate({...})\n    .output(event => {\n        const e = event as Event<Index>;\n        // Do something with the event e\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1265,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventCallback",
												"id": 1317
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 495,
									"character": 10
								}
							]
						},
						{
							"id": 1254,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1255,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming Events in the stream to rates (essentially taking\nthe derivative over time). The resulting output Events will be\nof type `Event<TimeRange>`, where the `TimeRange` key will be\nthe time span over which the rate was calculated. If you want you\ncan remap this later and decide on a timestamp to use instead.",
										"text": "Options are a `RateOptions` object, where you specify which field\nto take the rate of with `fieldSpec` and can also optionally choose\nto include negative rates with `allowNegative`. (the default\nis to ignore negative rates). This is a useful option if you expect\nthe incoming values to always increase while a decrease is considered\na bad condition (e.g. network counters or click counts).\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst s = stream()\n    .align({...})\n    .rate({ fieldSpec: \"value\", allowNegative: false })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1256,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 432,
									"character": 8
								}
							]
						},
						{
							"id": 1257,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1258,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming events to new events with on the specified\nfields selected out of the soure.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nEvents with fields a, b, c can be mapped to events with only\nb and c:\n\n```\nconst s = stream()\n     .select([\"b\", \"c\"])\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1259,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 450,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1227
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1228
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1231,
								1251,
								1260,
								1248,
								1241,
								1266,
								1234,
								1263,
								1254,
								1257
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 336,
							"character": 24
						}
					]
				},
				{
					"id": 1091,
					"name": "FillNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1092,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1094,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1095,
									"name": "new FillNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1096,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FillNode",
										"id": 1091
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 194,
									"character": 31
								}
							]
						},
						{
							"id": 1100,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1093,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 194,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Fill",
								"id": 940,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1101,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1102,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1103,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1107,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1108,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1109,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1097,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1098,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1099,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 200,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1104,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1105,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1106,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1094
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1100,
								1093
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1101,
								1107,
								1097,
								1104
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 193,
							"character": 14
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1065,
					"name": "FlatMapNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1066,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1067,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1068,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1073,
									"name": "new FlatMapNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1074,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1075,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1076,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1077,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "M",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 179,
															"character": 31
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FlatMapNode",
										"id": 1065
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 178,
									"character": 82
								}
							]
						},
						{
							"id": 1069,
							"name": "mapper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 179,
									"character": 30
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1070,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1071,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1072,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "stream.ts",
											"line": 179,
											"character": 31
										}
									]
								}
							}
						},
						{
							"id": 1081,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1082,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1083,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1084,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1088,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1089,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1090,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1078,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1079,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1080,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 183,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1085,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1086,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1087,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1068
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1069,
								1081
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1082,
								1088,
								1078,
								1085
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 178,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "M",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1020,
					"name": "KeyedCollectionOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1021,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1022,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1024,
									"name": "new KeyedCollectionOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1025,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionCallback",
												"id": 1321,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionOutputNode",
										"id": 1020
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 146,
									"character": 3
								}
							]
						},
						{
							"id": 1023,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 147,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "KeyedCollectionCallback",
								"id": 1321,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1029,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1030,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1031,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1032,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "KeyedCollection",
														"id": 1326,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1036,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1037,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1038,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1026,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1027,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1028,
											"name": "keyedCollection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 151,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1033,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1034,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1035,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1022
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1023,
								1029
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1030,
								1036,
								1026,
								1033
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 143,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 1326,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 1326,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1269,
					"name": "KeyedCollectionStream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 1270,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1271,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1272,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1274,
									"name": "new KeyedCollectionStream",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1275,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Stream",
												"id": 1285,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 1269
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 536,
									"character": 66
								}
							]
						},
						{
							"id": 1273,
							"name": "stream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 537,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 1285,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1276,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1277,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add events into the stream"
									},
									"parameters": [
										{
											"id": 1278,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 542,
									"character": 12
								}
							]
						},
						{
							"id": 1282,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1283,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes an incoming tuple mapping a key (the window name) to a `Collection`\n(containing all `Event`s in the window) and reduces that down\nto an output `Event<Index>` using an aggregation specification. As\nindicated, the output is an `IndexedEvent`, since the `Index` describes\nthe the window the aggregation was made from.",
										"text": "The `AggregationSpec` which describes the reduction, is a mapping of the\nthe desired output field to the combination of input field and aggregation function.\nIn the example below, `in_avg` is the new field, which is the aggregation\nof all the `in` fields in the `Collection` using the `avg()` function. Thus an\noutput event would contain just the `in_avg` field and its value would be\nthe average of all the `in` fields in the collection, for that window. That\n`Event` would have an `Index` which describes the window from which it came.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst source = stream()\n    .groupByWindow({\n        window: period(\"30m\"),\n        trigger: Trigger.perEvent\n    })\n    .aggregate({\n        in_avg: [\"in\", avg()],\n        out_avg: [\"out\", avg()]\n    })\n    .output(event => {\n        ...\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1284,
											"name": "spec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 714,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 600,
									"character": 13
								}
							]
						},
						{
							"id": 1279,
							"name": "output",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1280,
									"name": "output",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An output, specified as an `KeyedCollectionCallback`, essentially\n`(collection: Collection<T>,vkey: string) => void`.",
										"text": "Using this method you are able to access the stream result. Your callback\nfunction will be called whenever a new `Collection` is available.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream<Time>()\n    .groupByWindow({...})\n    .output(collection => {\n        // Do something with the collection\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1281,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionCallback",
												"id": 1321,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 562,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1272
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1273
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1276,
								1282,
								1279
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 536,
							"character": 34
						}
					]
				},
				{
					"id": 1039,
					"name": "MapNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1040,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1041,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1042,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1047,
									"name": "new MapNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1048,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1049,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1050,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1051,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 164,
															"character": 31
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MapNode",
										"id": 1039
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 163,
									"character": 78
								}
							]
						},
						{
							"id": 1043,
							"name": "mapper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 164,
									"character": 30
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1044,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1045,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1046,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "stream.ts",
											"line": 164,
											"character": 31
										}
									]
								}
							}
						},
						{
							"id": 1055,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1056,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1057,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1058,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1062,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1063,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1064,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1052,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1053,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1054,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 168,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1059,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1060,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1061,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1042
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1043,
								1055
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1056,
								1062,
								1052,
								1059
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 163,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "M",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 968,
					"name": "Node",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 969,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Base",
								"id": 1674
							}
						},
						{
							"id": 970,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Base",
								"id": 1674
							}
						}
					],
					"children": [
						{
							"id": 971,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()"
						},
						{
							"id": 972,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 973,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 974,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Base",
															"id": 1674
														}
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							]
						},
						{
							"id": 978,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 979,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 980,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1674
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							]
						},
						{
							"id": 981,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 982,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 983,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1674
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1674
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 100,
									"character": 30
								}
							]
						},
						{
							"id": 975,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 976,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 977,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1674
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								971
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								972,
								978,
								981,
								975
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 77,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "EventInputNode",
							"id": 984
						},
						{
							"type": "reference",
							"name": "EventOutputNode",
							"id": 1001
						},
						{
							"type": "reference",
							"name": "KeyedCollectionOutputNode",
							"id": 1020
						},
						{
							"type": "reference",
							"name": "MapNode",
							"id": 1039
						},
						{
							"type": "reference",
							"name": "FlatMapNode",
							"id": 1065
						},
						{
							"type": "reference",
							"name": "FillNode",
							"id": 1091
						},
						{
							"type": "reference",
							"name": "AlignNode",
							"id": 1110
						},
						{
							"type": "reference",
							"name": "SelectNode",
							"id": 1129
						},
						{
							"type": "reference",
							"name": "CollapseNode",
							"id": 1148
						},
						{
							"type": "reference",
							"name": "RateNode",
							"id": 1167
						},
						{
							"type": "reference",
							"name": "WindowOutputNode",
							"id": 1186
						},
						{
							"type": "reference",
							"name": "AggregationNode",
							"id": 1205
						}
					]
				},
				{
					"id": 1167,
					"name": "RateNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1168,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1170,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1171,
									"name": "new RateNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1172,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RateNode",
										"id": 1167
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 262,
									"character": 31
								}
							]
						},
						{
							"id": 1176,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1169,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 262,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Rate",
								"id": 915,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1177,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1178,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1179,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "reference",
																"name": "TimeRange",
																"id": 775
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1183,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1184,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1185,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 775
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1173,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1174,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1175,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 268,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1180,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1181,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1182,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1170
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1176,
								1169
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1177,
								1183,
								1173,
								1180
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 261,
							"character": 14
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "reference",
											"name": "TimeRange",
											"id": 775
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1129,
					"name": "SelectNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1130,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1132,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1133,
									"name": "new SelectNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1134,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectNode",
										"id": 1129
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 228,
									"character": 33
								}
							]
						},
						{
							"id": 1138,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1131,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 228,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Select",
								"id": 58,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1139,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1140,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1141,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1145,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1146,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1147,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1135,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1136,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1137,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 234,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1142,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1143,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1144,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1132
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1138,
								1131
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1139,
								1145,
								1135,
								1142
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 227,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1285,
					"name": "Stream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```\nconst s = Stream()\n .align({})\n .rate({});\n\ns.addEvent(e);\n\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 1286,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 1287,
							"name": "Time",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 1288,
							"name": "head",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 645,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 968,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Base",
										"id": 1674
									},
									{
										"type": "reference",
										"name": "Base",
										"id": 1674
									}
								]
							}
						},
						{
							"id": 1289,
							"name": "tail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 646,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 968,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Base",
										"id": 1674
									},
									{
										"type": "reference",
										"name": "Base",
										"id": 1674
									}
								]
							}
						},
						{
							"id": 1305,
							"name": "addCollectionToEventNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1306,
									"name": "addCollectionToEventNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1307,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 1308,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1309,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionToEvent",
												"id": 1328,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 1224,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 663,
									"character": 28
								}
							]
						},
						{
							"id": 1300,
							"name": "addCollectorMappingNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1301,
									"name": "addCollectorMappingNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1302,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 1303,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1304,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionMap",
												"id": 1329,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 1269,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 658,
									"character": 27
								}
							]
						},
						{
							"id": 1310,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1311,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1312,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1313,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 668,
									"character": 12
								}
							]
						},
						{
							"id": 1290,
							"name": "addEventMappingNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1291,
									"name": "addEventMappingNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1292,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 1293,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1294,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventMap",
												"id": 1330,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 1224,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 648,
									"character": 23
								}
							]
						},
						{
							"id": 1295,
							"name": "addEventToCollectorNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1296,
									"name": "addEventToCollectorNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1297,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 1298,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1299,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventToKeyedCollection",
												"id": 1327,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 1269,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 653,
									"character": 27
								}
							]
						},
						{
							"id": 1314,
							"name": "addNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1315,
									"name": "addNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1316,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 674,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1288,
								1289
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1305,
								1300,
								1310,
								1290,
								1295,
								1314
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 644,
							"character": 19
						}
					]
				},
				{
					"id": 1186,
					"name": "WindowOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 1187,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1189,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1190,
									"name": "new WindowOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1191,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 677
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowOutputNode",
										"id": 1186
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 279,
									"character": 45
								}
							]
						},
						{
							"id": 1195,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 79,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 968,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1674
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 971
							}
						},
						{
							"id": 1188,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 279,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowedCollection",
								"id": 1335,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1196,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1197,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1198,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 968,
												"typeArguments": [
													{
														"type": "reference",
														"name": "KeyedCollection",
														"id": 1326,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1674
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 972
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 972
							}
						},
						{
							"id": 1202,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1203,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1204,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 978
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 92,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 978
							}
						},
						{
							"id": 1192,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1193,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1194,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 981
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 285,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 981
							}
						},
						{
							"id": 1199,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1200,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1201,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 975
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 85,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 975
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1189
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1195,
								1188
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1196,
								1202,
								1192,
								1199
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 278,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 968,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1676,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 1326,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1317,
					"name": "EventCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Node is a transformation between type S and type T. Both S\nand T much extend Base.",
						"text": "The transformation happens when a `Node` has its `set()` method called\nby another `Node`. The `input` to set() is of type `S`. When this happens\na subclass specific implementation of `process` is called to actually\ntransform the input (of type `S` to an output of type `T`). Of course\n`S` and `T` maybe the same if the input and output types are expected\nto be the same. The result of `process`, of type `T`, is returned and\nthe passed onto other downstream Nodes, by calling their `set()` methods.\n"
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 60,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1318,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1319,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1320,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 60,
									"character": 27
								}
							]
						}
					}
				},
				{
					"id": 1330,
					"name": "EventMap",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 621,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 968,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1327,
					"name": "EventToKeyedCollection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 609,
							"character": 34
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 968,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 1326,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1326,
					"name": "KeyedCollection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 66,
							"character": 27
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "instrinct",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Collection",
								"id": 1387,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1321,
					"name": "KeyedCollectionCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 61,
							"character": 35
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1322,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1323,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1324,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 1325,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 61,
									"character": 52
								}
							]
						}
					}
				},
				{
					"id": 1329,
					"name": "KeyedCollectionMap",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 617,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 968,
						"typeArguments": [
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 1326,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 1326,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1328,
					"name": "KeyedCollectionToEvent",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 613,
							"character": 34
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 968,
						"typeArguments": [
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 1326,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "Event",
								"id": 1676,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1331,
					"name": "streamFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1332,
							"name": "streamFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1333,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventStream",
								"id": 1224,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									},
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 685,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1205,
						1110,
						1148,
						984,
						1001,
						1224,
						1091,
						1065,
						1020,
						1269,
						1039,
						968,
						1167,
						1129,
						1285,
						1186
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1317,
						1330,
						1327,
						1326,
						1321,
						1329,
						1328
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1331
					]
				}
			],
			"sources": [
				{
					"fileName": "stream.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 740,
			"name": "\"time\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/time.ts",
			"children": [
				{
					"id": 741,
					"name": "Time",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs a new `Time` object that can be used as\na key for `Event`'s. A `Time` object represents a\ntimestamp, and is stored as a Javascript `Date`\nobject. The difference with just a Date is that\nis conforms to the interface required to be an\n`Event` key."
					},
					"children": [
						{
							"id": 746,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 747,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 748,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "number"
													},
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Date"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 31,
									"character": 21
								}
							]
						},
						{
							"id": 745,
							"name": "_d",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "time.ts",
									"line": 31,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 763,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 764,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The begin time of this `Event`, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 84,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 765,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 766,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The end time of this `Event`, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 91,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 759,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 760,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 73,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 751,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 752,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 48,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 757,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 758,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in Local time, as a string."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 66,
									"character": 17
								}
							]
						},
						{
							"id": 753,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 754,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 52,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 767,
							"name": "toTimeRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 768,
									"name": "toTimeRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 769,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 16
											}
										},
										{
											"id": 770,
											"name": "align",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeAlignment",
												"id": 657
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 95,
									"character": 15
								}
							]
						},
						{
							"id": 755,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 756,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in UTC time, as a string."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 59,
									"character": 15
								}
							]
						},
						{
							"id": 749,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 750,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 44,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 761,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 762,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 77,
									"character": 11
								}
							]
						},
						{
							"id": 742,
							"name": "isTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 743,
									"name": "isTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 744,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 741
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 27,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								746
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								745
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								763,
								765,
								759,
								751,
								757,
								753,
								767,
								755,
								749,
								761,
								742
							]
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 26,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 771,
					"name": "timeFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 772,
							"name": "timeFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 773,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Time",
								"id": 741
							}
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 110,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						741
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						771
					]
				}
			],
			"sources": [
				{
					"fileName": "time.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 774,
			"name": "\"timerange\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/timerange.ts",
			"children": [
				{
					"id": 775,
					"name": "TimeRange",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `TimeRange` is a simple representation of a begin and end time, used\nto maintain consistency across an application.",
						"text": "You can define a `TimeRange` with `moments`, Javascript `Date objects\nor `ms` since UNIX epoch. Here we construct one with two moments:\n\n```js\nvar fmt = \"YYYY-MM-DD HH:mm\";\nvar beginTime = moment(\"2012-01-11 11:11\", fmt);\nvar endTime =   moment(\"2012-02-22 12:12\", fmt);\nvar range = new TimeRange(beginTime, endTime);\n```\n\nor with ms times:\n\n```js\nvar range = new TimeRange([1326309060000, 1329941520000]);\n```\n"
					},
					"children": [
						{
							"id": 777,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
							},
							"signatures": [
								{
									"id": 778,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 779,
											"name": "arg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 775
													},
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Date"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								},
								{
									"id": 780,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 781,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 782,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								},
								{
									"id": 783,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 784,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 741
											}
										},
										{
											"id": 785,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 741
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								},
								{
									"id": 786,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 787,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										},
										{
											"id": 788,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								},
								{
									"id": 789,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 790,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 791,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 44,
									"character": 41
								},
								{
									"fileName": "timerange.ts",
									"line": 54,
									"character": 55
								},
								{
									"fileName": "timerange.ts",
									"line": 55,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 56,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 57,
									"character": 44
								},
								{
									"fileName": "timerange.ts",
									"line": 58,
									"character": 44
								}
							]
						},
						{
							"id": 776,
							"name": "_range",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Internally, the timerange is stored as an Immutable.List"
							},
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 44,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Date"
									}
								]
							}
						},
						{
							"id": 808,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 809,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the begin time of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 151,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 825,
							"name": "contains",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 826,
									"name": "contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if a `Date` or a `TimeRange` is contained entirely\nwithin this `TimeRange`"
									},
									"parameters": [
										{
											"id": 827,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Date"
													},
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 775
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 208,
									"character": 12
								}
							]
						},
						{
							"id": 834,
							"name": "disjoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 835,
									"name": "disjoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other `TimeRange` in no way\noverlaps this `TimeRange`."
									},
									"parameters": [
										{
											"id": 836,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 243,
									"character": 12
								}
							]
						},
						{
							"id": 843,
							"name": "duration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 844,
									"name": "duration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the duration of the `TimeRange` in milliseconds"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 273,
									"character": 12
								}
							]
						},
						{
							"id": 810,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 811,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end time of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 158,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 822,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 823,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two `TimeRange`'s can be considered equal,\nin that they have the same times."
									},
									"parameters": [
										{
											"id": 824,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 197,
									"character": 10
								}
							]
						},
						{
							"id": 837,
							"name": "extents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 838,
									"name": "extents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Timerange` which covers the extents of this and\nother combined."
									},
									"parameters": [
										{
											"id": 839,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 251,
									"character": 11
								}
							]
						},
						{
							"id": 804,
							"name": "humanize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 805,
									"name": "humanize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the `TimeRange`, e.g.\n\"Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am\""
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 129,
									"character": 12
								}
							]
						},
						{
							"id": 845,
							"name": "humanizeDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 846,
									"name": "humanizeDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A user friendly version of the duration."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 280,
									"character": 20
								}
							]
						},
						{
							"id": 794,
							"name": "internal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 795,
									"name": "internal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the internal range, which is an `Immutable.List` of two elements\ncontaining begin and end times as `Date`'s."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 90,
									"character": 12
								}
							]
						},
						{
							"id": 840,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 841,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `TimeRange` which represents the intersection\n(overlapping) part of this and other."
									},
									"parameters": [
										{
											"id": 842,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											},
											{
												"type": "instrinct",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 261,
									"character": 16
								}
							]
						},
						{
							"id": 812,
							"name": "mid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 813,
									"name": "mid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 165,
									"character": 7
								}
							]
						},
						{
							"id": 831,
							"name": "overlaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 832,
									"name": "overlaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other `TimeRange` overlaps\nthis `TimeRange`."
									},
									"parameters": [
										{
											"id": 833,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 228,
									"character": 12
								}
							]
						},
						{
							"id": 806,
							"name": "relativeString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 807,
									"name": "relativeString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the `TimeRange`",
										"tags": [
											{
												"tag": "example",
												"text": "\nExample: \"a few seconds ago to a month ago\"\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 142,
									"character": 18
								}
							]
						},
						{
							"id": 816,
							"name": "setBegin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 817,
									"name": "setBegin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new begin time on the `TimeRange`. The result will be\na new `TimeRange`."
									},
									"parameters": [
										{
											"id": 818,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 181,
									"character": 12
								}
							]
						},
						{
							"id": 819,
							"name": "setEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 820,
									"name": "setEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new end time on the `TimeRange`. The result will be\na new `TimeRange`."
									},
									"parameters": [
										{
											"id": 821,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 189,
									"character": 10
								}
							]
						},
						{
							"id": 814,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 815,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the `TimeRange` as the representitive\ntimestamp for the timerange."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 173,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 796,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 797,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as JSON, which will be a Javascript array\nof two `ms` timestamps."
									},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 98,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 800,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 801,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string expressed in local time"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 114,
									"character": 17
								}
							]
						},
						{
							"id": 798,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 799,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string, useful for serialization.",
										"returns": "String representation of the TimeRange\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 107,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 802,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 803,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string expressed in UTC time"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 121,
									"character": 15
								}
							]
						},
						{
							"id": 792,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 793,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 82,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 828,
							"name": "within",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 829,
									"name": "within",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `TimeRange` is completely within the supplied\nother `TimeRange`."
									},
									"parameters": [
										{
											"id": 830,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 220,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								777
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								776
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								808,
								825,
								834,
								843,
								810,
								822,
								837,
								804,
								845,
								794,
								840,
								812,
								831,
								806,
								816,
								819,
								814,
								796,
								800,
								798,
								802,
								792,
								828
							]
						}
					],
					"sources": [
						{
							"fileName": "timerange.ts",
							"line": 40,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 847,
					"name": "timerange",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 848,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A `Timerange` is a simple representation of a begin and end time, used\nto maintain consistency across an application."
							},
							"parameters": [
								{
									"id": 849,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											},
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Date"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 850,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 851,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 852,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 853,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 854,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								},
								{
									"id": 855,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 741
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 856,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 857,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Moment"
									}
								},
								{
									"id": 858,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Moment"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 859,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 860,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								},
								{
									"id": 861,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "timerange.ts",
							"line": 289,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 290,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 291,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 292,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 293,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 294,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						775
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						847
					]
				}
			],
			"sources": [
				{
					"fileName": "timerange.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 440,
			"name": "\"timeseries\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/timeseries.ts",
			"children": [
				{
					"id": 453,
					"name": "TimeSeries",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `TimeSeries` represents a series of `Event`'s, with each event being a combination of:\n* time (or `TimeRange`, or `Index`)\n* data - corresponding set of key/values.",
						"text": "### Construction\n\nCurrently you can initialize a `TimeSeries` with either a list of `Event`'s, or with\na data format that looks like this:\n\n```javascript\nconst data = {\n    name: \"trafficc\",\n    columns: [\"time\", \"value\"],\n    points: [\n        [1400425947000, 52],\n        [1400425948000, 18],\n        [1400425949000, 26],\n        [1400425950000, 93],\n        ...\n    ]\n};\n```\n\nTo create a new `TimeSeries` object from the above format, simply use the constructor:\n\n```javascript\nconst series = new TimeSeries(data);\n```\n\nThe format of the data is as follows:\n\n - **name** - optional, but a good practice\n - **columns** - are necessary and give labels to the data in the points.\n - **points** - are an array of tuples. Each row is at a different time (or timerange),\nand each value corresponds to the column labels.\n\nAs just hinted at, the first column may actually be:\n\n - \"time\"\n - \"timeRange\" represented by a `TimeRange`\n - \"index\" - a time range represented by an `Index`. By using an index it is possible,\nfor example, to refer to a specific month:\n\n```javascript\nconst availabilityData = {\n    name: \"Last 3 months availability\",\n    columns: [\"index\", \"uptime\"],\n    points: [\n        [\"2015-06\", \"100%\"], // <-- 2015-06 specified here represents June 2015\n        [\"2015-05\", \"92%\"],\n        [\"2015-04\", \"87%\"],\n    ]\n};\n```\n\nAlternatively, you can construct a `TimeSeries` with a list of events.\nThese may be `TimeEvents`, `TimeRangeEvents` or `IndexedEvents`. Here's an example of that:\n\n```javascript\nconst events = [];\nevents.push(new TimeEvent(new Date(2015, 7, 1), {value: 27}));\nevents.push(new TimeEvent(new Date(2015, 8, 1), {value: 29}));\nconst series = new TimeSeries({\n    name: \"avg temps\",\n    events: events\n});\n```\n\n### Nested data\n\nThe values do not have to be simple types like the above examples. Here's an\nexample where each value is itself an object with \"in\" and \"out\" keys:\n\n```javascript\nconst series = new TimeSeries({\n    name: \"Map Traffic\",\n    columns: [\"time\", \"NASA_north\", \"NASA_south\"],\n    points: [\n        [1400425951000, {in: 100, out: 200}, {in: 145, out: 135}],\n        [1400425952000, {in: 200, out: 400}, {in: 146, out: 142}],\n        [1400425953000, {in: 300, out: 600}, {in: 147, out: 158}],\n        [1400425954000, {in: 400, out: 800}, {in: 155, out: 175}],\n    ]\n});\n```\n\nComplex data is stored in an Immutable structure. To get a value out of nested\ndata like this you will get the event you want (by row), as usual, and then use\n`get()` to fetch the value by column name. The result of this call will be a\nJSON copy of the Immutable data so you can query deeper in the usual way:\n\n```javascript\nseries.at(0).get(\"NASA_north\")[\"in\"]  // 200`\n```\n\nIt is then possible to use a value mapper function when calculating different\nproperties. For example, to get the average \"in\" value of the NASA_north column:\n\n```javascript\nseries.avg(\"NASA_north\", d => d.in);  // 250\n```\n"
					},
					"typeParameter": [
						{
							"id": 454,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 457,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 458,
									"name": "new TimeSeries",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 459,
											"name": "arg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TimeSeries",
														"id": 453,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TimeSeriesEvents",
														"id": 448,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 302,
									"character": 25
								}
							]
						},
						{
							"id": 455,
							"name": "_collection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 301,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedCollection",
								"id": 68,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 456,
							"name": "_data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 302,
									"character": 17
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							},
							"defaultValue": " null"
						},
						{
							"id": 613,
							"name": "_rollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 614,
									"name": "_rollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 615,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 616,
											"name": "aggregation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 617,
											"name": "toTimeEvents",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1047,
									"character": 11
								}
							]
						},
						{
							"id": 562,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 563,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down using a user defined function to\ndo the reduction."
									},
									"parameters": [
										{
											"id": 564,
											"name": "func",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 722
											}
										},
										{
											"id": 565,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 654,
									"character": 13
								}
							]
						},
						{
							"id": 592,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 593,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Align event values to regular time boundaries. The value at\nthe boundary is interpolated. Only the new interpolated\npoints are returned. If limit is reached nulls will be\nreturned at each boundary position.",
										"text": "One use case for this is to modify irregular data (i.e. data\nthat falls at slightly irregular times) so that it falls into a\nsequence of evenly spaced values. We use this to take data we\nget from the network which is approximately every 30 second\n(:32, 1:02, 1:34, ...) and output data on exact 30 second\nboundaries (:30, 1:00, 1:30, ...).\n\nAnother use case is data that might be already aligned to\nsome regular interval, but that contains missing points.\nWhile `fill()` can be used to replace `null` values, `align()`\ncan be used to add in missing points completely. Those points\ncan have an interpolated value, or by setting limit to 0,\ncan be filled with nulls. This is really useful when downstream\nprocessing depends on complete sequences.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst aligned = ts.align({\n    fieldSpec: \"value\",\n    period: \"1m\",\n    method: \"linear\"\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 594,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 820,
									"character": 9
								}
							]
						},
						{
							"id": 472,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 473,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Access a specific `TimeSeries` event via its position"
									},
									"parameters": [
										{
											"id": 474,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 391,
									"character": 6
								}
							]
						},
						{
							"id": 478,
							"name": "atFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 479,
									"name": "atFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first `Event` in the series."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 409,
									"character": 11
								}
							]
						},
						{
							"id": 480,
							"name": "atLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 481,
									"name": "atLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last `Event` in the series."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 416,
									"character": 10
								}
							]
						},
						{
							"id": 475,
							"name": "atTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 476,
									"name": "atTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an event in the series by its time. This is the same\nas calling `bisect()` first and then using `at()` with the index."
									},
									"parameters": [
										{
											"id": 477,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 399,
									"character": 10
								}
							]
						},
						{
							"id": 540,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 541,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events in the `TimeSeries` down to their average"
									},
									"parameters": [
										{
											"id": 542,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 543,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 613,
									"character": 7
								}
							]
						},
						{
							"id": 468,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 469,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the earliest time represented in the `TimeSeries`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 377,
									"character": 9
								}
							]
						},
						{
							"id": 486,
							"name": "bisect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 487,
									"name": "bisect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Index` that bisects the `TimeSeries` at the time specified."
									},
									"parameters": [
										{
											"id": 488,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 489,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 436,
									"character": 10
								}
							]
						},
						{
							"id": 582,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 583,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a `fieldSpecList` (list of column names) and collapses\nthem to a new column named `name` which is the reduction (using\nthe `reducer` function) of the matched columns in the `fieldSpecList`.",
										"text": "The column may be appended to the existing columns, or replace them,\nbased on the `append` boolean.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst sums = ts.collapse({\n    name: \"sum_series\",\n    fieldSpecList: [\"in\", \"out\"],\n    reducer: sum(),\n    append: false\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 584,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 685
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 714,
									"character": 12
								}
							]
						},
						{
							"id": 618,
							"name": "collectByFixedWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 619,
									"name": "collectByFixedWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds multiple `Collection`s, each collects together\nevents within a window of size `windowSize`. Note that these\nare windows defined relative to Jan 1st, 1970, and are UTC.",
										"returns": "The result is a mapping from window index to a Collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst timeseries = new TimeSeries(data);\nconst collections = timeseries.collectByFixedWindow({windowSize: \"1d\"});\nconsole.log(collections); // {1d-16314: Collection, 1d-16315: Collection, ...}\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 620,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1079,
									"character": 24
								}
							]
						},
						{
							"id": 512,
							"name": "collection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 513,
									"name": "collection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the internal `Collection` of events for this `TimeSeries`"
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 68,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 529,
									"character": 14
								}
							]
						},
						{
							"id": 510,
							"name": "columns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 511,
									"name": "columns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the list of column names. This is determined by\ntraversing though the events and collecting the set.",
										"text": "Note: the order is not defined\n"
									},
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 515,
									"character": 11
								}
							]
						},
						{
							"id": 526,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 527,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of events in this `TimeSeries`. Alias\nfor size()."
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 584,
									"character": 9
								}
							]
						},
						{
							"id": 494,
							"name": "crop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 495,
									"name": "crop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Crop the `TimeSeries` to the specified `TimeRange` and\nreturn a new `TimeSeries`."
									},
									"parameters": [
										{
											"id": 496,
											"name": "timerange",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 454,
									"character": 8
								}
							]
						},
						{
							"id": 604,
							"name": "dailyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 605,
									"name": "dailyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into days.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n",
										"returns": "The resulting rolled up TimeSeries\n"
									},
									"parameters": [
										{
											"id": 606,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 966,
									"character": 15
								}
							]
						},
						{
							"id": 470,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 471,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the latest time represented in the `TimeSeries`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 384,
									"character": 7
								}
							]
						},
						{
							"id": 589,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 590,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take the data in this `TimeSeries` and \"fill\" any missing or invalid\nvalues. This could be setting `null` values to zero so mathematical\noperations will succeed, interpolate a new value, or pad with the\npreviously given value.",
										"text": "The `fill()` method takes a single `options` arg.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst filled = timeseries.fill({\n    fieldSpec: [\"direction.in\", \"direction.out\"],\n    method: \"zero\",\n    limit: 3\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 591,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 693
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 767,
									"character": 8
								}
							]
						},
						{
							"id": 598,
							"name": "fixedWindowRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 599,
									"name": "fixedWindowRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events within the `TimeSeries`\nacross multiple fixed windows of size `windowSize`.",
										"text": "Note that these are windows defined relative to Jan 1st, 1970,\nand are UTC, so this is best suited to smaller window sizes\n(hourly, 5m, 30s, 1s etc), or in situations where you don't care\nabout the specific window, just that the data is smaller.\n\nEach window then has an aggregation specification applied as\n`aggregation`. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{ in_avg: { in: avg() }, out_avg: { out: avg() } }\n```\nwill aggregate both \"in\" and \"out\" using the average aggregation\nfunction and return the result as in_avg and out_avg.\n\nNote that each aggregation function, such as `avg()` also can take a\nfilter function to apply before the aggregation. A set of filter functions\nexists to do common data cleanup such as removing bad values. For example:\n```\n{ value_avg: { value: avg(filter.ignoreMissing) } }\n```\n",
										"returns": "The resulting rolled up `TimeSeries`\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\n    const timeseries = new TimeSeries(data);\n    const dailyAvg = timeseries.fixedWindowRollup({\n        windowSize: \"1d\",\n        aggregation: {value: {value: avg()}}\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 600,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 888,
									"character": 21
								}
							]
						},
						{
							"id": 601,
							"name": "hourlyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 602,
									"name": "hourlyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into hours.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n",
										"returns": "The resulting rolled up TimeSeries\n"
									},
									"parameters": [
										{
											"id": 603,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 935,
									"character": 16
								}
							]
						},
						{
							"id": 502,
							"name": "index",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 503,
									"name": "index",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeSeries `Index`, if it has one."
									},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 480,
									"character": 9
								}
							]
						},
						{
							"id": 506,
							"name": "indexAsRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 507,
									"name": "indexAsRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeseries `Index`, as a `TimeRange`, if it has one."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 494,
									"character": 16
								}
							]
						},
						{
							"id": 504,
							"name": "indexAsString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 505,
									"name": "indexAsString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeSeries `Index`, as a `string`, if it has one."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 487,
									"character": 17
								}
							]
						},
						{
							"id": 508,
							"name": "isUTC",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 509,
									"name": "isUTC",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the UTC flag, i.e. are the events in this `TimeSeries` in\nUTC or local time (if they are `IndexedEvent`'s an event might be\n\"2014-08-31\". The actual time range of that representation\ndepends on where you are. Pond supports thinking about that in\neither as a UTC day, or a local day)."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 505,
									"character": 9
								}
							]
						},
						{
							"id": 571,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 572,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes an operator that is used to remap events from this `TimeSeries` to\na new set of `Event`'s."
									},
									"typeParameter": [
										{
											"id": 573,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 574,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 575,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 576,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 577,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1676,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 578,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1676,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "timeseries.ts",
															"line": 675,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 675,
									"character": 7
								}
							]
						},
						{
							"id": 532,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 533,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their maximum value"
									},
									"parameters": [
										{
											"id": 534,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 535,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 599,
									"character": 7
								}
							]
						},
						{
							"id": 544,
							"name": "mean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 545,
									"name": "mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events in the `TimeSeries` down to their mean (same as avg)"
									},
									"parameters": [
										{
											"id": 546,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 547,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 620,
									"character": 8
								}
							]
						},
						{
							"id": 548,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 549,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their medium value"
									},
									"parameters": [
										{
											"id": 550,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 551,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 627,
									"character": 10
								}
							]
						},
						{
							"id": 514,
							"name": "meta",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 515,
									"name": "meta",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the meta data about this `TimeSeries` as a JSON object.\nAny extra data supplied to the `TimeSeries` constructor will be\nplaced in the meta data object. This returns either all of that\ndata as a JSON object, or a specific key if `key` is supplied."
									},
									"parameters": [
										{
											"id": 516,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 539,
									"character": 8
								}
							]
						},
						{
							"id": 536,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 537,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their minimum value"
									},
									"parameters": [
										{
											"id": 538,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 539,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 606,
									"character": 7
								}
							]
						},
						{
							"id": 607,
							"name": "monthlyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 608,
									"name": "monthlyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into months.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n",
										"returns": "The resulting rolled up `TimeSeries`\n"
									},
									"parameters": [
										{
											"id": 609,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 997,
									"character": 17
								}
							]
						},
						{
							"id": 497,
							"name": "name",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 498,
									"name": "name",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the `TimeSeries` name"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 466,
									"character": 8
								}
							]
						},
						{
							"id": 556,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 557,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `TimeSeries`. This works the same way as numpy."
									},
									"parameters": [
										{
											"id": 558,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 559,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 560,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											},
											"defaultValue": " InterpolationType.linear"
										},
										{
											"id": 561,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 641,
									"character": 14
								}
							]
						},
						{
							"id": 566,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 567,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `TimeSeries`. This works the same way as numpy's percentile().\nFor example `timeseries.quantile(4)` would be the same as using percentile\nwith q = 0.25, 0.5 and 0.75."
									},
									"parameters": [
										{
											"id": 568,
											"name": "quantity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 569,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 570,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 375
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 663,
									"character": 12
								}
							]
						},
						{
							"id": 466,
							"name": "range",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 467,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Alias for `timerange()`"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 370,
									"character": 9
								}
							]
						},
						{
							"id": 595,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 596,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the derivative of the `TimeSeries` for the given columns. The result will\nbe per second. Optionally you can substitute in `null` values if the rate\nis negative. This is useful when a negative rate would be considered invalid."
									},
									"parameters": [
										{
											"id": 597,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 838,
									"character": 8
								}
							]
						},
						{
							"id": 585,
							"name": "renameColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 586,
									"name": "renameColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rename columns in the underlying events.",
										"text": "Takes a object of columns to rename. Returns a new `TimeSeries` containing\nnew events. Columns not in the dict will be retained and not renamed.\n",
										"returns": "The resulting TimeSeries with renamed columns\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nnew_ts = ts.renameColumns({\n    renameMap: {in: \"new_in\", out: \"new_out\"}\n});\n```\n\nAs the name implies, this will only rename the main\n\"top level\" (ie: non-deep) columns. If you need more\nextravagant renaming, roll your own using `TimeSeries.map()`.\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 587,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 588,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RenameColumnOptions",
												"id": 703
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 741,
									"character": 17
								}
							]
						},
						{
							"id": 579,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 580,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a `fieldSpec` (list of column names) and outputs to the callback just those\ncolumns in a new `TimeSeries`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst ts = timeseries.select({fieldSpec: [\"uptime\", \"notes\"]});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 581,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 701
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 690,
									"character": 10
								}
							]
						},
						{
							"id": 482,
							"name": "setCollection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 483,
									"name": "setCollection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new underlying collection for this `TimeSeries`."
									},
									"typeParameter": [
										{
											"id": 484,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 485,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 68,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 423,
									"character": 17
								}
							]
						},
						{
							"id": 517,
							"name": "setMeta",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 518,
									"name": "setMeta",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set new meta data for the `TimeSeries`. The result will\nbe a new `TimeSeries`."
									},
									"parameters": [
										{
											"id": 519,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 520,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 551,
									"character": 11
								}
							]
						},
						{
							"id": 499,
							"name": "setName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 500,
									"name": "setName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rename the `TimeSeries`"
									},
									"parameters": [
										{
											"id": 501,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 473,
									"character": 11
								}
							]
						},
						{
							"id": 521,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 522,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of events in this `TimeSeries`"
									},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 565,
									"character": 8
								}
							]
						},
						{
							"id": 523,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 524,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `TimeSeries`.",
										"text": "Uses the `fieldSpec` to look up values in all events.\nIt then counts the number that are considered valid, which\nspecifically are not NaN, undefined or null.\n"
									},
									"parameters": [
										{
											"id": 525,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 576,
									"character": 13
								}
							]
						},
						{
							"id": 490,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 491,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `TimeSeries`, returns a new\n`TimeSeries` representing a portion of this `TimeSeries` from\nbegin up to but not including end."
									},
									"parameters": [
										{
											"id": 492,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 493,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 445,
									"character": 9
								}
							]
						},
						{
							"id": 552,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 553,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their stdev"
									},
									"parameters": [
										{
											"id": 554,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 555,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 634,
									"character": 9
								}
							]
						},
						{
							"id": 528,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 529,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 530,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 531,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 592,
									"character": 7
								}
							]
						},
						{
							"id": 464,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 465,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the extents of the `TimeSeries` as a `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 775
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 363,
									"character": 13
								}
							]
						},
						{
							"id": 460,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 461,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Turn the `TimeSeries` into regular javascript objects"
									},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 337,
									"character": 10
								}
							]
						},
						{
							"id": 462,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 463,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Represent the `TimeSeries` as a string"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 356,
									"character": 12
								}
							]
						},
						{
							"id": 610,
							"name": "yearlyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 611,
									"name": "yearlyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into years.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n",
										"returns": "The resulting rolled up `TimeSeries`\n"
									},
									"parameters": [
										{
											"id": 612,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing options:"
											},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 697
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1029,
									"character": 16
								}
							]
						},
						{
							"id": 621,
							"name": "equal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 622,
									"name": "equal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two `TimeSeries` to each other. If the `TimeSeries`\nare of the same instance as each other then equals will return true."
									},
									"parameters": [
										{
											"id": 623,
											"name": "series1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 453,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 624,
											"name": "series2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 453,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1094,
									"character": 16
								}
							]
						},
						{
							"id": 625,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 626,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two `TimeSeries` to each other. If the `TimeSeries`\nare of the same value as each other then equals will return true."
									},
									"parameters": [
										{
											"id": 627,
											"name": "series1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 453,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 628,
											"name": "series2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 453,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1102,
									"character": 13
								}
							]
						},
						{
							"id": 635,
							"name": "timeSeriesListEventReduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 636,
									"name": "timeSeriesListEventReduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 637,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesOptions",
												"id": 708
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1181,
									"character": 36
								}
							]
						},
						{
							"id": 632,
							"name": "timeSeriesListMerge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 633,
									"name": "timeSeriesListMerge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a list of `TimeSeries` and merges them together to form a new\n`TimeSeries`.",
										"text": "Merging will produce a new `Event`;\nonly when events are conflict free, so\nit is useful in the following cases:\n * to combine multiple `TimeSeries` which have different time ranges, essentially\n concatenating them together\n * combine `TimeSeries` which have different columns, for example inTraffic has\n a column \"in\" and outTraffic has a column \"out\" and you want to produce a merged\n trafficSeries with columns \"in\" and \"out\".\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst inTraffic = new TimeSeries(trafficDataIn);\nconst outTraffic = new TimeSeries(trafficDataOut);\nconst trafficSeries = TimeSeries.timeSeriesListMerge({\n    name: \"traffic\",\n    seriesList: [inTraffic, outTraffic]\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 634,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesOptions",
												"id": 708
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1167,
									"character": 30
								}
							]
						},
						{
							"id": 629,
							"name": "timeSeriesListReduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 630,
									"name": "timeSeriesListReduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reduces a list of `TimeSeries` objects using a reducer function. This works\nby taking each event in each `TimeSeries` and collecting them together\nbased on timestamp. All events for a given time are then merged together\nusing the reducer function to produce a new event. The reducer function is\napplied to all columns in the `fieldSpec`. Those new events are then\ncollected together to form a new `TimeSeries`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nFor example you might have three TimeSeries with columns \"in\" and \"out\" which\ncorresponds to two measurements per timestamp. You could use this function to\nobtain a new TimeSeries which was the sum of the the three measurements using\nthe `sum()` reducer function and an [\"in\", \"out\"] fieldSpec.\n\n```\nconst totalSeries = TimeSeries.timeSeriesListReduce({\n    name: \"totals\",\n    seriesList: [inTraffic, outTraffic],\n    reducer: sum(),\n    fieldSpec: [ \"in\", \"out\" ]\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 631,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesOptions",
												"id": 708
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1133,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								457
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								455,
								456
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								613,
								562,
								592,
								472,
								478,
								480,
								475,
								540,
								468,
								486,
								582,
								618,
								512,
								510,
								526,
								494,
								604,
								470,
								589,
								598,
								601,
								502,
								506,
								504,
								508,
								571,
								532,
								544,
								548,
								514,
								536,
								607,
								497,
								556,
								566,
								466,
								595,
								585,
								579,
								482,
								517,
								499,
								521,
								523,
								490,
								552,
								528,
								464,
								460,
								462,
								610,
								621,
								625,
								635,
								632,
								629
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 300,
							"character": 23
						}
					]
				},
				{
					"id": 448,
					"name": "TimeSeriesEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "You can construct a `TimeSeries` with a list of Events, by passing in an\nobject containing a single property \"events\".",
						"text": "```\n{ \"events\": [event-1, event-2, ..., event-n]}\n```\n"
					},
					"typeParameter": [
						{
							"id": 449,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 451,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "You can construct a `TimeSeries` with a list of Events, by passing in an\nobject containing a single property \"events\".",
								"text": "```\n{ \"events\": [event-1, event-2, ..., event-n]}\n```\n"
							},
							"parameters": [
								{
									"id": 452,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 450,
							"name": "events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 110,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								450
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 109,
							"character": 33
						}
					]
				},
				{
					"id": 441,
					"name": "TimeSeriesWireFormat",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 446,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 447,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 444,
							"name": "columns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 96,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 442,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 94,
									"character": 8
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 445,
							"name": "points",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 97,
									"character": 10
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "any"
							}
						},
						{
							"id": 443,
							"name": "utc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 95,
									"character": 7
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								444,
								442,
								445,
								443
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 93,
							"character": 37
						}
					]
				},
				{
					"id": 638,
					"name": "buildMetaData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 639,
							"name": "buildMetaData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 640,
									"name": "meta",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "Object"
									},
									{
										"type": "instrinct",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 54,
							"character": 22
						}
					]
				},
				{
					"id": 644,
					"name": "indexedSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 645,
							"name": "indexedSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create an `Index` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"index\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 646,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 441
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 453,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 154,
							"character": 22
						}
					]
				},
				{
					"id": 647,
					"name": "timeRangeSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 648,
							"name": "timeRangeSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a `Timerange` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"timerange\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 649,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 441
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 453,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 180,
							"character": 24
						}
					]
				},
				{
					"id": 641,
					"name": "timeSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 642,
							"name": "timeSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a `Time` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"time\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 643,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 441
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 453,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 128,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						453
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						448,
						441
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						638,
						644,
						647,
						641
					]
				}
			],
			"sources": [
				{
					"fileName": "timeseries.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 650,
			"name": "\"types\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/types.ts",
			"children": [
				{
					"id": 664,
					"name": "AlignmentMethod",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method of interpolation used by the `align()` function:\n * `Hold` - Emits the last known good value at alignment boundaries\n * `Linear` - Emits linearly interpolated values at alignment boundaries"
					},
					"children": [
						{
							"id": 665,
							"name": "Hold",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 71,
									"character": 8
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 666,
							"name": "Linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 72,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								665,
								666
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 70,
							"character": 27
						}
					]
				},
				{
					"id": 667,
					"name": "FillMethod",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method of filling used by the `fill()` function:\n * `Hold` - Fill with the previous value\n * `Linear` - Fill between the last value and the next value linearly\n * `Zero` - Fill with 0"
					},
					"children": [
						{
							"id": 670,
							"name": "Linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 84,
									"character": 10
								}
							]
						},
						{
							"id": 669,
							"name": "Pad",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 83,
									"character": 7
								}
							]
						},
						{
							"id": 668,
							"name": "Zero",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 82,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								670,
								669,
								668
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 81,
							"character": 22
						}
					]
				},
				{
					"id": 657,
					"name": "TimeAlignment",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "When relating a `TimeRange` to a `Time` this enum lets you specify where\nin the `TimeRange` you mean:\n * `Begin`\n * `Middle`\n * `End`"
					},
					"children": [
						{
							"id": 658,
							"name": "Begin",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 50,
									"character": 9
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 660,
							"name": "End",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 7
								}
							]
						},
						{
							"id": 659,
							"name": "Middle",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 51,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								658,
								660,
								659
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 49,
							"character": 25
						}
					]
				},
				{
					"id": 661,
					"name": "Trigger",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Rate of emit from within a stream:\n * `perEvent` - an updated `Collection` is emitted on each new `Event`\n * `onDiscardedWindow` - an updated `Collection` is emitted whenever a window is no longer used"
					},
					"children": [
						{
							"id": 663,
							"name": "onDiscardedWindow",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 21
								}
							]
						},
						{
							"id": 662,
							"name": "perEvent",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 61,
									"character": 12
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								663,
								662
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 60,
							"character": 19
						}
					]
				},
				{
					"id": 671,
					"name": "WindowType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An enum which controls the `WindowType` for aggregation. This can\nessentially be a Fixed window, which is a window for each `Period`\n(e.g. every hour), or calendar style periods such as Day, Month\nand Year.\n * Fixed\n * Day\n * Month\n * Year"
					},
					"children": [
						{
							"id": 674,
							"name": "Day",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 100,
									"character": 7
								}
							]
						},
						{
							"id": 673,
							"name": "Fixed",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 99,
									"character": 9
								}
							]
						},
						{
							"id": 672,
							"name": "Global",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 98,
									"character": 10
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 675,
							"name": "Month",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 101,
									"character": 9
								}
							]
						},
						{
							"id": 676,
							"name": "Year",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 102,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								674,
								673,
								672,
								675,
								676
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 97,
							"character": 22
						}
					]
				},
				{
					"id": 714,
					"name": "AggregationSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```\nconst spec: AggregationSpec = {\n   in_avg: [\"in\", avg(), \"bob\"],\n   out_avg: [\"out\", avg()],\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 715,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 716,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 717,
									"name": "dest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Aggregation",
								"id": 739,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 280,
							"character": 32
						}
					]
				},
				{
					"id": 680,
					"name": "AlignmentOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `align()` function:\n * `fieldSpec` - the field to align\n * `window` - the `Period` of the window whose boundaries we want to align to\n * `method` - the interpolation method, one of `AlignmentMethod.Hold` or `AlignmentMethod.Linear`\n * `limit` - the number of boundaries to align to without a new Event, before emitting `null` on\n             the boundaries"
					},
					"children": [
						{
							"id": 681,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 128,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								]
							}
						},
						{
							"id": 684,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 131,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						},
						{
							"id": 683,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 130,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "AlignmentMethod",
								"id": 664
							}
						},
						{
							"id": 682,
							"name": "window",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 129,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 16
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								681,
								684,
								683,
								682
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 127,
							"character": 33
						}
					]
				},
				{
					"id": 685,
					"name": "CollapseOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object passed to the `collapse()` function:\n * `fieldSpecList` - the list of fields to collapse\n * `fieldName` - the new field's name\n * `reducer()` - a function to collapse using e.g. `avg()`\n * `append` - to include only the new field, or include it in addition to the previous fields."
					},
					"children": [
						{
							"id": 689,
							"name": "append",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 145,
									"character": 10
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 687,
							"name": "fieldName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 143,
									"character": 13
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 686,
							"name": "fieldSpecList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 142,
									"character": 17
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 688,
							"name": "reducer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 144,
									"character": 11
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								689,
								687,
								686,
								688
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 141,
							"character": 32
						}
					]
				},
				{
					"id": 693,
					"name": "FillOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `align()` function:\n * `fieldSpec` - the field to align\n * `method` - the interpolation method, one of\n   `FillMethod.Hold`, `FillMethod.Pad` or `FillMethod.Linear`\n * `limit` - the number of missing values to fill before giving up"
					},
					"children": [
						{
							"id": 694,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 166,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								]
							}
						},
						{
							"id": 696,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 168,
									"character": 9
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						},
						{
							"id": 695,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 167,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "FillMethod",
								"id": 667
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								694,
								696,
								695
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 165,
							"character": 28
						}
					]
				},
				{
					"id": 690,
					"name": "RateOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Option object passed to the `rate()` function:\n * fieldSpec - the field to calculate the rate on\n * allowNegative - allow emit of negative rates"
					},
					"children": [
						{
							"id": 692,
							"name": "allowNegative",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 155,
									"character": 17
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 691,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 154,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								692,
								691
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 153,
							"character": 28
						}
					]
				},
				{
					"id": 703,
					"name": "RenameColumnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `select()` function:\n * `fields` - the fields to select out of the Event"
					},
					"children": [
						{
							"id": 704,
							"name": "renameMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 197,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 705,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 706,
											"name": "key",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 198,
													"character": 11
												}
											],
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 707,
											"name": "value",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 199,
													"character": 13
												}
											],
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												706,
												707
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 197,
											"character": 14
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								704
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 196,
							"character": 36
						}
					]
				},
				{
					"id": 697,
					"name": "RollupOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `fixedWindowRollup()` function:\n * `windowSize` - the size of the window. e.g. \"6h\" or \"5m\"\n * `aggregation` - the aggregation specification\n * `toTimeEvents` - Convert the rollup events to `TimeEvent`s, otherwise it\n                    will be returned as a `TimeSeries` of `IndexedEvent`s"
					},
					"children": [
						{
							"id": 699,
							"name": "aggregation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 180,
									"character": 15
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 700,
							"name": "toTimeEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 181,
									"character": 16
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						},
						{
							"id": 698,
							"name": "windowSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 179,
									"character": 14
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								699,
								700,
								698
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 178,
							"character": 30
						}
					]
				},
				{
					"id": 701,
					"name": "SelectOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `select()` function:\n * `fields` - the fields to select out of the Event"
					},
					"children": [
						{
							"id": 702,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 189,
									"character": 10
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								702
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 188,
							"character": 30
						}
					]
				},
				{
					"id": 708,
					"name": "TimeSeriesOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `TimeSeries` merge and reduce functions:\n * `seriesList` - A list of `TimeSeries` (required)\n * `reducer` - The reducer function e.g. `max()`\n * `fieldSpec` - Column or columns to reduce. If you\n                 need to retrieve multiple deep\n                 nested values that ['can.be', 'done.with',\n                 'this.notation']. A single deep value with a\n                 string.like.this."
					},
					"indexSignature": [
						{
							"id": 712,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Options object expected by the `TimeSeries` merge and reduce functions:\n * `seriesList` - A list of `TimeSeries` (required)\n * `reducer` - The reducer function e.g. `max()`\n * `fieldSpec` - Column or columns to reduce. If you\n                 need to retrieve multiple deep\n                 nested values that ['can.be', 'done.with',\n                 'this.notation']. A single deep value with a\n                 string.like.this."
							},
							"parameters": [
								{
									"id": 713,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 711,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 216,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									}
								]
							}
						},
						{
							"id": 710,
							"name": "reducer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 215,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReducerFunction",
										"id": 722
									},
									{
										"type": "reference",
										"name": "ArrayReducer",
										"id": 726
									},
									{
										"type": "reference",
										"name": "ListReducer",
										"id": 730
									}
								]
							}
						},
						{
							"id": 709,
							"name": "seriesList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 214,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeSeries",
										"id": 453,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								711,
								710,
								709
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 213,
							"character": 34
						}
					]
				},
				{
					"id": 651,
					"name": "ValueListMap",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A mapping from string to list of numbers"
					},
					"indexSignature": [
						{
							"id": 652,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "A mapping from string to list of numbers"
							},
							"parameters": [
								{
									"id": 653,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 27,
							"character": 29
						}
					]
				},
				{
					"id": 654,
					"name": "ValueMap",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A mapping from string to number"
					},
					"indexSignature": [
						{
							"id": 655,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "A mapping from string to number"
							},
							"parameters": [
								{
									"id": 656,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 34,
							"character": 25
						}
					]
				},
				{
					"id": 677,
					"name": "WindowingOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `windowBy...()` functions. At this point,\nthis just defines the fixed window (e.g. window: period(\"1d\")) and the\ntrigger for downstream notification, which can currently be either\non every incoming event, or whenever a window is about to be discarded.\n * `window` - the size of the window, expressed as a `Period`\n * `trigger` - the output rate of the window, currently either\n               Trigger.perEvent or Trigger.onDiscardedWindow"
					},
					"children": [
						{
							"id": 679,
							"name": "trigger",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 116,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Trigger",
								"id": 661
							}
						},
						{
							"id": 678,
							"name": "window",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 115,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 16
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								679,
								678
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 114,
							"character": 33
						}
					]
				},
				{
					"id": 739,
					"name": "Aggregation",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A general aggregation specification, either as a `AggregationTuple` or\n`AggregationMapFunction`. Your choice."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 269,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "AggregationTuple",
								"id": 734
							},
							{
								"type": "reference",
								"name": "AggregationMapFunction",
								"id": 735,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 735,
					"name": "AggregationMapFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An alternative to the `AggregationTuple` where you can specify a function to\ngenerate the resulting aggregation given the full `Collection` as input."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 263,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 736,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 737,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 738,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 263,
									"character": 51
								}
							]
						}
					}
				},
				{
					"id": 734,
					"name": "AggregationTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Tuple mapping a string -> `ReducerFunction`\ne.g. `[\"value\", avg()]`"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 257,
							"character": 28
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "instrinct",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "ReducerFunction",
								"id": 722
							}
						]
					}
				},
				{
					"id": 726,
					"name": "ArrayReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which combines an array of events into a new array of events"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 242,
							"character": 24
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 727,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 728,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 729,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Key",
																"id": 2
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 242,
									"character": 26
								}
							]
						}
					}
				},
				{
					"id": 718,
					"name": "DedupFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function that takes a list of `Event`s and returns a new `Event`.\nWhen deduping a `Collection` or `TimeSeries` a `DedupFunction` can be\nsupplied to let you control the de-duplication result. It will\nbe called with all `Event`s which are considered duplicates and\nthe result you return will be the `Event` that those `Event`s will\nbe replaced with."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 232,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 719,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 720,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 721,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1676,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 232,
									"character": 42
								}
							]
						}
					}
				},
				{
					"id": 730,
					"name": "ListReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which combines a list of events into a new list of events"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 247,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 731,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 732,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 733,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1676,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Key",
																"id": 2
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 247,
									"character": 25
								}
							]
						}
					}
				},
				{
					"id": 722,
					"name": "ReducerFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which takes a list of numbers and returns a single number."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 237,
							"character": 27
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 723,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 724,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 725,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "number"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 237,
									"character": 29
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						664,
						667,
						657,
						661,
						671
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						714,
						680,
						685,
						693,
						690,
						703,
						697,
						701,
						708,
						651,
						654,
						677
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						739,
						735,
						734,
						726,
						718,
						730,
						722
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 317,
			"name": "\"util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/util.ts",
			"children": [
				{
					"id": 368,
					"name": "dataFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 369,
							"name": "dataFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor arg into an `Immutable.Map`\nof data."
							},
							"parameters": [
								{
									"id": 370,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "__type"
											},
											{
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"name": "any"
													}
												]
											},
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 268,
							"character": 20
						}
					]
				},
				{
					"id": 371,
					"name": "fieldAsArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 372,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the `field spec` into a list if it is not already."
							},
							"parameters": [
								{
									"id": 373,
									"name": "field",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 291,
							"character": 21
						}
					]
				},
				{
					"id": 364,
					"name": "indexFromArgs",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 365,
							"name": "indexFromArgs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor of two args into an `Index`.\nThe second arg defines the timezone (local or UTC)"
							},
							"parameters": [
								{
									"id": 366,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Index",
												"id": 863
											}
										]
									}
								},
								{
									"id": 367,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Index",
								"id": 863
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 254,
							"character": 22
						}
					]
				},
				{
					"id": 355,
					"name": "isMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 356,
							"name": "isMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the value is null, undefined or NaN"
							},
							"parameters": [
								{
									"id": 357,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 210,
							"character": 18
						}
					]
				},
				{
					"id": 331,
					"name": "isValid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 332,
							"name": "isValid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A value is valid if it isn't either undefined, null, or a NaN"
							},
							"parameters": [
								{
									"id": 333,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 29,
							"character": 16
						}
					]
				},
				{
					"id": 337,
					"name": "leftPad",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 338,
							"name": "leftPad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Single zero left padding, for days and months."
							},
							"parameters": [
								{
									"id": 339,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 48,
							"character": 16
						}
					]
				},
				{
					"id": 351,
					"name": "niceIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 352,
							"name": "niceIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a nice string for an index string. If the index string is of\nthe form 1d-2345 then just that string is returned (there's not nice\nway to put it), but if it represents a day, month, or year\n(e.g. 2015-07) then a nice string like \"July\" will be returned. It's\nalso possible to pass in the format of the reply for these types of\nstrings. See moment's format naming conventions:\nhttp://momentjs.com/docs/#/displaying/format/"
							},
							"parameters": [
								{
									"id": 353,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 354,
									"name": "format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 158,
							"character": 24
						}
					]
				},
				{
					"id": 361,
					"name": "timeRangeFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 362,
							"name": "timeRangeFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a `TimeRange`"
							},
							"parameters": [
								{
									"id": 363,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 775
											},
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"isArray": true,
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 775
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 236,
							"character": 25
						}
					]
				},
				{
					"id": 347,
					"name": "timeRangeFromIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 348,
							"name": "timeRangeFromIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given an index string, return the `TimeRange` that represents."
							},
							"parameters": [
								{
									"id": 349,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 350,
									"name": "utc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 775
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 83,
							"character": 33
						}
					]
				},
				{
					"id": 358,
					"name": "timestampFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 359,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a timestamp"
							},
							"parameters": [
								{
									"id": 360,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "number"
											},
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Date"
											},
											{
												"type": "reference",
												"name": "Moment"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 217,
							"character": 25
						}
					]
				},
				{
					"id": 334,
					"name": "untilNow",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 335,
							"name": "untilNow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The last period of time until now, represented as a `TimeRange`\n```\nconst lastDay = TimeRange.last(Period(24, \"hours\"))\n```"
							},
							"parameters": [
								{
									"id": 336,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 16
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 775
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 39,
							"character": 17
						}
					]
				},
				{
					"id": 340,
					"name": "windowDuration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 341,
							"name": "windowDuration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a duration in milliseconds given a window period.\nFor example \"30s\" (30 seconds) should return 30000ms. Accepts\nseconds (e.g. \"30s\"), minutes (e.g. \"5m\"), hours (e.g. \"6h\") and\ndays (e.g. \"30d\") as the period."
							},
							"parameters": [
								{
									"id": 342,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 58,
							"character": 23
						}
					]
				},
				{
					"id": 343,
					"name": "windowPositionFromDate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 344,
							"name": "windowPositionFromDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Helper function to get the window position relative\nto Jan 1, 1970."
							},
							"parameters": [
								{
									"id": 345,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								},
								{
									"id": 346,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 74,
							"character": 31
						}
					]
				},
				{
					"id": 318,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 328,
							"name": "d",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 329,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"days\""
								},
								{
									"id": 330,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 30
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": " 60 * 60 * 24"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										329,
										330
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 325,
							"name": "h",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 326,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"hours\""
								},
								{
									"id": 327,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 31
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": " 60 * 60"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										326,
										327
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 22,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 322,
							"name": "m",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 323,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 21,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"minutes\""
								},
								{
									"id": 324,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 21,
											"character": 33
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "60"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										323,
										324
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 21,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						},
						{
							"id": 319,
							"name": "s",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 320,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 20,
											"character": 14
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"defaultValue": "\"seconds\""
								},
								{
									"id": 321,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 20,
											"character": 33
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										320,
										321
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 20,
									"character": 5
								}
							],
							"type": {
								"type": "instrinct",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								328,
								325,
								322,
								319
							]
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 19,
							"character": 11
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						368,
						371,
						364,
						355,
						331,
						337,
						351,
						361,
						347,
						358,
						334,
						340,
						343
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						318
					]
				}
			],
			"sources": [
				{
					"fileName": "util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1334,
			"name": "\"windowed\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/ssbaveja/Desktop/Projects/visualize/packages/pond/src/windowed.ts",
			"children": [
				{
					"id": 1335,
					"name": "WindowedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 1336,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1341,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `Collection`s, one\nfor each group and window combination.",
								"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `Collection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added to this `Processor`, via `addEvent()`, the windowing\nand grouping will be applied to it and it will be appended to the appropiate\n`Collection`, or a new `Collection` will be created.\n",
								"tags": [
									{
										"tag": "todo",
										"text": ": Need hooks for removing old Collections and when to return new\naggregated events and when to not.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to Collection. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `window()` on a `GroupedCollection`.\n"
									}
								]
							},
							"signatures": [
								{
									"id": 1342,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `Collection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `Collection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added to this `Processor`, via `addEvent()`, the windowing\nand grouping will be applied to it and it will be appended to the appropiate\n`Collection`, or a new `Collection` will be created.\n",
										"tags": [
											{
												"tag": "todo",
												"text": ": Need hooks for removing old Collections and when to return new\naggregated events and when to not.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to Collection. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `window()` on a `GroupedCollection`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1343,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 1387,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335
									}
								},
								{
									"id": 1344,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `Collection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `Collection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added to this `Processor`, via `addEvent()`, the windowing\nand grouping will be applied to it and it will be appended to the appropiate\n`Collection`, or a new `Collection` will be created.\n"
									},
									"parameters": [
										{
											"id": 1345,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 677
											}
										},
										{
											"id": 1346,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 1387,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335
									}
								},
								{
									"id": 1347,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `Collection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `Collection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added to this `Processor`, via `addEvent()`, the windowing\nand grouping will be applied to it and it will be appended to the appropiate\n`Collection`, or a new `Collection` will be created.\n"
									},
									"parameters": [
										{
											"id": 1348,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 677
											}
										},
										{
											"id": 1349,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335
									}
								},
								{
									"id": 1350,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `Collection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `Collection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added to this `Processor`, via `addEvent()`, the windowing\nand grouping will be applied to it and it will be appended to the appropiate\n`Collection`, or a new `Collection` will be created.\n"
									},
									"parameters": [
										{
											"id": 1351,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 677
											}
										},
										{
											"id": 1352,
											"name": "group",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1353,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 1335
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 61,
									"character": 35
								},
								{
									"fileName": "windowed.ts",
									"line": 86,
									"character": 69
								},
								{
									"fileName": "windowed.ts",
									"line": 87,
									"character": 98
								},
								{
									"fileName": "windowed.ts",
									"line": 88,
									"character": 73
								},
								{
									"fileName": "windowed.ts",
									"line": 89,
									"character": 99
								}
							]
						},
						{
							"id": 1337,
							"name": "collections",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 57,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 1339,
							"name": "group",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 59,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"isArray": true,
										"name": "string"
									},
									{
										"type": "reference",
										"name": "GroupingFunction",
										"id": 1664,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 1338,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 58,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowingOptions",
								"id": 677
							}
						},
						{
							"id": 1340,
							"name": "triggerThreshold",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 61,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1363,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1364,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1365,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1676,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "KeyedCollection",
												"id": 1326,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 192,
									"character": 12
								}
							]
						},
						{
							"id": 1357,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1358,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst rolledUp = collection\n  .groupBy(\"team\")\n  .window(period(\"30m\"))\n  .aggregate({\n      team: [\"team\", keep()],\n      total: [ \"score\", sum() ],\n  });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1359,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 714,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1636,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 863
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 164,
									"character": 13
								}
							]
						},
						{
							"id": 1360,
							"name": "flatten",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1361,
									"name": "flatten",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1362,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 680
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 184,
									"character": 18
								}
							]
						},
						{
							"id": 1354,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1355,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the Collection of events contained in the windowed grouping"
									},
									"parameters": [
										{
											"id": 1356,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 148,
									"character": 7
								}
							]
						},
						{
							"id": 1366,
							"name": "groupEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1367,
									"name": "groupEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1368,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "windowed.ts",
									"line": 254,
									"character": 22
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1341
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1337,
								1339,
								1338,
								1340
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1363,
								1357,
								1360,
								1354,
								1366
							]
						}
					],
					"sources": [
						{
							"fileName": "windowed.ts",
							"line": 56,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1674
						}
					]
				},
				{
					"id": 1369,
					"name": "windowFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1370,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1371,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1372,
									"name": "collectionMap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 1373,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1374,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1375,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 677
									}
								},
								{
									"id": 1376,
									"name": "collectionMap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 1387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 1377,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1378,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1379,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 677
									}
								},
								{
									"id": 1380,
									"name": "initialCollection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 1381,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1382,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1383,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 677
									}
								},
								{
									"id": 1384,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										]
									}
								},
								{
									"id": 1385,
									"name": "initialCollection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 1387,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "windowed.ts",
							"line": 274,
							"character": 22
						},
						{
							"fileName": "windowed.ts",
							"line": 275,
							"character": 22
						},
						{
							"fileName": "windowed.ts",
							"line": 279,
							"character": 22
						},
						{
							"fileName": "windowed.ts",
							"line": 283,
							"character": 22
						},
						{
							"fileName": "windowed.ts",
							"line": 288,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1335
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1369
					]
				}
			],
			"sources": [
				{
					"fileName": "windowed.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1821,
				1673,
				929,
				1386,
				1675,
				1852,
				939,
				374,
				1631,
				862,
				1,
				15,
				49,
				914,
				57,
				67,
				967,
				740,
				774,
				440,
				650,
				317,
				1334
			]
		}
	]
}