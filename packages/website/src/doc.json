{
	"id": 0,
	"name": "pondjs",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1911,
			"name": "\"align\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/align.ts",
			"children": [
				{
					"id": 1912,
					"name": "Align",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` that is used to align `Event`s into bins of regular time period, using a\n`Period` object to define those bins.",
						"text": "This processor is useful if you have a series of  data that you want to force into a\nperiod. We use this processor to take near 30 second measurements and align them to\nexactly 30 second intervals. This enables us to later take aggregations of multiple\nseries like this knowing that points will align with each other.\n\nA `Processor` is typically used internally to map `Event` data.\nFor more typical use, see:\n * `EventStream.align()`\n * `TimeSeries.align()`\n * `Collection.align()`\n"
					},
					"typeParameter": [
						{
							"id": 1913,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1919,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "```\nconst p = new Align<T>({\n    fieldSpec: \"value\",\n    period: period().every(duration(\"1m\")),\n    method: AlignmentMethod.Linear\n});\n```\nOptions:\n * `fieldSpec` is the `Event` field or fields that should be aligned\n * `period` is the `Period` of the alignment (see `Period`)\n * `method` maybe `AlignmentMethod.Linear` or `AlignmentMethod.Hold`"
							},
							"signatures": [
								{
									"id": 1920,
									"name": "new Align",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "```\nconst p = new Align<T>({\n    fieldSpec: \"value\",\n    period: period().every(duration(\"1m\")),\n    method: AlignmentMethod.Linear\n});\n```\nOptions:\n * `fieldSpec` is the `Event` field or fields that should be aligned\n * `period` is the `Period` of the alignment (see `Period`)\n * `method` maybe `AlignmentMethod.Linear` or `AlignmentMethod.Hold`"
									},
									"parameters": [
										{
											"id": 1921,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Align",
										"id": 1912
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 45,
									"character": 32
								}
							]
						},
						{
							"id": 1914,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 41,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1917,
							"name": "_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 44,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1916,
							"name": "_method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 43,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "AlignmentMethod",
								"id": 1459
							}
						},
						{
							"id": 1915,
							"name": "_period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 42,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 1568
							}
						},
						{
							"id": 1918,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "align.ts",
									"line": 45,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1922,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1923,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the align operation on the event and return an `Immutable.List` of\n`Event`s of type `T`. The returned `Event`s are those interpolated between\nthe last `Event` and this one using the `AlignmentMethod` supplied in the\nconstructor."
									},
									"parameters": [
										{
											"id": 1924,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 79,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 58
							}
						},
						{
							"id": 1928,
							"name": "getBoundaries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1929,
									"name": "getBoundaries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of indexes of window boundaries if the current\nevent and the previous event do not lie in the same window. If\nthey are in the same window, return an empty list."
									},
									"parameters": [
										{
											"id": 1930,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 131,
									"character": 25
								}
							]
						},
						{
							"id": 1931,
							"name": "interpolateHold",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1932,
									"name": "interpolateHold",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new event on the requested boundary and carry over the\nvalue from the previous event.",
										"text": "A variation just sets the values to null, this is used when the\nlimit is hit.\n"
									},
									"parameters": [
										{
											"id": 1933,
											"name": "boundaryTime",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										},
										{
											"id": 1934,
											"name": "setNone",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 143,
									"character": 27
								}
							]
						},
						{
							"id": 1935,
							"name": "interpolateLinear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1936,
									"name": "interpolateLinear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a linear differential between two counter values that lie\non either side of a window boundary."
									},
									"parameters": [
										{
											"id": 1937,
											"name": "boundaryTime",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										},
										{
											"id": 1938,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 156,
									"character": 29
								}
							]
						},
						{
							"id": 1925,
							"name": "isAligned",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1926,
									"name": "isAligned",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Test to see if an event is perfectly aligned. Used on first event."
									},
									"parameters": [
										{
											"id": 1927,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "align.ts",
									"line": 122,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1919
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1914,
								1917,
								1916,
								1915,
								1918
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1922,
								1928,
								1931,
								1935,
								1925
							]
						}
					],
					"sources": [
						{
							"fileName": "align.ts",
							"line": 40,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 55,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1912
					]
				}
			],
			"sources": [
				{
					"fileName": "align.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1762,
			"name": "\"base\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/base.ts",
			"children": [
				{
					"id": 1763,
					"name": "Base",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Abstract base class used by classes which maybe passed within the streaming code."
					},
					"sources": [
						{
							"fileName": "base.ts",
							"line": 32,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Collection",
							"id": 269
						},
						{
							"type": "reference",
							"name": "WindowedCollection",
							"id": 862
						},
						{
							"type": "reference",
							"name": "Event",
							"id": 1765
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1763
					]
				}
			],
			"sources": [
				{
					"fileName": "base.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 139,
			"name": "\"collapse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/collapse.ts",
			"children": [
				{
					"id": 140,
					"name": "Collapse",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A processor which takes a fieldSpec and returns a new event\nwith a new column that is a collapsed result of the selected\ncolumns. To collapse the columns it uses the supplied reducer\nfunction. Optionally the new column can completely replace\nthe existing columns in the event."
					},
					"typeParameter": [
						{
							"id": 141,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 142,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 144,
									"name": "new Collapse",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 145,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collapse",
										"id": 140
									}
								}
							],
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 28,
									"character": 62
								}
							]
						},
						{
							"id": 143,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 29,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"name": "CollapseOptions",
								"id": 1474
							}
						},
						{
							"id": 146,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 147,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 148,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "collapse.ts",
									"line": 32,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 58
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								142
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								143
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								146
							]
						}
					],
					"sources": [
						{
							"fileName": "collapse.ts",
							"line": 28,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 55,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						140
					]
				}
			],
			"sources": [
				{
					"fileName": "collapse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 268,
			"name": "\"collection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/collection.ts",
			"children": [
				{
					"id": 269,
					"name": "Collection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Collection` holds a ordered (but not sorted) list of `Event`s and provides the\nunderlying functionality for manipulating those `Event`s.",
						"text": "In Typescript, `Collection` is a generic of type `T`, which is the homogeneous\n`Event` type of the `Collection`. `T` is likely one of:\n * `Collection<Time>`\n * `Collection<TimeRange>`\n * `Collection<Index>`\n\nA `Collection` has several sub-classes, including a `SortedCollection`, which maintains\n`Events` in chronological order.\n\nA `TimeSeries` wraps a `SortedCollection` by attaching meta data to the series of\nchronological `Event`s. This provides the most common structure to use for dealing with\nsequences of `Event`s.\n"
					},
					"typeParameter": [
						{
							"id": 270,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 277,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a new `Collection`.",
								"text": "You can construct a new empty `Collection` with `new`:\n\n```\nconst myCollection = new Collection<Time>();\n```\n\nAlternatively, you can use the factory function:\n\n```\nconst myCollection = collection<Time>();\n```\n\nA `Collection` may also be constructed with an initial list of `Events`\nby supplying an `Immutable.List<Event<T>>`, or from another `Collection`\nto make a copy.\n\nSee also `SortedCollection`, which keeps `Event`s in chronological order,\nand also allows you to do `groupBy` and `window` operations. For a higher\nlevel interface for managing `Event`s, use the `TimeSeries`, which wraps\nthe `SortedCollection` along with meta data about that collection.\n"
							},
							"signatures": [
								{
									"id": 278,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a new `Collection`.",
										"text": "You can construct a new empty `Collection` with `new`:\n\n```\nconst myCollection = new Collection<Time>();\n```\n\nAlternatively, you can use the factory function:\n\n```\nconst myCollection = collection<Time>();\n```\n\nA `Collection` may also be constructed with an initial list of `Events`\nby supplying an `Immutable.List<Event<T>>`, or from another `Collection`\nto make a copy.\n\nSee also `SortedCollection`, which keeps `Event`s in chronological order,\nand also allows you to do `groupBy` and `window` operations. For a higher\nlevel interface for managing `Event`s, use the `TimeSeries`, which wraps\nthe `SortedCollection` along with meta data about that collection.\n"
									},
									"parameters": [
										{
											"id": 279,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														]
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 269,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 105,
									"character": 68
								}
							]
						},
						{
							"id": 275,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 104,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 276,
							"name": "_keyMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 105,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Set",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								]
							}
						},
						{
							"id": 284,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 285,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a new `Event` into the `Collection`, returning a new `Collection`\ncontaining that `Event`. Optionally the `Event`s may be de-duplicated.",
										"text": "The dedup arg may `true` (in which case any existing `Event`s with the\nsame key will be replaced by this new Event), or with a function. If\ndedup is a user function that function will be passed a list of all `Event`s\nwith that duplicated key and will be expected to return a single `Event`\nto replace them with, thus shifting de-duplication logic to the user.\n\nExample 1:\n\n```\nlet myCollection = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2);\n```\n\nExample 2:\n```\n// dedup with the sum of the duplicated events\nconst myCollection = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3, (events) => {\n        const a = events.reduce((sum, e) => sum + e.get(\"a\"), 0);\n        return new Event<Time>(t, { a });\n    });\n```\n"
									},
									"parameters": [
										{
											"id": 286,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 287,
											"name": "dedup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DedupFunction",
														"id": 1509,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 191,
									"character": 19
								}
							]
						},
						{
							"id": 370,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 371,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Collection`'s `Event`s down to a single value per field.",
										"text": "This makes use of a user defined function suppled as the `reducer` to do\nthe reduction of values to a single value. The `ReducerFunction` is defined\nlike so:\n\n```\n(values: number[]) => number\n```\n\nFields to be aggregated are specified using a `fieldSpec` argument, which\ncan be a field name or array of field names.\n\nIf the `fieldSpec` matches multiple fields then an object is returned\nwith keys being the fields and the values being the aggregated value for\nthose fields. If the `fieldSpec` is for a single field then just the\naggregated value is returned.\n\nNote: The `Collection` class itself contains most of the common aggregation functions\nbuilt in (e.g. `myCollection.avg(\"value\")`), but this is here to help when what\nyou need isn't supplied out of the box.\n"
									},
									"parameters": [
										{
											"id": 372,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 373,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 609,
									"character": 20
								},
								{
									"fileName": "collection.ts",
									"line": 610,
									"character": 20
								}
							]
						},
						{
							"id": 304,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 305,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` at the given position `pos` in the `Collection`. The\nevents in the `Collection` will be in the same order as they were inserted,\nunless some sorting has been evoked by the user.",
										"text": "Note: this is the least efficient way to fetch a point. If you wish to scan\nthe whole set of Events, use iterators (see `forEach()` and `map()`).\nFor direct access the `Collection` is optimized for returning results via\nthe `Event`'s key T, i.e. timestamp (see `atKey()`).\n\nExample:\n```\nconst c1 = collection(\n    Immutable.List([\n        event(time(\"2015-04-22T03:30:00Z\"), Immutable.Map({ a: 5, b: 6 })),\n        event(time(\"2015-04-22T02:30:00Z\"), Immutable.Map({ a: 4, b: 2 }))\n    ])\n);\nc1.at(1).get(\"a\")  // 4\n```\n"
									},
									"parameters": [
										{
											"id": 306,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 323,
									"character": 13
								}
							]
						},
						{
							"id": 307,
							"name": "atKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 308,
									"name": "atKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` located at the key specified, if it exists.",
										"text": "Note: this doesn't find the closest key, or implement `bisect`. For that you need the\n`SortedCollection`, that is also part of a `TimeSeries`.\nOn the plus side, if you know the key this is an efficient way to access the\n`Event` within the `Collection`.\n\nExample:\n```\nconst t1 = time(\"2015-04-22T03:30:00Z\");\nconst t2 = time(\"2015-04-22T02:30:00Z\");\nconst c1 = collection(\n    Immutable.List([\n        event(t1, Immutable.Map({ a: 5, b: 6 })),\n        event(t2, Immutable.Map({ a: 4, b: 2 }))\n    ])\n);\nconst event = collection.atKey(t2);\nevent.get(\"a\")   // 4\n```\n"
									},
									"parameters": [
										{
											"id": 309,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 349,
									"character": 16
								}
							]
						},
						{
							"id": 404,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 405,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down\nto their average(s).",
										"text": "The `fieldSpec` passed into the avg function is either\na field name or a list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nExample:\n```\nconst e1 = event(time(\"2015-04-22T02:30:00Z\"), Immutable.Map({ a: 8, b: 2 }));\nconst e2 = event(time(\"2015-04-22T01:30:00Z\"), Immutable.Map({ a: 3, b: 3 }));\nconst e3 = event(time(\"2015-04-22T03:30:00Z\"), Immutable.Map({ a: 5, b: 7 }));\nconst c = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3);\n\nc.avg(\"b\") // 4\n"
									},
									"parameters": [
										{
											"id": 406,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 407,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 408,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 409,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 410,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 411,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 412,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 413,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 670,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 669,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 670,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 671,
									"character": 14
								}
							]
						},
						{
							"id": 481,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 482,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Internal method to clone this `Collection` (protected)"
									},
									"parameters": [
										{
											"id": 483,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 484,
											"name": "keyMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Base",
										"id": 1763
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 950,
									"character": 19
								}
							]
						},
						{
							"id": 475,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 476,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapse multiple columns of a `Collection` into a new column.",
										"text": "The `collapse()` method needs to be supplied with a `CollapseOptions`\nobject. You use this to specify the columns to collapse, the column name\nof the column to collapse to and the reducer function. In addition you\ncan choose to append this new column or use it in place of the columns\ncollapsed.\n\n```\n{\n   fieldSpecList: string[];\n   fieldName: string;\n   reducer: any;\n   append: boolean;\n}\n```\nOptions:\n * `fieldSpecList` - the list of fields to collapse\n * `fieldName` - the new field's name\n * `reducer()` - a function to collapse using e.g. `avg()`\n * `append` - to include only the new field, or include it in addition\n    to the previous fields.\n\nExample:\n```\n// Initial collection\nconst t1 = time(\"2015-04-22T02:30:00Z\");\nconst t2 = time(\"2015-04-22T03:30:00Z\");\nconst t3 = time(\"2015-04-22T04:30:00Z\");\nconst c = collection<Time>()\n    .addEvent(event(t1, Immutable.Map({ a: 5, b: 6 })))\n    .addEvent(event(t2, Immutable.Map({ a: 4, b: 2 })))\n    .addEvent( event(t2, Immutable.Map({ a: 6, b: 3 })));\n\n// Sum columns \"a\" and \"b\" into a new column \"v\"\nconst sums = c.collapse({\n    fieldSpecList: [\"a\", \"b\"],\n    fieldName: \"v\",\n    reducer: sum(),\n    append: false\n});\n\nsums.at(0).get(\"v\")  // 11\nsums.at(1).get(\"v\")  // 6\nsums.at(2).get(\"v\")  // 9\n```\n"
									},
									"parameters": [
										{
											"id": 477,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 898,
									"character": 19
								}
							]
						},
						{
							"id": 318,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 319,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterator (`IterableIterator`) into the internal\nlist of events within this `Collection`.",
										"text": "Example:\n```\nlet iterator = collection.entries();\nfor (let x = iterator.next(); !x.done; x = iterator.next()) {\n    const [key, event] = x.value;\n    console.log(`Key: ${key}, Event: ${event.toString()}`);\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 404,
									"character": 18
								}
							]
						},
						{
							"id": 314,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 315,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the `Event<T>`s as an `Immutable.List`."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 375,
									"character": 20
								}
							]
						},
						{
							"id": 316,
							"name": "eventMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 317,
									"name": "eventMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the events in the `Collection` as an `Immutable.Map`, where\nthe key of type `T` (`Time`, `Index`, or `TimeRange`),\nrepresented as a string, is mapped to the `Event` itself.",
										"returns": "Immutable.Map<T, Event<T>> Events in this Collection,\n                                    converted to a Map.\n"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 387,
									"character": 19
								}
							]
						},
						{
							"id": 361,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 362,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter the Collection's `Event`'s with the supplied function.",
										"text": "The function `predicate` is passed each `Event` and should return\ntrue to keep the `Event` or false to discard.\n\nExample:\n```\nconst filtered = collection.filter(e => e.get(\"a\") < 8)\n```\n"
									},
									"parameters": [
										{
											"id": 363,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 364,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 365,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 366,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 367,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 560,
															"character": 28
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 560,
									"character": 17
								}
							]
						},
						{
							"id": 374,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 375,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 376,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 377,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 378,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 379,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 380,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 381,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 382,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 383,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 623,
													"character": 47
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 622,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 623,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 624,
									"character": 16
								}
							]
						},
						{
							"id": 310,
							"name": "firstEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 311,
									"name": "firstEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 361,
									"character": 21
								}
							]
						},
						{
							"id": 342,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 343,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flat map over the events in this `Collection`.",
										"text": "For each `Event<T>` passed to your callback function you should map that to\nzero, one or many `Event<U>`s, returned as an `Immutable.List<Event<U>>`.\n\nExample:\n```\nconst processor = new Fill<T>(options);  // processor addEvent() returns 0, 1 or n new events\nconst filled = this.flatMap<T>(e => processor.addEvent(e));\n```\n"
									},
									"typeParameter": [
										{
											"id": 344,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 345,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 346,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 347,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 348,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 349,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "U",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 487,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 486,
									"character": 18
								}
							]
						},
						{
							"id": 320,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 321,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this `Collection`.",
										"text": "`Event`s are in the order that they were added, unless the Collection\nhas since been sorted. The `sideEffect` is a user supplied function which\nis passed the `Event<T>` and the index.\n\nReturns the number of items iterated.\n\nExample:\n```\ncollection.forEach((e, i) => {\n    console.log(`Event[${i}] is ${e.toString()}`);\n})\n```\n"
									},
									"parameters": [
										{
											"id": 322,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 323,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 324,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 325,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 326,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 424,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 424,
									"character": 18
								}
							]
						},
						{
							"id": 473,
							"name": "isChronological",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 474,
									"name": "isChronological",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if all events in this `Collection` are in chronological order."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 834,
									"character": 26
								}
							]
						},
						{
							"id": 302,
							"name": "isEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 303,
									"name": "isEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return if the `Collection` has any events in it"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 298,
									"character": 18
								}
							]
						},
						{
							"id": 384,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 385,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 386,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 387,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 388,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 389,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 390,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 391,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 392,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 393,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 632,
													"character": 46
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 631,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 632,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 633,
									"character": 15
								}
							]
						},
						{
							"id": 312,
							"name": "lastEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 313,
									"name": "lastEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 368,
									"character": 20
								}
							]
						},
						{
							"id": 327,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 328,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map the `Event`s in this `Collection` to new `Event`s.",
										"text": "For each `Event` passed to your `mapper` function you return a new Event.\n\nExample:\n```\nconst mapped = sorted.map(event => {\n    return new Event(event.key(), { a: event.get(\"x\") * 2 });\n});\n```\n"
									},
									"typeParameter": [
										{
											"id": 329,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 330,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 331,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 332,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 333,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 334,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 441,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 440,
									"character": 14
								}
							]
						},
						{
							"id": 335,
							"name": "mapKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 336,
									"name": "mapKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remap the keys, but keep the data the same. You can use this if you\nhave a `Collection` of `Event<Index>` and want to convert to events\nof `Event<Time>`s, for example. The return result of remapping the\nkeys of a T to U i.e. `Collection<T>` remapped with new keys of type\n`U` as a `Collection<U>`.",
										"text": "Example:\n\nIn this example we remap `Time` keys to `TimeRange` keys using the `Time.toTimeRange()`\nmethod, centering the new `TimeRange`s around each `Time` with duration given\nby the `Duration` object supplied, in this case representing one hour.\n\n```\nconst remapped = myCollection.mapKeys<TimeRange>(t =>\n    t.toTimeRange(duration(\"1h\"), TimeAlignment.Middle)\n);\n```\n\n"
									},
									"typeParameter": [
										{
											"id": 337,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 338,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 339,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 340,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 341,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 467,
															"character": 41
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 467,
									"character": 18
								}
							]
						},
						{
							"id": 414,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 415,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir maximum value(s).",
										"text": "The `fieldSpec` passed into the avg function is either a field name or\na list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nThe result is the maximum value if the fieldSpec is for one field. If\nmultiple fields then a map of fieldName -> max values is returned\n"
									},
									"parameters": [
										{
											"id": 416,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 417,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 418,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 419,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 420,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 421,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 422,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 423,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 689,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 688,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 689,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 690,
									"character": 14
								}
							]
						},
						{
							"id": 434,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 435,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their median value"
									},
									"parameters": [
										{
											"id": 436,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 437,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 438,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 439,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 440,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 441,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 442,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 443,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 708,
													"character": 48
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 707,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 708,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 709,
									"character": 17
								}
							]
						},
						{
							"id": 424,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 425,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir minimum value(s)"
									},
									"parameters": [
										{
											"id": 426,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 427,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 428,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 429,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 430,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 431,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 432,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 433,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 699,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 698,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 699,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 700,
									"character": 14
								}
							]
						},
						{
							"id": 485,
							"name": "onEventAdded",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 486,
									"name": "onEventAdded",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 487,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 957,
									"character": 26
								}
							]
						},
						{
							"id": 454,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 455,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `Collection`. This works the same way as numpy.",
										"text": "The percentile function has several parameters that can be supplied:\n* `q` - The percentile (should be between 0 and 100)\n* `fieldSpec` - Field or fields to find the percentile of\n* `interp` - Specifies the interpolation method to use when the desired, see below\n* `filter` - Optional filter function used to clean data before aggregating\n\nFor `interp` a `InterpolationType` should be supplied if the default (\"linear\") is\nnot used. This enum is defined like so:\n```\nenum InterpolationType {\n    linear = 1,\n    lower,\n    higher,\n    nearest,\n    midpoint\n}\n```\nEmum values:\n  * `linear`: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * `lower`: i.\n  * `higher`: j.\n  * `nearest`: i or j whichever is nearest.\n  * `midpoint`: (i + j) / 2.\n\n"
									},
									"parameters": [
										{
											"id": 456,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 457,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 458,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											}
										},
										{
											"id": 459,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 460,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 461,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 462,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 463,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											}
										},
										{
											"id": 464,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 465,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 466,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 467,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 757,
													"character": 6
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 751,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 752,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 758,
									"character": 21
								}
							]
						},
						{
							"id": 468,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 469,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `Collection`.",
										"text": "The quantiles function has several parameters that can be supplied:\n* `n` - The number of quantiles\n* `column` - Field to find the quantiles within\n* `interp` - Specifies the interpolation method to use when the desired, see below\n\nFor `interp` a `InterpolationType` should be supplied if the default (\"linear\") is\nnot used. This enum is defined like so:\n```\nenum InterpolationType {\n    linear = 1,\n    lower,\n    higher,\n    nearest,\n    midpoint\n}\n```\nEmum values:\n  * `linear`: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * `lower`: i.\n  * `higher`: j.\n  * `nearest`: i or j whichever is nearest.\n  * `midpoint`: (i + j) / 2.\n"
									},
									"parameters": [
										{
											"id": 470,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 471,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 472,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 794,
									"character": 19
								}
							]
						},
						{
							"id": 288,
							"name": "removeEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 289,
									"name": "removeEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the `Event` (or duplicate keyed Events) with the given key."
									},
									"parameters": [
										{
											"id": 290,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 235,
									"character": 23
								}
							]
						},
						{
							"id": 359,
							"name": "rest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 360,
									"name": "rest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Collection` with all `Event`s except the first"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 545,
									"character": 15
								}
							]
						},
						{
							"id": 478,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 479,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Select out specified columns from the `Event`s within this `Collection`.",
										"text": "The `select()` method needs to be supplied with a `SelectOptions`\nobject, which takes the following form:\n\n```\n{\n    fields: string[];\n}\n```\nOptions:\n * `fields` - array of columns to keep within each `Event`.\n\nExample:\n```\nconst timestamp1 = time(\"2015-04-22T02:30:00Z\");\nconst timestamp2 = time(\"2015-04-22T03:30:00Z\");\nconst timestamp3 = time(\"2015-04-22T04:30:00Z\");\nconst e1 = event(timestamp1, Immutable.Map({ a: 5, b: 6, c: 7 }));\nconst e2 = event(timestamp2, Immutable.Map({ a: 4, b: 5, c: 6 }));\nconst e3 = event(timestamp2, Immutable.Map({ a: 6, b: 3, c: 2 }));\n\nconst c = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3);\n\nconst c1 = c.select({\n    fields: [\"b\", \"c\"]\n});\n\n// result: 3 events containing just b and c (a is discarded)\n```\n"
									},
									"parameters": [
										{
											"id": 480,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 938,
									"character": 17
								}
							]
						},
						{
							"id": 294,
							"name": "setEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 295,
									"name": "setEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completely replace the existing `Event`'s in this Collection."
									},
									"parameters": [
										{
											"id": 296,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 255,
									"character": 20
								}
							]
						},
						{
							"id": 297,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 298,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of `Event`'s in this Collection"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 270,
									"character": 15
								}
							]
						},
						{
							"id": 299,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 300,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `Collection`.",
										"text": "Uses the `fieldPath` to look up values in all Events.\n\nIt then counts the number that are considered valid, which\nspecifically are not:\n * NaN\n * undefined\n * null.\n"
									},
									"parameters": [
										{
											"id": 301,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 285,
									"character": 20
								}
							]
						},
						{
							"id": 355,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `Collection`, returns a new\n`Collection` representing a portion of this `TimeSeries` from `begin` up to\nbut not including `end`."
									},
									"parameters": [
										{
											"id": 357,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 358,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 538,
									"character": 16
								}
							]
						},
						{
							"id": 352,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 353,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` using the value referenced by\nthe `field`."
									},
									"parameters": [
										{
											"id": 354,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 523,
									"character": 15
								}
							]
						},
						{
							"id": 350,
							"name": "sortByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 351,
									"name": "sortByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` by the `Event` key `T`.",
										"text": "In the case case of the key being `Time`, this is clear.\nFor `TimeRangeEvents` and `IndexedEvents`, the `Collection`\nwill be sorted by the begin time.\n\nThis method is particularly useful when the `Collection`\nwill be passed into a `TimeSeries`.\n\nSee also `Collection.isChronological()`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst sorted = collection.sortByKey();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 510,
									"character": 20
								}
							]
						},
						{
							"id": 444,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 445,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their standard deviation"
									},
									"parameters": [
										{
											"id": 446,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 447,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 448,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 449,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 450,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 451,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 452,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 453,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 717,
													"character": 47
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 716,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 717,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 718,
									"character": 16
								}
							]
						},
						{
							"id": 394,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 395,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum of the `Event`'s in this `Collection`\nfor the `fieldspec`"
									},
									"parameters": [
										{
											"id": 396,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 397,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 398,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 399,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 400,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 401,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 402,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 403,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 642,
													"character": 45
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 641,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 642,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 643,
									"character": 14
								}
							]
						},
						{
							"id": 291,
							"name": "takeLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 292,
									"name": "takeLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes the last n `Event`'s of the `Collection` and returns a new `Collection`."
									},
									"parameters": [
										{
											"id": 293,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 246,
									"character": 19
								}
							]
						},
						{
							"id": 368,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 369,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the time range extents of the `Collection` as a `TimeRange`.",
										"text": "Since this `Collection` is not necessarily in order, this method will traverse the\n`Collection` and determine the earliest and latest time represented within it.\n"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 570,
									"character": 20
								}
							]
						},
						{
							"id": 280,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 281,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Collection` as a regular JSON object."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 149,
									"character": 17
								}
							]
						},
						{
							"id": 282,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 283,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize out the `Collection` as a string. This will be the\nstring representation of `toJSON()`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 157,
									"character": 19
								}
							]
						},
						{
							"id": 271,
							"name": "buildKeyMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 272,
									"name": "buildKeyMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rebuild the keyMap from scratch"
									},
									"typeParameter": [
										{
											"id": 273,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 274,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "S",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 87,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								277
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								275,
								276
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								284,
								370,
								304,
								307,
								404,
								481,
								475,
								318,
								314,
								316,
								361,
								374,
								310,
								342,
								320,
								473,
								302,
								384,
								312,
								327,
								335,
								414,
								434,
								424,
								485,
								454,
								468,
								288,
								359,
								478,
								294,
								297,
								299,
								355,
								352,
								350,
								444,
								394,
								291,
								368,
								280,
								282,
								271
							]
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 83,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1763
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "SortedCollection",
							"id": 915
						}
					]
				},
				{
					"id": 491,
					"name": "collectionFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 492,
							"name": "collectionFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 493,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 494,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 269,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Collection",
								"id": 269,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 962,
							"character": 26
						}
					]
				},
				{
					"id": 488,
					"name": "fieldAsArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 489,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the `fieldspec` into a list if it is not already."
							},
							"parameters": [
								{
									"id": 490,
									"name": "field",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "collection.ts",
							"line": 58,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						269
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						491,
						488
					]
				}
			],
			"sources": [
				{
					"fileName": "collection.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 15,
			"name": "\"duration\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/duration.ts",
			"children": [
				{
					"id": 16,
					"name": "Duration",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Duration` is a fixed length of time, unattached to any point in time.",
						"text": "It is typically used in combination with a `Period` to describe an aggregation\nwindow. For example a `period(duration(\"1d\"))` would indicate windows that are\na day long.\n"
					},
					"children": [
						{
							"id": 19,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "There are a number of ways to construct a duration:\n * Passing a number to the constructor will be considered milliseconds\n * Passing a string to the constuctor will be considered a duration string, with a\n   format of `%d[s|m|h|d]`\n * Passing a number and a string will be considered a quantity and a unit.\n   The string should be one of: \"milliseconds\", \"seconds\", \"minutes\", \"hours\",\n   \"days\" or \"weeks\"\n * Finally, you can pass either a `moment.Duration` or a `Moment.Duration-like`\n   object to the constructor",
								"text": "Example 1\n```\nconst thirtyMinutes = duration(\"30m\";\n```\n\nExample 2:\n```\nconst dayDuration = duration(24, \"hours\");\n```\n\nExample 3:\n```\nconst p = duration({\n    seconds: 2,\n    minutes: 2,\n    hours: 2,\n    days: 2,\n    weeks: 2,\n    months: 2,\n    years: 2\n});\n```\nIn all cases you can use `new Duration()` or the factory function `duration()`.\n"
							},
							"signatures": [
								{
									"id": 20,
									"name": "new Duration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "There are a number of ways to construct a duration:\n * Passing a number to the constructor will be considered milliseconds\n * Passing a string to the constuctor will be considered a duration string, with a\n   format of `%d[s|m|h|d]`\n * Passing a number and a string will be considered a quantity and a unit.\n   The string should be one of: \"milliseconds\", \"seconds\", \"minutes\", \"hours\",\n   \"days\" or \"weeks\"\n * Finally, you can pass either a `moment.Duration` or a `Moment.Duration-like`\n   object to the constructor",
										"text": "Example 1\n```\nconst thirtyMinutes = duration(\"30m\";\n```\n\nExample 2:\n```\nconst dayDuration = duration(24, \"hours\");\n```\n\nExample 3:\n```\nconst p = duration({\n    seconds: 2,\n    minutes: 2,\n    hours: 2,\n    days: 2,\n    weeks: 2,\n    months: 2,\n    years: 2\n});\n```\nIn all cases you can use `new Duration()` or the factory function `duration()`.\n"
									},
									"parameters": [
										{
											"id": 21,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 22,
											"name": "arg2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								}
							],
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 45,
									"character": 28
								}
							]
						},
						{
							"id": 17,
							"name": "_duration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 44,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 18,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 45,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 23,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 24,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a string for the `Duration`. If the `Duration` was originally\ndefined with a string then that string is returned. If defined with a `Moment.duration`\nthen Moment's `toISOString()` is used. Otherwise this falls back to a millisecond\nrepresentation."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 122,
									"character": 12
								}
							]
						},
						{
							"id": 25,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 26,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of milliseconds for this `Duration`.",
										"text": "Example:\n```\nconst p = duration(moment.duration(24, \"hours\"));\nconsole.log(+p) // 86400000\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 137,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								19
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17,
								18
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								23,
								25
							]
						}
					],
					"sources": [
						{
							"fileName": "duration.ts",
							"line": 43,
							"character": 21
						}
					]
				},
				{
					"id": 45,
					"name": "durationFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 46,
							"name": "durationFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 47,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 48,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 49,
							"name": "durationFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 50,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 51,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 52,
							"name": "durationFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 53,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"name": "Duration"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "duration.ts",
							"line": 142,
							"character": 24
						},
						{
							"fileName": "duration.ts",
							"line": 143,
							"character": 24
						},
						{
							"fileName": "duration.ts",
							"line": 144,
							"character": 24
						},
						{
							"fileName": "duration.ts",
							"line": 145,
							"character": 24
						}
					]
				},
				{
					"id": 36,
					"name": "SHORT_UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 43,
							"name": "d",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 32,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 42,
							"name": "h",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 31,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 39,
							"name": "l",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 28,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "1"
						},
						{
							"id": 41,
							"name": "m",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 30,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 37,
							"name": "n",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 26,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1 / 1000 / 1000"
						},
						{
							"id": 40,
							"name": "s",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 29,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 38,
							"name": "u",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 27,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1 / 1000"
						},
						{
							"id": 44,
							"name": "w",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 33,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								43,
								42,
								39,
								41,
								37,
								40,
								38,
								44
							]
						}
					],
					"sources": [
						{
							"fileName": "duration.ts",
							"line": 25,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 27,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 34,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 21,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24"
						},
						{
							"id": 33,
							"name": "hours",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60"
						},
						{
							"id": 29,
							"name": "microseconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 16,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1 / 1000"
						},
						{
							"id": 30,
							"name": "milliseconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 17,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "1"
						},
						{
							"id": 32,
							"name": "minutes",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60"
						},
						{
							"id": 28,
							"name": "nanoseconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 15,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1 / 1000 / 1000"
						},
						{
							"id": 31,
							"name": "seconds",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 18,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "1000"
						},
						{
							"id": 35,
							"name": "weeks",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "duration.ts",
									"line": 22,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": " 1000 * 60 * 60 * 24 * 7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								34,
								33,
								29,
								30,
								32,
								28,
								31,
								35
							]
						}
					],
					"sources": [
						{
							"fileName": "duration.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						16
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						45
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						36,
						27
					]
				}
			],
			"sources": [
				{
					"fileName": "duration.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1764,
			"name": "\"event\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/event.ts",
			"children": [
				{
					"id": 1765,
					"name": "Event",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Event is a mapping from a time based key to a data object represented\nby an `Immutable.Map`.",
						"text": "The key needs to be a sub-class of the base class `Key`, which typically\nwould be one of the following:\n\n * `Time` - a single timestamp\n * `TimeRange` - a timerange over which the Event took place\n * `Index` - a different representation of a TimeRange\n\nThe data object needs to be an `Immutable.Map<string, any>`.\n\nTo get values out of the data, use `get()`. This method takes\nwhat is called a field, which is a top level key of the data\nmap.\n\nFields can refer to deep data with either a path (as an array)\nor dot notation (\"path.to.value\").\n\nExample:\n\n```\nconst timestamp = time(new Date(\"2015-04-22T03:30:00Z\");\nconst e = event(t, Immutable.Map({ temperatuue: 75.2, humidity: 84 }));\nconst humidity = e.get(\"humidity\");  // 84\n```\n\nThere exists several static methods for `Event` that enable the\nability to compare `Events`, `merge()` or `combine()` lists of `Event`s or\ncheck for duplicates.\n\nYou can also do per-`Event` operations like `select()` out specific fields or\n`collapse()` multiple fields into one using an aggregation function.\n\nNote: Managing multiple `Event`s is typically done with a `Collection`\nwhich is literally a collections of `Event`s, or a `TimeSeries` which\nis an chronological set of `Event`s plus some additional meta data.\n"
					},
					"typeParameter": [
						{
							"id": 1766,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1813,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construction of an `Event` requires both a time-based key and an\n`Immutable.Map` of (`string` -> data) mappings.",
								"text": "The time-based key should be either a `Time`, a `TimeRange` or an `Index`,\nthough it would be possible to subclass `Key` with another type so long\nas it implements that abstract interface.\n\nThe data portion maybe deep data. Using `Immutable.toJS()` is helpful in\nthat case.\n\nYou can use `new Event<T>()` to create a new `Event`, but it's easier to use\none of the factory functions: `event()`, `timeEvent()`, `timeRangeEvent()` and\n`indexedEvent()`\n\nExample 1:\n```\nconst e = event(time(new Date(1487983075328)), Immutable.Map({ name: \"bob\" }));\n```\n\nExample 2:\n```\n// An event for a particular day with indexed key\nconst e = event(index(\"1d-12355\"), Immutable.Map({ value: 42 }));\n```\n\nExample 3:\n```\n// Outage event spans a timerange\nconst e = event(timerange(beginTime, endTime), Immutable.Map({ ticket: \"A1787383\" }));\n```\n\nExample 4:\n```\nconst e = timeEvent({\n    time: 1487983075328,\n    data: { a: 2, b: 3 }\n});\n"
							},
							"signatures": [
								{
									"id": 1816,
									"name": "new Event",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construction of an `Event` requires both a time-based key and an\n`Immutable.Map` of (`string` -> data) mappings.",
										"text": "The time-based key should be either a `Time`, a `TimeRange` or an `Index`,\nthough it would be possible to subclass `Key` with another type so long\nas it implements that abstract interface.\n\nThe data portion maybe deep data. Using `Immutable.toJS()` is helpful in\nthat case.\n\nYou can use `new Event<T>()` to create a new `Event`, but it's easier to use\none of the factory functions: `event()`, `timeEvent()`, `timeRangeEvent()` and\n`indexedEvent()`\n\nExample 1:\n```\nconst e = event(time(new Date(1487983075328)), Immutable.Map({ name: \"bob\" }));\n```\n\nExample 2:\n```\n// An event for a particular day with indexed key\nconst e = event(index(\"1d-12355\"), Immutable.Map({ value: 42 }));\n```\n\nExample 3:\n```\n// Outage event spans a timerange\nconst e = event(timerange(beginTime, endTime), Immutable.Map({ ticket: \"A1787383\" }));\n```\n\nExample 4:\n```\nconst e = timeEvent({\n    time: 1487983075328,\n    data: { a: 2, b: 3 }\n});\n"
									},
									"parameters": [
										{
											"id": 1817,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										},
										{
											"id": 1818,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 405,
									"character": 5
								}
							]
						},
						{
							"id": 1815,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 447,
									"character": 48
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 1814,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 447,
									"character": 29
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"name": "Key",
									"id": 2
								}
							}
						},
						{
							"id": 1844,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1845,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The begin time of the `Event`. If the key of the `Event` is a `Time` then\nthe begin and end time of the `Event` will be the same as the `Event`\ntimestamp."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 586,
									"character": 16
								}
							]
						},
						{
							"id": 1861,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1862,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapses an array of fields, specified in the `fieldSpecList`, into a single\nfield named `fieldName` using the supplied reducer function. Optionally you can keep\nall existing fields by supplying the `append` argument as `true`.",
										"text": "Example:\n```\nconst t = time(new Date(\"2015-04-22T03:30:00Z\"));\nconst e = event(t, Immutable.Map({ in: 5, out: 6, status: \"ok\" }));\nconst result = e.collapse([\"in\", \"out\"], \"total\", sum(), true);\n// { \"in\": 5, \"out\": 6, \"status\": \"ok\", \"total\": 11 } }\n```\n"
									},
									"parameters": [
										{
											"id": 1863,
											"name": "fieldSpecList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1864,
											"name": "fieldName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1865,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 1866,
											"name": "append",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 672,
									"character": 19
								}
							]
						},
						{
							"id": 1846,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1847,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The end time of the `Event`. If the key of the `Event` is a `Time` then\nthe begin and end time of the `Event` will be the same as the `Event`\ntimestamp."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 595,
									"character": 14
								}
							]
						},
						{
							"id": 1828,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1829,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the `value` of a specific field within the `Event`.",
										"text": "You can refer to a fields with one of the following notations:\n * (undefined) -> \"value\"\n * \"temperature\"\n * \"path.to.deep.data\"\n * [\"path\", \"to\", \"deep\", \"data\"].\n\nExample 1:\n```\nconst e = event(index(\"1d-12355\"), Immutable.Map({ value: 42 }));\ne.get(\"value\"); // 42\n```\n\nExample 2:\n```\nconst t = time(new Date(\"2015-04-22T03:30:00Z\"));\nconst e = event(t, Immutable.fromJS({ a: 5, b: { c: 6 } }));\ne.get(\"b.c\"); // 6\n```\n\nNote: the default `field` is \"value\".\n"
									},
									"parameters": [
										{
											"id": 1830,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 510,
									"character": 14
								}
							]
						},
						{
							"id": 1823,
							"name": "getData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1824,
									"name": "getData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the data associated with this event in the form\nof an `Immutable.Map`. This is infact an accessor for the internal\nrepresentation of data in this `Event`."
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 473,
									"character": 18
								}
							]
						},
						{
							"id": 1819,
							"name": "getKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1820,
									"name": "getKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the key this `Event`.",
										"text": "The result is of type T (a `Time`, `TimeRange` or `Index`), depending on\nwhat the `Event` was constructed with.\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 457,
									"character": 17
								}
							]
						},
						{
							"id": 1848,
							"name": "index",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1849,
									"name": "index",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 599,
									"character": 16
								}
							]
						},
						{
							"id": 1850,
							"name": "indexAsString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1851,
									"name": "indexAsString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 603,
									"character": 24
								}
							]
						},
						{
							"id": 1835,
							"name": "isValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1836,
									"name": "isValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Will return false if the value for the specified `fields` in this `Event` is\neither `undefined`, `NaN` or `null` for the given field or fields. This\nserves as a determination of a \"missing\" value within a `TimeSeries` or\n`Collection`."
									},
									"parameters": [
										{
											"id": 1837,
											"name": "fields",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 544,
									"character": 18
								}
							]
						},
						{
							"id": 1821,
							"name": "keyType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1822,
									"name": "keyType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the label of the key"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 464,
									"character": 18
								}
							]
						},
						{
							"id": 1867,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1868,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Selects specific fields of an `Event` using the `fields` array of strings\nand returns a new event with just those fields.",
										"text": "Example:\n```\nconst t = time(new Date(\"2015-04-22T03:30:00Z\"));\nconst e = event(t, Immutable.Map({ a: 5, b: 6, c: 7 }));\nconst result = e.select([\"a\", \"b\"]);  // data is { a: 5, b: 6 }}\n```\n"
									},
									"parameters": [
										{
											"id": 1869,
											"name": "fields",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 695,
									"character": 17
								}
							]
						},
						{
							"id": 1831,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1832,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a new `value` on the `Event` for the given `field`, and return a new `Event`.",
										"text": "You can refer to a `field` with one of the following notations:\n * (undefined) -> \"value\"\n * \"temperature\"\n * \"path.to.deep.data\"\n * [\"path\", \"to\", \"deep\", \"data\"].\n\n`value` is the new value to set on for the given `field` on the `Event`.\n\n```\nconst t = time(new Date(1487983075328));\nconst initial = event(t, Immutable.Map({ name: \"bob\" }));\nconst modified = e.set(\"name\", \"fred\");\nmodified.toString() // {\"time\": 1487983075328, \"data\": {\"name\":\"fred\"} }\n```\n"
									},
									"parameters": [
										{
											"id": 1833,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1834,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 533,
									"character": 14
								}
							]
						},
						{
							"id": 1825,
							"name": "setData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1826,
									"name": "setData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets new `data` associated with this event. The new `data` is supplied\nin the form of an `Immutable.Map`. A new `Event<T>` will be returned\ncontaining this new data, but having the same key."
									},
									"parameters": [
										{
											"id": 1827,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 482,
									"character": 18
								}
							]
						},
						{
							"id": 1852,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1853,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` over which this `Event` occurs. If this `Event`\nhas a `Time` key then the duration of this range will be 0."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 611,
									"character": 20
								}
							]
						},
						{
							"id": 1854,
							"name": "timerangeAsUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1855,
									"name": "timerangeAsUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Shortcut for `timerange()` followed by `toUTCString()`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 618,
									"character": 31
								}
							]
						},
						{
							"id": 1842,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1843,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the timestamp of the `Event`.",
										"text": "This a convenience for calling `Event.getKey()` followed by `timestamp()`.\n"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 577,
									"character": 20
								}
							]
						},
						{
							"id": 1856,
							"name": "timestampAsUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1857,
									"name": "timestampAsUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Shortcut for `timestamp()` followed by `toUTCString()`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 625,
									"character": 31
								}
							]
						},
						{
							"id": 1838,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1839,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the `Event` into a standard Javascript object"
									},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 557,
									"character": 17
								}
							]
						},
						{
							"id": 1858,
							"name": "toPoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1859,
									"name": "toPoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array containing the key in the first element and then the data map\nexpressed as JSON as the second element. This is the method that is used by\na `TimeSeries` to build its wireformat representation."
									},
									"parameters": [
										{
											"id": 1860,
											"name": "columns",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 634,
									"character": 18
								}
							]
						},
						{
							"id": 1840,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1841,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the `Event` to a string"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 568,
									"character": 19
								}
							]
						},
						{
							"id": 1807,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1808,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function that takes a `Immutable.List` of events, a `reducer` function and a\n`fieldSpec` (field or list of fields) and returns an aggregated result in the form\nof a new Event, for each column.",
										"text": "The reducer is of the form:\n```\n(values: number[]) => number\n```\n\nExample:\n```\nconst result = Event.aggregate(EVENT_LIST, avg(), [\"in\", \"out\"]);\n// result = { in: 5, out: 14.25 }\n```\n"
									},
									"typeParameter": [
										{
											"id": 1809,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1810,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "K",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1811,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 1812,
											"name": "multiFieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ValueMap",
										"id": 1449
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 391,
									"character": 27
								}
							]
						},
						{
							"id": 1788,
							"name": "combine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1789,
									"name": "combine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to combine multiple `Event`s together into a new array\nof events, one `Event` for each key of the source events. The list of\n`Events` should be specified as an array or `Immutable.List<Event<K>>`.",
										"text": "Combining acts on the fields specified in the `fieldSpec` (or all\nfields) and uses the `reducer` function supplied to take the multiple\nvalues associated with the key and reduce them down to a single value.\n\nThe return result will be an `Immutable.List<Event<K>>` of the same type K\nas the input.\n\nExample:\n```\nconst t = time(\"2015-04-22T03:30:00Z\");\nconst events = [\n    event(t, Immutable.Map({ a: 5, b: 6, c: 7 })),\n    event(t, Immutable.Map({ a: 2, b: 3, c: 4 })),\n    event(t, Immutable.Map({ a: 1, b: 2, c: 3 }))\n];\nconst result = Event.combine(Immutable.List(events), sum());\n// result[0] is {a: 8, b: 11, c: 14 }\n```\nSee also: `TimeSeries.timeSeriesListSum()`\n"
									},
									"typeParameter": [
										{
											"id": 1790,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1791,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "K",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1792,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 1793,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 232,
									"character": 25
								}
							]
						},
						{
							"id": 1794,
							"name": "combiner",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1795,
									"name": "combiner",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static method that returns a function that will take a list of `Event`'s\nand combine them together using the `fieldSpec` and reducer function provided.\nThis is used as an event reducer for merging multiple `TimeSeries` together\nwith `timeSeriesListReduce()`."
									},
									"typeParameter": [
										{
											"id": 1796,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1797,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1798,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1799,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1800,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1801,
															"name": "events",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "K",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Key",
																		"id": 2
																	}
																]
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "event.ts",
													"line": 316,
													"character": 6
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 313,
									"character": 19
								}
							]
						},
						{
							"id": 1767,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1768,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Do the two supplied events contain the same data, even if they are not\nthe same instance? Uses `Immutable.is()` to compare the event data and\nthe key."
									},
									"parameters": [
										{
											"id": 1769,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1770,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 69,
									"character": 20
								}
							]
						},
						{
							"id": 1771,
							"name": "isDuplicate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1772,
									"name": "isDuplicate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two supplied events are duplicates of each other.",
										"text": "Duplicated is defined as the keys of the `Event`s being the same.\nThis is the case with incoming events sometimes where a second event\nis either known to be the same (but duplicate) of the first, or\nsupersedes the first.\n\nYou can also pass in `false` for `ignoreValues` and get a full compare,\nincluding the data of the event, thus ignoring the supersede case.\n\nExample:\n```\nconst e1 = event(t, Immutable.Map({ a: 5, b: 6, c: 7 }));\nconst e2 = event(t, Immutable.Map({ a: 5, b: 6, c: 7 }));\nconst e3 = event(t, Immutable.Map({ a: 100, b: 6, c: 7 }));\n\nEvent.isDuplicate(e1, e2)        // true\nEvent.isDuplicate(e1, e3)        // true\nEvent.isDuplicate(e1, e3, false) // false\nEvent.isDuplicate(e1, e2, false) // false\n```\n"
									},
									"parameters": [
										{
											"id": 1773,
											"name": "event1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1774,
											"name": "event2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1775,
											"name": "ignoreValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 99,
									"character": 29
								}
							]
						},
						{
							"id": 1802,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1803,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function that takes a list of `Events<T>` and makes a map from each\nfield names to an array of values, one value for each Event.",
										"text": "Example:\n```\nconst events = [\n    event(t1, Immutable.Map({in: 2, out: 11 })),\n    event(t2, Immutable.Map({in: 4, out: 13 })),\n    event(t3, Immutable.Map({in: 6, out: 15 })),\n    event(t4, Immutable.Map({in: 8, out: 17 }))\n];\n\nconst fieldMapping = Event.map(events, [\"in\", \"out\"]);\n// { in: [ 2, 4, 6, 8 ], out: [ 11, 13, 15, 18 ] }\n```\n"
									},
									"typeParameter": [
										{
											"id": 1804,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1805,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "K",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1806,
											"name": "multiFieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ValueListMap",
										"id": 1446
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 337,
									"character": 21
								},
								{
									"fileName": "event.ts",
									"line": 341,
									"character": 21
								}
							]
						},
						{
							"id": 1776,
							"name": "merge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1777,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Merges multiple `Event`'s together into a new array of `Event`s, one\nfor each key of the source events. Merging is done on the data of\neach `Event`. Values from later events in the list overwrite\nearlier values if fields conflict.",
										"text": "Common use cases:\n  * append events of different timestamps\n    e.g. merge earlier events with later events\n  * merge in events with one field to events with another field\n    e.g. combine events with a field \"in\" with another list of events\n         with a field \"out\" to get events with both \"in\" and \"out\"\n  * merge in events that supersede the previous events\n\nEvents in the supplied list need to be of homogeneous types\n\nSee also:\n * `TimeSeries.timeSeriesListMerge()` if what you have is a\n`TimeSeries`. That uses this code but with a friendlier API.\n\nExample:\n```\nconst t = time(new Date(\"2015-04-22T03:30:00Z\"));\nconst event1 = event(t, Immutable.Map({ a: 5, b: 6 }));\nconst event2 = event(t, Immutable.Map({ c: 2 }));\nconst merged = Event.merge(Immutable.List([event1, event2]));\nmerged.get(0).get(\"a\");    // 5\nmerged.get(0).get(\"b\");    // 6\nmerged.get(0).get(\"c\");    // 2\n"
									},
									"typeParameter": [
										{
											"id": 1778,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1779,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "K",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1780,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 144,
									"character": 23
								}
							]
						},
						{
							"id": 1781,
							"name": "merger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1782,
									"name": "merger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a function that will take a list of `Event`s and merge them\ntogether using the `fieldSpec` provided. This is used as a `reducer` for\nmerging multiple `TimeSeries` together with `TimeSeries.timeSeriesListMerge()`."
									},
									"typeParameter": [
										{
											"id": 1783,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1784,
											"name": "deep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1785,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1786,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1787,
															"name": "events",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "K",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Key",
																		"id": 2
																	}
																]
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "event.ts",
													"line": 203,
													"character": 6
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "event.ts",
									"line": 201,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1813
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1815,
								1814
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1844,
								1861,
								1846,
								1828,
								1823,
								1819,
								1848,
								1850,
								1835,
								1821,
								1867,
								1831,
								1825,
								1852,
								1854,
								1842,
								1856,
								1838,
								1858,
								1840,
								1807,
								1788,
								1794,
								1767,
								1771,
								1802,
								1776,
								1781
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 63,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1763
						}
					]
				},
				{
					"id": 1876,
					"name": "IndexedEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1878,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 725,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1879,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1880,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1881,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 725,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1877,
							"name": "index",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 724,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1878,
								1877
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 723,
							"character": 35
						}
					]
				},
				{
					"id": 1870,
					"name": "TimeEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1872,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 707,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1873,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1874,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1875,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 707,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1871,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 706,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1872,
								1871
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 705,
							"character": 32
						}
					]
				},
				{
					"id": 1882,
					"name": "TimeRangeEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1884,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 743,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1885,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1886,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1887,
													"name": "data",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "event.ts",
											"line": 743,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1883,
							"name": "timerange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "event.ts",
									"line": 742,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1884,
								1883
							]
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 741,
							"character": 37
						}
					]
				},
				{
					"id": 1906,
					"name": "event",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1907,
							"name": "event",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1908,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1909,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								},
								{
									"id": 1910,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 759,
							"character": 14
						}
					]
				},
				{
					"id": 1894,
					"name": "indexedEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1895,
							"name": "indexedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1896,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IndexedEventObject",
										"id": 1876
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								]
							}
						},
						{
							"id": 1897,
							"name": "indexedEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1898,
									"name": "idx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								},
								{
									"id": 1899,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 728,
							"character": 21
						},
						{
							"fileName": "event.ts",
							"line": 729,
							"character": 21
						},
						{
							"fileName": "event.ts",
							"line": 730,
							"character": 21
						}
					]
				},
				{
					"id": 1888,
					"name": "timeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1889,
							"name": "timeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1890,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeEventObject",
										"id": 1870
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								]
							}
						},
						{
							"id": 1891,
							"name": "timeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1892,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								},
								{
									"id": 1893,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 710,
							"character": 18
						},
						{
							"fileName": "event.ts",
							"line": 711,
							"character": 18
						},
						{
							"fileName": "event.ts",
							"line": 712,
							"character": 18
						}
					]
				},
				{
					"id": 1900,
					"name": "timeRangeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1901,
							"name": "timeRangeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1902,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeRangeEventObject",
										"id": 1882
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								]
							}
						},
						{
							"id": 1903,
							"name": "timeRangeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1904,
									"name": "idx",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								},
								{
									"id": 1905,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "event.ts",
							"line": 746,
							"character": 23
						},
						{
							"fileName": "event.ts",
							"line": 747,
							"character": 23
						},
						{
							"fileName": "event.ts",
							"line": 748,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1765
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1876,
						1870,
						1882
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1906,
						1894,
						1888,
						1900
					]
				}
			],
			"sources": [
				{
					"fileName": "event.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1939,
			"name": "\"exports\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/exports.ts",
			"sources": [
				{
					"fileName": "exports.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 149,
			"name": "\"fill\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/fill.ts",
			"children": [
				{
					"id": 150,
					"name": "Fill",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A processor that fills missing/invalid values in the `Event` with\nnew values (zero, interpolated or padded).",
						"text": "When doing a linear fill, Filler instances should be chained.\n"
					},
					"typeParameter": [
						{
							"id": 151,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 159,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 160,
									"name": "new Fill",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 161,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 1482
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Fill",
										"id": 150
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 37,
									"character": 29
								}
							]
						},
						{
							"id": 152,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 29,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 156,
							"name": "_keyCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 35,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 157,
							"name": "_lastGoodLinear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 36,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 154,
							"name": "_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 31,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 158,
							"name": "_linearFillCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 37,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 153,
							"name": "_method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 30,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "FillMethod",
								"id": 1462
							}
						},
						{
							"id": 155,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 34,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 174,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 175,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the fill operation on the `Event` and return filled\nin events"
									},
									"parameters": [
										{
											"id": 176,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 302,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 58
							}
						},
						{
							"id": 162,
							"name": "constFill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 163,
									"name": "constFill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process and fill the values at the paths as apropos when the fill\nmethod is either pad or zero."
									},
									"parameters": [
										{
											"id": 164,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 65,
									"character": 13
								}
							]
						},
						{
							"id": 171,
							"name": "interpolateEventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 172,
									"name": "interpolateEventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The fundamental linear interpolation workhorse code. Process\na list of `Event`'s and return a new list. Does a pass for\nevery `fieldSpec`.",
										"text": "This is abstracted out like this because we probably want\nto interpolate a list of `Event`'s not tied to a `Collection`.\nA Pipeline result list, etc etc.\n\n"
									},
									"parameters": [
										{
											"id": 173,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 223,
									"character": 24
								}
							]
						},
						{
							"id": 165,
							"name": "isValidLinearEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 166,
									"name": "isValidLinearEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Check to see if an `Event` has good values when doing\nlinear fill since we need to keep a completely intact\nevent for the values.\nWhile we are inspecting the data payload, make a note if\nany of the paths are pointing at a list. Then it\nwill trigger that filling code later."
									},
									"parameters": [
										{
											"id": 167,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 123,
									"character": 22
								}
							]
						},
						{
							"id": 168,
							"name": "linearFill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 169,
									"name": "linearFill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This handles the linear filling. It returns a list of\nzero or more `Event`'s to be emitted.",
										"text": "If an `Event` is valid:\n * it has valid values for all of the field paths\n * it is cached as \"last good\" and returned to be emitted.\nThe return value is then a list of one `Event`.\n\nIf an `Event` has invalid values, it is cached to be\nprocessed later and an empty list is returned.\n\nAdditional invalid `Event`'s will continue to be cached until\na new valid value is seen, then the cached events will\nbe filled and returned. That will be a list of indeterminate\nlength.\n"
									},
									"parameters": [
										{
											"id": 170,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fill.ts",
									"line": 160,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								159
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								152,
								156,
								157,
								154,
								158,
								153,
								155
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								174,
								162,
								171,
								165,
								168
							]
						}
					],
					"sources": [
						{
							"fileName": "fill.ts",
							"line": 27,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 55,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						150
					]
				}
			],
			"sources": [
				{
					"fileName": "fill.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 202,
			"name": "\"functions\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/functions.ts",
			"children": [
				{
					"id": 203,
					"name": "InterpolationType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 206,
							"name": "higher",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 310,
									"character": 10
								}
							]
						},
						{
							"id": 204,
							"name": "linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 308,
									"character": 10
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 205,
							"name": "lower",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 309,
									"character": 9
								}
							]
						},
						{
							"id": 208,
							"name": "midpoint",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 312,
									"character": 12
								}
							]
						},
						{
							"id": 207,
							"name": "nearest",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 311,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								206,
								204,
								205,
								208,
								207
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 307,
							"character": 29
						}
					]
				},
				{
					"id": 230,
					"name": "avg",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 231,
							"name": "avg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an `avg()` function. i.e. returns a function that takes a list\nof values and returns the average of those.",
								"text": "Example:\n```\nimport { avg } from \"pondjs\";\nconst aggregationFunction = avg()\nconst result = aggregationFunction([3, 5, 6]) // ~4.66666\n```\n\nOptionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe average calculation. Other possibilities are:\n* `propagateMissing` - which will cause the resulting average to be null if the values\n                       contain a missing value\n* `zeroMissing` - will replace missing values with a zero, thus missing values will bring\n                  the average down\n"
							},
							"parameters": [
								{
									"id": 232,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 123,
							"character": 19
						}
					]
				},
				{
					"id": 239,
					"name": "count",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "count",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `count()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe count. Other possibilities are:\n* `propagateMissing` - which will cause the count itself to be null if the\n                        values contain a missing value\n"
							},
							"parameters": [
								{
									"id": 241,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 196,
							"character": 21
						}
					]
				},
				{
					"id": 248,
					"name": "difference",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 249,
							"name": "difference",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `difference()` function, i.e. a function that returns\nthe difference between the `min` and `max` values.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n* `propagateMissing` - which will cause the min itself to be null if the\n                        values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 250,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 258,
							"character": 26
						}
					]
				},
				{
					"id": 242,
					"name": "first",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 243,
							"name": "first",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `first()` function, i.e. a function that returns the first\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the first non-missing value. Other\npossibilities are:\n* `keepMissing` - to return the first value, regardless of if it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 244,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 216,
							"character": 21
						}
					]
				},
				{
					"id": 212,
					"name": "ignoreMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"comment": {
						"shortText": "Filters out any missing values (`null`, `undefined` or `NaN`) from the input values"
					},
					"signatures": [
						{
							"id": 213,
							"name": "ignoreMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Filters out any missing values (`null`, `undefined` or `NaN`) from the input values"
							},
							"parameters": [
								{
									"id": 214,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 28,
							"character": 19
						}
					]
				},
				{
					"id": 224,
					"name": "keep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 225,
							"name": "keep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Like `first()` except it will return null if not all the values are\nthe same. This can be used to transfer a value when doing aggregation.",
								"text": "For instance you might \"group by\" the 'type', then `avg` the 'value', but\nyou want to results to include the type. So you would `keep()` the type\nand `avg()` the value.\n"
							},
							"parameters": [
								{
									"id": 226,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 59,
							"character": 20
						}
					]
				},
				{
					"id": 209,
					"name": "keepMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"comment": {
						"shortText": "A pass through filter, keeps the input values just as they were."
					},
					"signatures": [
						{
							"id": 210,
							"name": "keepMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A pass through filter, keeps the input values just as they were."
							},
							"parameters": [
								{
									"id": 211,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 23,
							"character": 17
						}
					]
				},
				{
					"id": 245,
					"name": "last",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 246,
							"name": "last",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `last()` function, i.e. a function that returns the list\nvalue in the supplied values list.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe list, i.e to find the last non-missing value. Other\npossibilities are:\n* `keepMissing` - to return the last value, regardless of if it is a missing value or not.\n"
							},
							"parameters": [
								{
									"id": 247,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 236,
							"character": 20
						}
					]
				},
				{
					"id": 233,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 234,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a `max()` function.  i.e. returns a function that takes a list\nof values and returns the average of those.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe maximum search. Other possibilities are:\n* `propagateMissing` - which will cause the max itself to be null if the values\n                       contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 235,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 151,
							"character": 19
						}
					]
				},
				{
					"id": 251,
					"name": "median",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 252,
							"name": "median",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the `median()` function, i.e. a function that returns\nthe median of the values supplied to it."
							},
							"parameters": [
								{
									"id": 253,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 272,
							"character": 22
						}
					]
				},
				{
					"id": 236,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 237,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a `min()` function.",
								"text": "Optionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe minimum search. Other possibilities are:\n* `propagateMissing` - which will cause the min itself to be null if the\n                        values contain a missing value\n* `zeroMissing` - will replace missing values with a zero\n"
							},
							"parameters": [
								{
									"id": 238,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 174,
							"character": 19
						}
					]
				},
				{
					"id": 221,
					"name": "noneIfEmpty",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"comment": {
						"shortText": "If the input values are an empty array, return `null`, otherwise return\nthe input values."
					},
					"signatures": [
						{
							"id": 222,
							"name": "noneIfEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If the input values are an empty array, return `null`, otherwise return\nthe input values."
							},
							"parameters": [
								{
									"id": 223,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 49,
							"character": 17
						}
					]
				},
				{
					"id": 257,
					"name": "percentile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 258,
							"name": "percentile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `percentile` function within the a values list.",
								"text": "The parameters controlling the function:\n * `q` - The percentile (should be between 0 and 100), e.g q=75 for 75th percentile.\n * `interp` - Specifies the interpolation method to use when the desired\n   quantile lies between two data points.\n            Options are:\n             * linear: i + (j - i) * fraction, where fraction is\n               the fractional part of the index surrounded by i and j.\n             * lower: i.\n             * higher: j.\n             * nearest: i or j whichever is nearest.\n             * midpoint: (i + j) / 2.\n * `clean` - Strategy to use when encountering missing data:\n             * `propagateMissing` - which will cause the min\n                itself to be null if the values contain a\n                missing value\n             * `zeroMissing` - will replace missing values\n                with a zero\n"
							},
							"parameters": [
								{
									"id": 259,
									"name": "q",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 260,
									"name": "interp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "InterpolationType",
										"id": 203
									},
									"defaultValue": " InterpolationType.linear"
								},
								{
									"id": 261,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 336,
							"character": 26
						}
					]
				},
				{
					"id": 218,
					"name": "propagateMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"comment": {
						"shortText": "Scans the input values for missing values (`null`, `undefined` or `NaN`) and\nreturns `null` if one or more exist, otherwise returns the original values. An\nexample of doing this might be that you are summing values of events in\nan hour, but if you are missing any values you don't want do the sum at all,\nyou want to say that for that hour the sum is unknown."
					},
					"signatures": [
						{
							"id": 219,
							"name": "propagateMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Scans the input values for missing values (`null`, `undefined` or `NaN`) and\nreturns `null` if one or more exist, otherwise returns the original values. An\nexample of doing this might be that you are summing values of events in\nan hour, but if you are missing any values you don't want do the sum at all,\nyou want to say that for that hour the sum is unknown."
							},
							"parameters": [
								{
									"id": 220,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 42,
							"character": 22
						}
					]
				},
				{
					"id": 254,
					"name": "stdev",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 255,
							"name": "stdev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that returns a `stdev()` function, i.e. a function\nthat returns the standard deviation of the values supplied to it."
							},
							"parameters": [
								{
									"id": 256,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 294,
							"character": 21
						}
					]
				},
				{
					"id": 227,
					"name": "sum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 228,
							"name": "sum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `sum()` function, i.e. returns a function that takes a list\nof values and returns their total.",
								"text": "Example:\n```\nimport { sum } from \"pondjs\";\nconst aggregationFunction = sum()\nconst result = aggregationFunction([3, 5, 6]) // 14\n```\n\nOptionally you can specify the method by which unclean values\nare treated. The default is to exclude missing values from\nthe sum calculation. Other possibilities are:\n* `propagateMissing` - which will cause the sum itself to be null if the\n                       values contain a missing value\n* `zeroMissing` - will replace missing values with a zero, which for a sum\n                  is the same as excluding those values\n"
							},
							"parameters": [
								{
									"id": 229,
									"name": "clean",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ignoreMissing",
										"id": 213
									},
									"defaultValue": " filter.ignoreMissing"
								}
							],
							"type": {
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 94,
							"character": 19
						}
					]
				},
				{
					"id": 215,
					"name": "zeroMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"comment": {
						"shortText": "Replaces any missing value (`null`, `undefined` or `NaN`) with the value `0`"
					},
					"signatures": [
						{
							"id": 216,
							"name": "zeroMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces any missing value (`null`, `undefined` or `NaN`) with the value `0`"
							},
							"parameters": [
								{
									"id": 217,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 33,
							"character": 17
						}
					]
				},
				{
					"id": 262,
					"name": "filter",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 264,
							"name": "ignoreMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 389,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ignoreMissing",
								"id": 213
							}
						},
						{
							"id": 263,
							"name": "keepMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 388,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "keepMissing",
								"id": 210
							}
						},
						{
							"id": 267,
							"name": "noneIfEmpty",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 392,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "noneIfEmpty",
								"id": 222
							}
						},
						{
							"id": 266,
							"name": "propagateMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 391,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "propagateMissing",
								"id": 219
							}
						},
						{
							"id": 265,
							"name": "zeroMissing",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions.ts",
									"line": 390,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "zeroMissing",
								"id": 216
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								264,
								263,
								267,
								266,
								265
							]
						}
					],
					"sources": [
						{
							"fileName": "functions.ts",
							"line": 387,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						203
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						230,
						239,
						248,
						242,
						212,
						224,
						209,
						245,
						233,
						251,
						236,
						221,
						257,
						218,
						254,
						227,
						215
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						262
					]
				}
			],
			"sources": [
				{
					"fileName": "functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1720,
			"name": "\"groupedcollection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/groupedcollection.ts",
			"children": [
				{
					"id": 1725,
					"name": "GroupedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents an association of group names to `Collection`s. Typically\nthis is the resulting representation of performing a `groupBy()` on\na `Collection`."
					},
					"typeParameter": [
						{
							"id": 1726,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1728,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`. This grouping\nis represented as a map from a string group name to a `Collection`.",
								"text": "While you could create a `GroupedCollection` using its constructor, or\nthe `grouped()` factory function, however more typically this is\nthe result of a `groupBy()` on a `Collection`.\n\nGrouping is not currently supported for streaming, if you need that it is most\nlikely at the input end of a processing chain and the best approach is to just\nmanually direct events into different chains based on the group.\n\nExample:\n```\nconst eventCollection = new Collection(\n    Immutable.List([\n        event(time(\"2015-04-22T02:28:00Z\"), map({ team: \"raptors\", score: 3 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"raptors\", score: 4 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"raptors\", score: 5 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"wildcats\", score: 3 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"wildcats\", score: 4 })),\n        event(time(\"2015-04-22T02:31:00Z\"), map({ team: \"wildcats\", score: 6 }))\n     ])\n );\n const everyThirtyMinutes = window(duration(\"30m\"));\n const windowedCollection = eventCollection\n     .groupBy(\"team\")\n     .window({ window: everyThirtyMinutes });\n ```\nIn this example the result of the `.groupBy()` will be the `GroupedCollection`\nand the result of calling `window()` on this will be a `WindowedCollection`.\n"
							},
							"signatures": [
								{
									"id": 1729,
									"name": "new GroupedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`. This grouping\nis represented as a map from a string group name to a `Collection`.",
										"text": "While you could create a `GroupedCollection` using its constructor, or\nthe `grouped()` factory function, however more typically this is\nthe result of a `groupBy()` on a `Collection`.\n\nGrouping is not currently supported for streaming, if you need that it is most\nlikely at the input end of a processing chain and the best approach is to just\nmanually direct events into different chains based on the group.\n\nExample:\n```\nconst eventCollection = new Collection(\n    Immutable.List([\n        event(time(\"2015-04-22T02:28:00Z\"), map({ team: \"raptors\", score: 3 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"raptors\", score: 4 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"raptors\", score: 5 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"wildcats\", score: 3 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"wildcats\", score: 4 })),\n        event(time(\"2015-04-22T02:31:00Z\"), map({ team: \"wildcats\", score: 6 }))\n     ])\n );\n const everyThirtyMinutes = window(duration(\"30m\"));\n const windowedCollection = eventCollection\n     .groupBy(\"team\")\n     .window({ window: everyThirtyMinutes });\n ```\nIn this example the result of the `.groupBy()` will be the `GroupedCollection`\nand the result of calling `window()` on this will be a `WindowedCollection`.\n"
									},
									"parameters": [
										{
											"id": 1730,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "SortedCollection",
														"id": 915,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725
									}
								},
								{
									"id": 1731,
									"name": "new GroupedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new Grouping from a `fieldSpec` and a `Collection`. This grouping\nis represented as a map from a string group name to a `Collection`.",
										"text": "While you could create a `GroupedCollection` using its constructor, or\nthe `grouped()` factory function, however more typically this is\nthe result of a `groupBy()` on a `Collection`.\n\nGrouping is not currently supported for streaming, if you need that it is most\nlikely at the input end of a processing chain and the best approach is to just\nmanually direct events into different chains based on the group.\n\nExample:\n```\nconst eventCollection = new Collection(\n    Immutable.List([\n        event(time(\"2015-04-22T02:28:00Z\"), map({ team: \"raptors\", score: 3 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"raptors\", score: 4 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"raptors\", score: 5 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"wildcats\", score: 3 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"wildcats\", score: 4 })),\n        event(time(\"2015-04-22T02:31:00Z\"), map({ team: \"wildcats\", score: 6 }))\n     ])\n );\n const everyThirtyMinutes = window(duration(\"30m\"));\n const windowedCollection = eventCollection\n     .groupBy(\"team\")\n     .window({ window: everyThirtyMinutes });\n ```\nIn this example the result of the `.groupBy()` will be the `GroupedCollection`\nand the result of calling `window()` on this will be a `WindowedCollection`.\n"
									},
									"parameters": [
										{
											"id": 1732,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"name": "GroupingFunction",
														"id": 1753,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1733,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 74,
									"character": 70
								},
								{
									"fileName": "groupedcollection.ts",
									"line": 108,
									"character": 75
								},
								{
									"fileName": "groupedcollection.ts",
									"line": 112,
									"character": 6
								}
							]
						},
						{
							"id": 1727,
							"name": "collections",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 74,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 1737,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1738,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregate per grouping, essentially forming a map from the group name\nto the aggregate of the former `Collection` associated with that group name.",
										"text": "Example:\n```\nconst eventCollection = new Collection(\n    Immutable.List([\n        event(time(\"2015-04-22T02:28:00Z\"), map({ team: \"raptors\", score: 3 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"raptors\", score: 4 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"raptors\", score: 5 })),\n        event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"wildcats\", score: 3 })),\n        event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"wildcats\", score: 4 })),\n        event(time(\"2015-04-22T02:31:00Z\"), map({ team: \"wildcats\", score: 6 }))\n    ])\n);\n\nconst rolledUp = eventCollection\n    .groupBy(\"team\")\n    .aggregate({\n        team: [\"team\", keep()],\n        total: [\"score\", sum()]\n    });\n\nconst raptorsTotal = rolledUp.get(\"raptors\").get(\"total\");   // 12\nconst wildcatsTotal = rolledUp.get(\"wildcats\").get(\"total\"); // 13\n```\n"
									},
									"parameters": [
										{
											"id": 1739,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 1721,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 170,
									"character": 20
								}
							]
						},
						{
							"id": 1747,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1748,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the `align()` method on each grouped `Collection`."
									},
									"parameters": [
										{
											"id": 1749,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 237,
									"character": 16
								}
							]
						},
						{
							"id": 1742,
							"name": "flatten",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1743,
									"name": "flatten",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forms a single `Collection` from this `GroupedCollection`. That\n`Collection` will containing all `Event`s in all the previously\ngrouped `Collection`s."
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 208,
									"character": 18
								}
							]
						},
						{
							"id": 1734,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1735,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the `Collection` contained in the `grouping` specified."
									},
									"parameters": [
										{
											"id": 1736,
											"name": "grouping",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 138,
									"character": 14
								}
							]
						},
						{
							"id": 1750,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1751,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the `rate()` method on each grouped `Collection`."
									},
									"parameters": [
										{
											"id": 1752,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 247,
									"character": 15
								}
							]
						},
						{
							"id": 1740,
							"name": "ungroup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1741,
									"name": "ungroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Forms a single group from this `GroupedCollection`, returning a new\n`GroupedCollection` with a single key `_` mapping to a `Collection`\ncontaining all `Event`s in all the previous `Collection`s."
									},
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 194,
									"character": 18
								}
							]
						},
						{
							"id": 1744,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1745,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Further groups this `GroupedCollection` per window, returning a\n`WindowedCollection`. This allows you then to first `groupBy()`\na `Collection` and then further group by a window.",
										"text": "The options are passed as a `WindowOptions` structure, but essentially\nin the context of chaining `Collections` together this really just needs\nto contain the `{ window: w }` where `w` here would be a `window` object\nof some sort.\n\nExample:\n```\nconst w = window(duration(\"30m\"));\nconst windowedCollection = eventCollection\n    .groupBy(\"team\")\n    .window({ window: w });\n```\n"
									},
									"parameters": [
										{
											"id": 1746,
											"name": "windowOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 230,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1728
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1727
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1737,
								1747,
								1742,
								1734,
								1750,
								1740,
								1744
							]
						}
					],
					"sources": [
						{
							"fileName": "groupedcollection.ts",
							"line": 73,
							"character": 30
						}
					]
				},
				{
					"id": 1721,
					"name": "AggregationSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Example:\n```\nconst spec: AggregationSpec = {\n   in_avg: [\"in\", avg(), \"bob\"],\n   out_avg: [\"out\", avg()],\n};\n```"
					},
					"typeParameter": [
						{
							"id": 1722,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 1723,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Example:\n```\nconst spec: AggregationSpec = {\n   in_avg: [\"in\", avg(), \"bob\"],\n   out_avg: [\"out\", avg()],\n};\n```"
							},
							"parameters": [
								{
									"id": 1724,
									"name": "dest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Aggregation",
								"id": 1530,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "groupedcollection.ts",
							"line": 62,
							"character": 32
						}
					]
				},
				{
					"id": 1753,
					"name": "GroupingFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "groupedcollection.ts",
							"line": 66,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1754,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1755,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1756,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "groupedcollection.ts",
									"line": 66,
									"character": 45
								}
							]
						}
					}
				},
				{
					"id": 1757,
					"name": "groupedFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1758,
							"name": "groupedFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1759,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1760,
									"name": "fieldSpec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"name": "GroupingFunction",
												"id": 1753,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 1761,
									"name": "collection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GroupedCollection",
								"id": 1725,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "groupedcollection.ts",
							"line": 255,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1725
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1721
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1753
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1757
					]
				}
			],
			"sources": [
				{
					"fileName": "groupedcollection.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1688,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/index.ts",
			"children": [
				{
					"id": 1689,
					"name": "Index",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An `Index` is a specific instance of a `Window`. For example\na `Window` may represent \"every day\", and so an `Index` would\nrepresent a specific day like last Tuesday in that case.",
						"text": "There are two basic types, determined by string format supplied\nin the constructor:\n\n* *Duration index* - the number of some unit of time\n                      (e.g. 5 minutes) since the UNIX epoch.\n* *Calendar index* - a calendar range (e.g. Oct 2014) that\n                     maybe and uneven amount of time.\n\nFor the first type, a multiplier index, an example might be:\n\n```text\n    1d-12355      // 30th Oct 2003 (GMT), the 12355th day since the\n                  // UNIX epoch\n```\n\nYou can also use seconds (e.g. 30s), minutes (e.g. 5m), hours (e.g. 1h)\nor days (e.g. 7d).\n\nFor the second type, a calendar style `Index`, here are several examples:\n\n```text\n    2003-10-30    // 30th Oct 2003\n    2014-09       // Sept 2014\n    2015          // All of the year 2015\n```\n\nA specific `TimeRange`, and associated data can be associated up based\non that string. It also allows us to represent things like months,\nwhich have variable length.\n\nIndexes also contain a timezone, which defaults to UTC. For instance if\nyou have a day 2017-08-11, then the `TimeRange` representation depends\non the timezone of that day.\n"
					},
					"children": [
						{
							"id": 1693,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Constructs a new `Index` by passing in the index string `s` and\noptionally a timezone `tz`. You can also use the `index()` factory\nfunction to construct one.",
								"text": "Example:\n```\nconst idx = index(\"5m-4135541\");\nidx.asTimerange().humanizeDuration();  // \"5 minutes\"\n```\n"
							},
							"signatures": [
								{
									"id": 1694,
									"name": "new Index",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a new `Index` by passing in the index string `s` and\noptionally a timezone `tz`. You can also use the `index()` factory\nfunction to construct one.",
										"text": "Example:\n```\nconst idx = index(\"5m-4135541\");\nidx.asTimerange().humanizeDuration();  // \"5 minutes\"\n```\n"
									},
									"parameters": [
										{
											"id": 1695,
											"name": "s",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1696,
											"name": "tz",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"Etc/UTC\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 60,
									"character": 34
								}
							]
						},
						{
							"id": 1691,
							"name": "_string",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 59,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1692,
							"name": "_timerange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 60,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 1601
							}
						},
						{
							"id": 1690,
							"name": "_tz",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "index.ts",
									"line": 58,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1708,
							"name": "asString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1709,
									"name": "asString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Alias for `toString()`"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 126,
									"character": 19
								}
							]
						},
						{
							"id": 1710,
							"name": "asTimerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1711,
									"name": "asTimerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Index` as a `TimeRange`"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 133,
									"character": 22
								}
							]
						},
						{
							"id": 1712,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1713,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the start date of the `Index`"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 140,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 1714,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1715,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end date of the `Index`"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 147,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 1699,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1700,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the timestamp as a `Date` to represent this `Index`, which in this\ncase will return the midpoint of the `TimeRange` this represents"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 88,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 1701,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1702,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Index` as JSON, which will just be its string representation\nwithin an object e.g. `{ index: 1d-1234 }`"
									},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 96,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 1705,
							"name": "toNiceString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1706,
									"name": "toNiceString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "For the calendar style `Index`, this lets you return\nthat calendar range as a human readable format, e.g. \"June, 2014\".",
										"text": "The `format` specified is a `Moment.format`.\n\nExample:\n```\nconst idx = index(\"2014-09-17\");\nidx.toNiceString(\"DD MMM YYYY\") // \"17 Sep 2014\"\n```\n"
									},
									"parameters": [
										{
											"id": 1707,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 119,
									"character": 23
								}
							]
						},
						{
							"id": 1703,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1704,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Simply returns the `Index` as its string"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 103,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 1697,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1698,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "index.ts",
									"line": 80,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1693
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1691,
								1692,
								1690
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1708,
								1710,
								1712,
								1714,
								1699,
								1701,
								1705,
								1703,
								1697
							]
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 57,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 1716,
					"name": "indexFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1717,
							"name": "indexFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1718,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1719,
									"name": "tz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Etc/UTC\""
								}
							],
							"type": {
								"type": "reference",
								"name": "Index",
								"id": 1689
							}
						}
					],
					"sources": [
						{
							"fileName": "index.ts",
							"line": 169,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1689
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1716
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"key\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/key.ts",
			"children": [
				{
					"id": 2,
					"name": "Key",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Defines the interface for all event keys"
					},
					"children": [
						{
							"id": 11,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 19,
									"character": 25
								}
							]
						},
						{
							"id": 13,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 20,
									"character": 23
								}
							]
						},
						{
							"id": 9,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 10,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 18,
									"character": 29
								}
							]
						},
						{
							"id": 5,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 6,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 16,
									"character": 26
								}
							]
						},
						{
							"id": 7,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 8,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 17,
									"character": 28
								}
							]
						},
						{
							"id": 3,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 4,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "key.ts",
									"line": 15,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								11,
								13,
								9,
								5,
								7,
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "key.ts",
							"line": 14,
							"character": 25
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Time",
							"id": 1532
						},
						{
							"type": "reference",
							"name": "TimeRange",
							"id": 1601
						},
						{
							"type": "reference",
							"name": "Index",
							"id": 1689
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "key.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1567,
			"name": "\"period\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/period.ts",
			"children": [
				{
					"id": 1568,
					"name": "Period",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Period` is a repeating time which is typically used to\neither define the repeating nature of a `Window` or to describe periodic\nboundaries of fill or align operations when doing data cleaning\non a `TimeSeries`.",
						"text": "Periods have a frequency and an offset. If there is no offset, it\nis aligned to Jan 1, 1970 00:00 UTC.\n\nTo create a repeating window, see `Window` creation.\n"
					},
					"children": [
						{
							"id": 1571,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "To define a `Period`, you need to supply the `duration` of the frequency that the\nperiod repeats on. Optionally you can specify an `offset` for the period.",
								"text": "Typically you would construct a `Period` object with the `period()` factory\nfunction, which has a chaining style to it to make it easier to read in the code.\nThere is also a more standard constructor form.\n\nExample:\n```\nconst everyFiveMinutes = period()\n    .every(duration(\"5m\"))\n    .offsetBy(time(\"2017-07-21T09:38:00.000Z\"));\n```\n"
							},
							"signatures": [
								{
									"id": 1572,
									"name": "new Period",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "To define a `Period`, you need to supply the `duration` of the frequency that the\nperiod repeats on. Optionally you can specify an `offset` for the period.",
										"text": "Typically you would construct a `Period` object with the `period()` factory\nfunction, which has a chaining style to it to make it easier to read in the code.\nThere is also a more standard constructor form.\n\nExample:\n```\nconst everyFiveMinutes = period()\n    .every(duration(\"5m\"))\n    .offsetBy(time(\"2017-07-21T09:38:00.000Z\"));\n```\n"
									},
									"parameters": [
										{
											"id": 1573,
											"name": "frequency",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Duration",
												"id": 16
											}
										},
										{
											"id": 1574,
											"name": "offset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 1568
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 33,
									"character": 28
								}
							]
						},
						{
							"id": 1569,
							"name": "_frequency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 32,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Duration",
								"id": 16
							}
						},
						{
							"id": 1570,
							"name": "_offset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "period.ts",
									"line": 33,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1581,
							"name": "every",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1582,
									"name": "every",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Chaining style specification of the `Duration` of the `Period`.\nReturns a new `Period`."
									},
									"parameters": [
										{
											"id": 1583,
											"name": "frequency",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Duration",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 1568
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 81,
									"character": 9
								}
							]
						},
						{
							"id": 1577,
							"name": "frequency",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1578,
									"name": "frequency",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the frequency part of the `Period`"
									},
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 66,
									"character": 13
								}
							]
						},
						{
							"id": 1587,
							"name": "isAligned",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1588,
									"name": "isAligned",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the `Time` supplied is aligned with this `Period`.\nIf the `Period` is every 5m then 1:35pm align (true) while 1:36 would\nnot (false)."
									},
									"parameters": [
										{
											"id": 1589,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 98,
									"character": 13
								}
							]
						},
						{
							"id": 1590,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1591,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Given a `Time`, find the next `Time` aligned to the period."
									},
									"parameters": [
										{
											"id": 1592,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 105,
									"character": 8
								}
							]
						},
						{
							"id": 1579,
							"name": "offset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1580,
									"name": "offset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the offset of the `Period`"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 73,
									"character": 10
								}
							]
						},
						{
							"id": 1584,
							"name": "offsetBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1585,
									"name": "offsetBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Chaining style specification of the offset, supplied as a `Time`.\nReturns a new `Period`."
									},
									"parameters": [
										{
											"id": 1586,
											"name": "offset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 1568
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 89,
									"character": 12
								}
							]
						},
						{
							"id": 1575,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1576,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The `Period` expressed as a string, which is either $freq or $freq-$offset\ndepending on if an offset is present."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 59,
									"character": 12
								}
							]
						},
						{
							"id": 1593,
							"name": "within",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1594,
									"name": "within",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an `Immutable.List` of `Time`s within the given `TimeRange`\nthat align with this `Period`.",
										"text": "Example:\n```\nconst range = timerange(\n    time(\"2017-07-21T09:30:00.000Z\"),\n    time(\"2017-07-21T09:45:00.000Z\")\n);\nconst everyFiveMinutes = period()\n    .every(duration(\"5m\"))\n    .offsetBy(time(\"2017-07-21T09:38:00.000Z\"));\n\nconst within = everyFiveMinutes.within(range);  // 9:33am, 9:38am, 9:43am\n```\n"
									},
									"parameters": [
										{
											"id": 1595,
											"name": "timerange",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "period.ts",
									"line": 128,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1571
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1569,
								1570
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1581,
								1577,
								1587,
								1590,
								1579,
								1584,
								1575,
								1593
							]
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 31,
							"character": 19
						}
					]
				},
				{
					"id": 1596,
					"name": "period",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1597,
							"name": "period",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A `Period` is a repeating time which is typically used in Pond to\neither define the repeating nature of a `Window`\nor to describe `Align` or `Fill` positions when doing data cleaning\non a `TimeSeries`.",
								"text": "To define a `Period`, you need to supply the `duration` of the frequency that the\nperiod repeats on. Optionally you can specify an `offset` for the period. You can\nalso use a chaining style construction.\n"
							},
							"parameters": [
								{
									"id": 1598,
									"name": "frequency",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								},
								{
									"id": 1599,
									"name": "offset",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 1568
							}
						}
					],
					"sources": [
						{
							"fileName": "period.ts",
							"line": 154,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1568
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1596
					]
				}
			],
			"sources": [
				{
					"fileName": "period.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 54,
			"name": "\"processor\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/processor.ts",
			"children": [
				{
					"id": 55,
					"name": "Processor",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Internal abstract base class for streaming chains. A `Processor` is something\nthat implements at a minimum one method: `addEvent()`. The return of that\nmethod is a list of output `Event`s.",
						"text": "`Align`, `Fill` etc are implementations of this abstract class. Those in turn\nare used jointly to implemented within the `Collection` classes. For example\n`Align` implements `Processor` to combine its own state (or past `Event`s) with\nthe incoming `Event` to output aligned `Event`s (new `Event`s that fall on\na periodic boundary). The `Align` class is then utilized in the `Collection` class\nby using it within a `flatMap` to process all `Event`s within the `Collection` into\na new set of `Event`s. It is also used when implementing stream processing that\nrequires `align` processing.\n"
					},
					"typeParameter": [
						{
							"id": 56,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 57,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 58,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 59,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 60,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 61,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "processor.ts",
									"line": 31,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								58
							]
						}
					],
					"sources": [
						{
							"fileName": "processor.ts",
							"line": 30,
							"character": 31
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Collapse",
							"id": 140
						},
						{
							"type": "reference",
							"name": "Fill",
							"id": 150
						},
						{
							"type": "reference",
							"name": "Rate",
							"id": 178
						},
						{
							"type": "reference",
							"name": "Select",
							"id": 193
						},
						{
							"type": "reference",
							"name": "Align",
							"id": 1912
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						55
					]
				}
			],
			"sources": [
				{
					"fileName": "processor.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 177,
			"name": "\"rate\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/rate.ts",
			"children": [
				{
					"id": 178,
					"name": "Rate",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` to take the derivative of the incoming `Event`s\nfor the given fields. The resulting output `Event`s will contain\nper second values.",
						"text": "Optionally you can substitute in `null` values if the rate is negative.\nThis is useful when a negative rate would be considered invalid like an\never increasing counter.\n\nTo control the rate calculation you need to specify a `RateOptions` object\nin the constuctor, which takes the following form:\n```\n{\n    fieldSpec: string | string[];\n    allowNegative?: boolean;\n}\n```\nOptions:\n * `fieldSpec` - the field to calculate the rate on\n * `allowNegative` - allow emit of negative rates\n"
					},
					"typeParameter": [
						{
							"id": 179,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 183,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 184,
									"name": "new Rate",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 185,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Rate",
										"id": 178
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 51,
									"character": 32
								}
							]
						},
						{
							"id": 181,
							"name": "_allowNegative",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 49,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 180,
							"name": "_fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 48,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 182,
							"name": "_previous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 51,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 189,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 190,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the `fill` operation on the `Event` and emit."
									},
									"parameters": [
										{
											"id": 191,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 106,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 58
							}
						},
						{
							"id": 186,
							"name": "getRate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 187,
									"name": "getRate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate a new `TimeRangeEvent` containing the rate per second\nbetween two events."
									},
									"parameters": [
										{
											"id": 188,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "rate.ts",
									"line": 69,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								183
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								181,
								180,
								182
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								189,
								186
							]
						}
					],
					"sources": [
						{
							"fileName": "rate.ts",
							"line": 46,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 55,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "reference",
									"name": "TimeRange",
									"id": 1601
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						178
					]
				}
			],
			"sources": [
				{
					"fileName": "rate.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 192,
			"name": "\"select\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/select.ts",
			"children": [
				{
					"id": 193,
					"name": "Select",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Processor` which takes a `fieldSpec` and returns a new `Event`\nwith only those selected columns."
					},
					"typeParameter": [
						{
							"id": 194,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 195,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 197,
									"name": "new Select",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 198,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Select",
										"id": 193
									}
								}
							],
							"sources": [
								{
									"fileName": "select.ts",
									"line": 25,
									"character": 60
								}
							]
						},
						{
							"id": 196,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "select.ts",
									"line": 26,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"name": "SelectOptions",
								"id": 1492
							}
						},
						{
							"id": 199,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 200,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 201,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Processor.addEvent",
										"id": 58
									}
								}
							],
							"sources": [
								{
									"fileName": "select.ts",
									"line": 29,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Processor.addEvent",
								"id": 58
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								195
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								196
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								199
							]
						}
					],
					"sources": [
						{
							"fileName": "select.ts",
							"line": 25,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Processor",
							"id": 55,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						193
					]
				}
			],
			"sources": [
				{
					"fileName": "select.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 914,
			"name": "\"sortedcollection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/sortedcollection.ts",
			"children": [
				{
					"id": 915,
					"name": "SortedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "In general, a `Collection` is a bucket of `Event`'s, with no particular order. This,\nhowever, is a sub-class of a `Collection` which always maintains time-based sorting.",
						"text": "As a result, it allows certain operations such as `bisect()` which depend on a\nknown ordering.\n\nThis is the backing structure for a `TimeSeries`. You probably want to use a\n`TimeSeries` directly.\n"
					},
					"typeParameter": [
						{
							"id": 916,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 917,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a new `Sorted Collection`"
							},
							"signatures": [
								{
									"id": 918,
									"name": "new SortedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a new `Sorted Collection`"
									},
									"parameters": [
										{
											"id": 919,
											"name": "arg1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														]
													},
													{
														"type": "reference",
														"name": "Collection",
														"id": 269,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.__constructor",
										"id": 277
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 37,
									"character": 68
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.__constructor",
								"id": 277
							}
						},
						{
							"id": 982,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 104,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection._events",
								"id": 275
							}
						},
						{
							"id": 983,
							"name": "_keyMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 105,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Set",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection._keyMap",
								"id": 276
							}
						},
						{
							"id": 920,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 921,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends a new `Event` to the `SortedCollection`, returning a new `SortedCollection`\ncontaining that `Event`. Optionally the `Event`s may be de-duplicated.",
										"text": "The `dedup` arg may `true` (in which case any existing `Event`s with the\nsame key will be replaced by this new `Event`), or with a function. If\n`dedup` is a user function that function will be passed a list of all `Event`s\nwith that duplicated key and will be expected to return a single `Event`\nto replace them with, thus shifting de-duplication logic to the user.\n\nDedupFunction:\n```\n(events: Immutable.List<Event<T>>) => Event<T>\n```\n\nExample 1:\n\n```\nlet myCollection = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2);\n```\n\nExample 2:\n```\n// dedup with the sum of the duplicated events\nconst myDedupedCollection = sortedCollection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3, (events) => {\n        const a = events.reduce((sum, e) => sum + e.get(\"a\"), 0);\n        return new Event<Time>(t, { a });\n    });\n```\n"
									},
									"parameters": [
										{
											"id": 922,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										},
										{
											"id": 923,
											"name": "dedup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DedupFunction",
														"id": 1509,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.addEvent",
										"id": 284
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 85,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.addEvent",
								"id": 284
							}
						},
						{
							"id": 1045,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1046,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Collection`'s `Event`s down to a single value per field.",
										"text": "This makes use of a user defined function suppled as the `reducer` to do\nthe reduction of values to a single value. The `ReducerFunction` is defined\nlike so:\n\n```\n(values: number[]) => number\n```\n\nFields to be aggregated are specified using a `fieldSpec` argument, which\ncan be a field name or array of field names.\n\nIf the `fieldSpec` matches multiple fields then an object is returned\nwith keys being the fields and the values being the aggregated value for\nthose fields. If the `fieldSpec` is for a single field then just the\naggregated value is returned.\n\nNote: The `Collection` class itself contains most of the common aggregation functions\nbuilt in (e.g. `myCollection.avg(\"value\")`), but this is here to help when what\nyou need isn't supplied out of the box.\n"
									},
									"parameters": [
										{
											"id": 1047,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 1048,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.aggregate",
										"id": 370
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 609,
									"character": 20
								},
								{
									"fileName": "collection.ts",
									"line": 610,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.aggregate",
								"id": 370
							}
						},
						{
							"id": 955,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 956,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The `align()` method takes a `Event`s and interpolates new values on precise\ntime intervals. For example we get measurements from our network every 30 seconds,\nbut not exactly. We might get values timestamped at :32, 1:01, 1:28, 2:00 and so on.",
										"text": "It is helpful to remove this at some stage of processing incoming data so that later\nthe aligned values can be aggregated together (combining multiple series into a singe\naggregated series).\n\nThe alignment is controlled by the `AlignmentOptions`. This is an object of the form:\n```\n{\n   fieldSpec: string | string[];\n   period: Period;\n   method?: AlignmentMethod;\n   limit?: number;\n}\n```\nOptions:\n * `fieldSpec` - the field or fields to align\n * `period` - a `Period` object to control the time interval to align to\n * `method` - the interpolation method, which may be\n   `AlignmentMethod.Linear` or `AlignmentMethod.Hold`\n * `limit` - how long to interpolate values before inserting nulls on boundaries.\n\nNote: Only a `Collection` of `Event<Time>` objects can be aligned. `Event<Index>`\nobjects are basically already aligned and it makes no sense in the case of a\n`Event<TimeRange>`.\n\nNote: Aligned `Event`s will only contain the fields that the alignment was requested\non. Which is to say if you have two columns, \"in\" and \"out\", and only request to align\nthe \"in\" column, the \"out\" value will not be contained in the resulting collection.\n"
									},
									"parameters": [
										{
											"id": 957,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 237,
									"character": 16
								}
							]
						},
						{
							"id": 1004,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1005,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` at the given position `pos` in the `Collection`. The\nevents in the `Collection` will be in the same order as they were inserted,\nunless some sorting has been evoked by the user.",
										"text": "Note: this is the least efficient way to fetch a point. If you wish to scan\nthe whole set of Events, use iterators (see `forEach()` and `map()`).\nFor direct access the `Collection` is optimized for returning results via\nthe `Event`'s key T, i.e. timestamp (see `atKey()`).\n\nExample:\n```\nconst c1 = collection(\n    Immutable.List([\n        event(time(\"2015-04-22T03:30:00Z\"), Immutable.Map({ a: 5, b: 6 })),\n        event(time(\"2015-04-22T02:30:00Z\"), Immutable.Map({ a: 4, b: 2 }))\n    ])\n);\nc1.at(1).get(\"a\")  // 4\n```\n"
									},
									"parameters": [
										{
											"id": 1006,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.at",
										"id": 304
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 323,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.at",
								"id": 304
							}
						},
						{
							"id": 1007,
							"name": "atKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1008,
									"name": "atKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Event` located at the key specified, if it exists.",
										"text": "Note: this doesn't find the closest key, or implement `bisect`. For that you need the\n`SortedCollection`, that is also part of a `TimeSeries`.\nOn the plus side, if you know the key this is an efficient way to access the\n`Event` within the `Collection`.\n\nExample:\n```\nconst t1 = time(\"2015-04-22T03:30:00Z\");\nconst t2 = time(\"2015-04-22T02:30:00Z\");\nconst c1 = collection(\n    Immutable.List([\n        event(t1, Immutable.Map({ a: 5, b: 6 })),\n        event(t2, Immutable.Map({ a: 4, b: 2 }))\n    ])\n);\nconst event = collection.atKey(t2);\nevent.get(\"a\")   // 4\n```\n"
									},
									"parameters": [
										{
											"id": 1009,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.atKey",
										"id": 307
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 349,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.atKey",
								"id": 307
							}
						},
						{
							"id": 1079,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1080,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down\nto their average(s).",
										"text": "The `fieldSpec` passed into the avg function is either\na field name or a list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nExample:\n```\nconst e1 = event(time(\"2015-04-22T02:30:00Z\"), Immutable.Map({ a: 8, b: 2 }));\nconst e2 = event(time(\"2015-04-22T01:30:00Z\"), Immutable.Map({ a: 3, b: 3 }));\nconst e3 = event(time(\"2015-04-22T03:30:00Z\"), Immutable.Map({ a: 5, b: 7 }));\nconst c = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3);\n\nc.avg(\"b\") // 4\n"
									},
									"parameters": [
										{
											"id": 1081,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1082,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.avg",
										"id": 404
									}
								},
								{
									"id": 1083,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1084,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1085,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1086,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1087,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1088,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 670,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.avg",
										"id": 404
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 669,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 670,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 671,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.avg",
								"id": 404
							}
						},
						{
							"id": 951,
							"name": "bisect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 952,
									"name": "bisect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index that `bisect`'s the `TimeSeries` at the time specified."
									},
									"parameters": [
										{
											"id": 953,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 954,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 182,
									"character": 17
								}
							]
						},
						{
							"id": 974,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 975,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 976,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 977,
											"name": "keyMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.clone",
										"id": 481
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 374,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.clone",
								"id": 481
							}
						},
						{
							"id": 1148,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1149,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapse multiple columns of a `Collection` into a new column.",
										"text": "The `collapse()` method needs to be supplied with a `CollapseOptions`\nobject. You use this to specify the columns to collapse, the column name\nof the column to collapse to and the reducer function. In addition you\ncan choose to append this new column or use it in place of the columns\ncollapsed.\n\n```\n{\n   fieldSpecList: string[];\n   fieldName: string;\n   reducer: any;\n   append: boolean;\n}\n```\nOptions:\n * `fieldSpecList` - the list of fields to collapse\n * `fieldName` - the new field's name\n * `reducer()` - a function to collapse using e.g. `avg()`\n * `append` - to include only the new field, or include it in addition\n    to the previous fields.\n\nExample:\n```\n// Initial collection\nconst t1 = time(\"2015-04-22T02:30:00Z\");\nconst t2 = time(\"2015-04-22T03:30:00Z\");\nconst t3 = time(\"2015-04-22T04:30:00Z\");\nconst c = collection<Time>()\n    .addEvent(event(t1, Immutable.Map({ a: 5, b: 6 })))\n    .addEvent(event(t2, Immutable.Map({ a: 4, b: 2 })))\n    .addEvent( event(t2, Immutable.Map({ a: 6, b: 3 })));\n\n// Sum columns \"a\" and \"b\" into a new column \"v\"\nconst sums = c.collapse({\n    fieldSpecList: [\"a\", \"b\"],\n    fieldName: \"v\",\n    reducer: sum(),\n    append: false\n});\n\nsums.at(0).get(\"v\")  // 11\nsums.at(1).get(\"v\")  // 6\nsums.at(2).get(\"v\")  // 9\n```\n"
									},
									"parameters": [
										{
											"id": 1150,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.collapse",
										"id": 475
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 898,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.collapse",
								"id": 475
							}
						},
						{
							"id": 1018,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1019,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterator (`IterableIterator`) into the internal\nlist of events within this `Collection`.",
										"text": "Example:\n```\nlet iterator = collection.entries();\nfor (let x = iterator.next(); !x.done; x = iterator.next()) {\n    const [key, event] = x.value;\n    console.log(`Key: ${key}, Event: ${event.toString()}`);\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.entries",
										"id": 318
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 404,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.entries",
								"id": 318
							}
						},
						{
							"id": 1014,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1015,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all the `Event<T>`s as an `Immutable.List`."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.eventList",
										"id": 314
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 375,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.eventList",
								"id": 314
							}
						},
						{
							"id": 1016,
							"name": "eventMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1017,
									"name": "eventMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the events in the `Collection` as an `Immutable.Map`, where\nthe key of type `T` (`Time`, `Index`, or `TimeRange`),\nrepresented as a string, is mapped to the `Event` itself.",
										"returns": "Immutable.Map<T, Event<T>> Events in this Collection,\n                                    converted to a Map.\n"
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.eventMap",
										"id": 316
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 387,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.eventMap",
								"id": 316
							}
						},
						{
							"id": 961,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 962,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fills missing/invalid values in the `Event` with new values.",
										"text": "These new value can be either zeros, interpolated values from neighbors, or padded,\nmeaning copies of previous value.\n\nThe fill is controlled by the `FillOptions`. This is an object of the form:\n```\n{\n    fieldSpec: string | string[];\n    method?: FillMethod;\n    limit?: number;\n}\n```\nOptions:\n * `fieldSpec` - the field to fill\n * `method` - the interpolation method, one of `FillMethod.Hold`, `FillMethod.Pad`\n              or `FillMethod.Linear`\n * `limit` - the number of missing values to fill before giving up\n\nReturns a new filled `Collection`.\n"
									},
									"parameters": [
										{
											"id": 963,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 1482
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 288,
									"character": 15
								}
							]
						},
						{
							"id": 944,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 945,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter the `SortedCollection`'s `Event`'s with the supplied function.",
										"text": "The function `predicate` is passed each `Event` and should return\ntrue to keep the `Event` or false to discard.\n\nExample:\n```\nconst filtered = collection.filter(e => e.get(\"a\") < 8)\n```\n"
									},
									"parameters": [
										{
											"id": 946,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 947,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 948,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 949,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 950,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"sources": [
														{
															"fileName": "sortedcollection.ts",
															"line": 174,
															"character": 28
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.filter",
										"id": 361
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 174,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.filter",
								"id": 361
							}
						},
						{
							"id": 1049,
							"name": "first",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1050,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1051,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1052,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.first",
										"id": 374
									}
								},
								{
									"id": 1053,
									"name": "first",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1054,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1055,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1056,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1057,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1058,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 623,
													"character": 47
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.first",
										"id": 374
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 622,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 623,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 624,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.first",
								"id": 374
							}
						},
						{
							"id": 1010,
							"name": "firstEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1011,
									"name": "firstEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.firstEvent",
										"id": 310
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 361,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.firstEvent",
								"id": 310
							}
						},
						{
							"id": 936,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 937,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flat map over the events in this `SortedCollection`.",
										"text": "For each `Event<T>` passed to your callback function you should map that to\nzero, one or many `Event<U>`s, returned as an `Immutable.List<Event<U>>`.\n\nExample:\n```\nconst processor = new Fill<T>(options);  // processor addEvent() returns 0, 1 or n new events\nconst filled = this.flatMap<T>(e => processor.addEvent(e));\n```\n"
									},
									"typeParameter": [
										{
											"id": 938,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 939,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 940,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 941,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 942,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 943,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "U",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "sortedcollection.ts",
															"line": 157,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.flatMap",
										"id": 342
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 156,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.flatMap",
								"id": 342
							}
						},
						{
							"id": 1020,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1021,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this `Collection`.",
										"text": "`Event`s are in the order that they were added, unless the Collection\nhas since been sorted. The `sideEffect` is a user supplied function which\nis passed the `Event<T>` and the index.\n\nReturns the number of items iterated.\n\nExample:\n```\ncollection.forEach((e, i) => {\n    console.log(`Event[${i}] is ${e.toString()}`);\n})\n```\n"
									},
									"parameters": [
										{
											"id": 1022,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1023,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1024,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1025,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1026,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 424,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.forEach",
										"id": 320
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 424,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.forEach",
								"id": 320
							}
						},
						{
							"id": 964,
							"name": "groupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 965,
									"name": "groupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "GroupBy a field's value. The result is a `GroupedCollection`, which internally maps\na key (the value of the field) to a `Collection` of `Event`s in that group.",
										"text": "Example:\n\nIn this example we group by the field \"team_name\" and then call the `aggregate()`\nmethod on the resulting `GroupedCollection`.\n\n```\nconst teamAverages = c\n    .groupBy(\"team_name\")\n    .aggregate({\n        \"goals_avg\": [\"goals\", avg()],\n        \"against_avg\": [\"against\", avg()],\n    });\nteamAverages.get(\"raptors\").get(\"goals_avg\"));\nteamAverages.get(\"raptors\").get(\"against_avg\"))\n```\n"
									},
									"parameters": [
										{
											"id": 966,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"name": "GroupingFunction",
														"id": 1753,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 313,
									"character": 18
								}
							]
						},
						{
							"id": 924,
							"name": "isChronological",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 925,
									"name": "isChronological",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if all `Event`s are in chronological order. In the case\nof a `SortedCollection` this will always return `true`."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.isChronological",
										"id": 473
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 100,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.isChronological",
								"id": 473
							}
						},
						{
							"id": 1002,
							"name": "isEmpty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1003,
									"name": "isEmpty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return if the `Collection` has any events in it"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.isEmpty",
										"id": 302
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 298,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.isEmpty",
								"id": 302
							}
						},
						{
							"id": 1059,
							"name": "last",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1060,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last value in the `Collection` for the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1061,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1062,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.last",
										"id": 384
									}
								},
								{
									"id": 1063,
									"name": "last",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1064,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1065,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1066,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1067,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1068,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 632,
													"character": 46
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.last",
										"id": 384
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 631,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 632,
									"character": 15
								},
								{
									"fileName": "collection.ts",
									"line": 633,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.last",
								"id": 384
							}
						},
						{
							"id": 1012,
							"name": "lastEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1013,
									"name": "lastEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last event in the `Collection`."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.lastEvent",
										"id": 312
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 368,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.lastEvent",
								"id": 312
							}
						},
						{
							"id": 928,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 929,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map over the events in this `SortedCollection`. For each `Event`\npassed to your callback function you should map that to\na new `Event`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst mapped = sorted.map(event => {\n    return new Event(event.key(), { a: 55 });\n});\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 930,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 931,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 932,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 933,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 934,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 935,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "sortedcollection.ts",
															"line": 138,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.map",
										"id": 327
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 137,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.map",
								"id": 327
							}
						},
						{
							"id": 1027,
							"name": "mapKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1028,
									"name": "mapKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remap the keys, but keep the data the same. You can use this if you\nhave a `Collection` of `Event<Index>` and want to convert to events\nof `Event<Time>`s, for example. The return result of remapping the\nkeys of a T to U i.e. `Collection<T>` remapped with new keys of type\n`U` as a `Collection<U>`.",
										"text": "Example:\n\nIn this example we remap `Time` keys to `TimeRange` keys using the `Time.toTimeRange()`\nmethod, centering the new `TimeRange`s around each `Time` with duration given\nby the `Duration` object supplied, in this case representing one hour.\n\n```\nconst remapped = myCollection.mapKeys<TimeRange>(t =>\n    t.toTimeRange(duration(\"1h\"), TimeAlignment.Middle)\n);\n```\n\n"
									},
									"typeParameter": [
										{
											"id": 1029,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1030,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1031,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1032,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1033,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "collection.ts",
															"line": 467,
															"character": 41
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "U",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.mapKeys",
										"id": 335
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 467,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.mapKeys",
								"id": 335
							}
						},
						{
							"id": 1089,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1090,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir maximum value(s).",
										"text": "The `fieldSpec` passed into the avg function is either a field name or\na list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nThe result is the maximum value if the fieldSpec is for one field. If\nmultiple fields then a map of fieldName -> max values is returned\n"
									},
									"parameters": [
										{
											"id": 1091,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1092,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.max",
										"id": 414
									}
								},
								{
									"id": 1093,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1094,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1095,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1096,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1097,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1098,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 689,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.max",
										"id": 414
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 688,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 689,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 690,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.max",
								"id": 414
							}
						},
						{
							"id": 1109,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1110,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their median value"
									},
									"parameters": [
										{
											"id": 1111,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1112,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.median",
										"id": 434
									}
								},
								{
									"id": 1113,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1114,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1115,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1116,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1117,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1118,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 708,
													"character": 48
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.median",
										"id": 434
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 707,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 708,
									"character": 17
								},
								{
									"fileName": "collection.ts",
									"line": 709,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.median",
								"id": 434
							}
						},
						{
							"id": 1099,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1100,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `Collection` down to\ntheir minimum value(s)"
									},
									"parameters": [
										{
											"id": 1101,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1102,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.min",
										"id": 424
									}
								},
								{
									"id": 1103,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1104,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1105,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1106,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1107,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1108,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 699,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.min",
										"id": 424
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 698,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 699,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 700,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.min",
								"id": 424
							}
						},
						{
							"id": 1154,
							"name": "onEventAdded",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 1155,
									"name": "onEventAdded",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1156,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.onEventAdded",
										"id": 485
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 957,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.onEventAdded",
								"id": 485
							}
						},
						{
							"id": 1129,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1130,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `Collection`. This works the same way as numpy.",
										"text": "The percentile function has several parameters that can be supplied:\n* `q` - The percentile (should be between 0 and 100)\n* `fieldSpec` - Field or fields to find the percentile of\n* `interp` - Specifies the interpolation method to use when the desired, see below\n* `filter` - Optional filter function used to clean data before aggregating\n\nFor `interp` a `InterpolationType` should be supplied if the default (\"linear\") is\nnot used. This enum is defined like so:\n```\nenum InterpolationType {\n    linear = 1,\n    lower,\n    higher,\n    nearest,\n    midpoint\n}\n```\nEmum values:\n  * `linear`: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * `lower`: i.\n  * `higher`: j.\n  * `nearest`: i or j whichever is nearest.\n  * `midpoint`: (i + j) / 2.\n\n"
									},
									"parameters": [
										{
											"id": 1131,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1132,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1133,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											}
										},
										{
											"id": 1134,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.percentile",
										"id": 454
									}
								},
								{
									"id": 1135,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1136,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1137,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1138,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											}
										},
										{
											"id": 1139,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1140,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1141,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1142,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 757,
													"character": 6
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.percentile",
										"id": 454
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 751,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 752,
									"character": 21
								},
								{
									"fileName": "collection.ts",
									"line": 758,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.percentile",
								"id": 454
							}
						},
						{
							"id": 1143,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1144,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `Collection`.",
										"text": "The quantiles function has several parameters that can be supplied:\n* `n` - The number of quantiles\n* `column` - Field to find the quantiles within\n* `interp` - Specifies the interpolation method to use when the desired, see below\n\nFor `interp` a `InterpolationType` should be supplied if the default (\"linear\") is\nnot used. This enum is defined like so:\n```\nenum InterpolationType {\n    linear = 1,\n    lower,\n    higher,\n    nearest,\n    midpoint\n}\n```\nEmum values:\n  * `linear`: i + (j - i) * fraction, where fraction is the\n            fractional part of the index surrounded by i and j.\n  * `lower`: i.\n  * `higher`: j.\n  * `nearest`: i or j whichever is nearest.\n  * `midpoint`: (i + j) / 2.\n"
									},
									"parameters": [
										{
											"id": 1145,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1146,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1147,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.quantile",
										"id": 468
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 794,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.quantile",
								"id": 468
							}
						},
						{
							"id": 958,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 959,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the derivative of the `Event`s in this `Collection` for the given columns.",
										"text": "The result will be per second. Optionally you can substitute in `null` values\nif the rate is negative. This is useful when a negative rate would be considered\ninvalid like an ever increasing counter.\n\nTo control the rate calculation you need to specify a `RateOptions` object, which\ntakes the following form:\n```\n{\n    fieldSpec: string | string[];\n    allowNegative?: boolean;\n}\n```\nOptions:\n * `fieldSpec` - the field to calculate the rate on\n * `allowNegative` - allow emit of negative rates\n"
									},
									"parameters": [
										{
											"id": 960,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 261,
									"character": 15
								}
							]
						},
						{
							"id": 988,
							"name": "removeEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 989,
									"name": "removeEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the `Event` (or duplicate keyed Events) with the given key."
									},
									"parameters": [
										{
											"id": 990,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.removeEvents",
										"id": 288
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 235,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.removeEvents",
								"id": 288
							}
						},
						{
							"id": 1041,
							"name": "rest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1042,
									"name": "rest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Collection` with all `Event`s except the first"
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.rest",
										"id": 359
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 545,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.rest",
								"id": 359
							}
						},
						{
							"id": 1151,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1152,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Select out specified columns from the `Event`s within this `Collection`.",
										"text": "The `select()` method needs to be supplied with a `SelectOptions`\nobject, which takes the following form:\n\n```\n{\n    fields: string[];\n}\n```\nOptions:\n * `fields` - array of columns to keep within each `Event`.\n\nExample:\n```\nconst timestamp1 = time(\"2015-04-22T02:30:00Z\");\nconst timestamp2 = time(\"2015-04-22T03:30:00Z\");\nconst timestamp3 = time(\"2015-04-22T04:30:00Z\");\nconst e1 = event(timestamp1, Immutable.Map({ a: 5, b: 6, c: 7 }));\nconst e2 = event(timestamp2, Immutable.Map({ a: 4, b: 5, c: 6 }));\nconst e3 = event(timestamp2, Immutable.Map({ a: 6, b: 3, c: 2 }));\n\nconst c = collection<Time>()\n    .addEvent(e1)\n    .addEvent(e2)\n    .addEvent(e3);\n\nconst c1 = c.select({\n    fields: [\"b\", \"c\"]\n});\n\n// result: 3 events containing just b and c (a is discarded)\n```\n"
									},
									"parameters": [
										{
											"id": 1153,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.select",
										"id": 478
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 938,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.select",
								"id": 478
							}
						},
						{
							"id": 994,
							"name": "setEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 995,
									"name": "setEvents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completely replace the existing `Event`'s in this Collection."
									},
									"parameters": [
										{
											"id": 996,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.setEvents",
										"id": 294
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 255,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.setEvents",
								"id": 294
							}
						},
						{
							"id": 997,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 998,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of `Event`'s in this Collection"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.size",
										"id": 297
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 270,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.size",
								"id": 297
							}
						},
						{
							"id": 999,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1000,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `Collection`.",
										"text": "Uses the `fieldPath` to look up values in all Events.\n\nIt then counts the number that are considered valid, which\nspecifically are not:\n * NaN\n * undefined\n * null.\n"
									},
									"parameters": [
										{
											"id": 1001,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sizeValid",
										"id": 299
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 285,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sizeValid",
								"id": 299
							}
						},
						{
							"id": 1037,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1038,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `Collection`, returns a new\n`Collection` representing a portion of this `TimeSeries` from `begin` up to\nbut not including `end`."
									},
									"parameters": [
										{
											"id": 1039,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1040,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.slice",
										"id": 355
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 538,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.slice",
								"id": 355
							}
						},
						{
							"id": 1034,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1035,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` using the value referenced by\nthe `field`."
									},
									"parameters": [
										{
											"id": 1036,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sort",
										"id": 352
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 523,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sort",
								"id": 352
							}
						},
						{
							"id": 926,
							"name": "sortByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 927,
									"name": "sortByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts the `Collection` by the `Event` key `T`.",
										"text": "In the case case of the key being `Time`, this is clear.\nFor `TimeRangeEvents` and `IndexedEvents`, the `Collection`\nwill be sorted by the begin time.\n\nThis method is particularly useful when the `Collection`\nwill be passed into a `TimeSeries`.\n\nSee also `Collection.isChronological()`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst sorted = collection.sortByKey();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Collection.sortByKey",
										"id": 350
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 121,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Collection.sortByKey",
								"id": 350
							}
						},
						{
							"id": 1119,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1120,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their standard deviation"
									},
									"parameters": [
										{
											"id": 1121,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1122,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.stdev",
										"id": 444
									}
								},
								{
									"id": 1123,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1124,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1125,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1126,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1127,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1128,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 717,
													"character": 47
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.stdev",
										"id": 444
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 716,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 717,
									"character": 16
								},
								{
									"fileName": "collection.ts",
									"line": 718,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.stdev",
								"id": 444
							}
						},
						{
							"id": 1069,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1070,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum of the `Event`'s in this `Collection`\nfor the `fieldspec`"
									},
									"parameters": [
										{
											"id": 1071,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1072,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sum",
										"id": 394
									}
								},
								{
									"id": 1073,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1074,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1075,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1076,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 1077,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1078,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "collection.ts",
													"line": 642,
													"character": 45
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.sum",
										"id": 394
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 641,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 642,
									"character": 14
								},
								{
									"fileName": "collection.ts",
									"line": 643,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.sum",
								"id": 394
							}
						},
						{
							"id": 991,
							"name": "takeLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 992,
									"name": "takeLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes the last n `Event`'s of the `Collection` and returns a new `Collection`."
									},
									"parameters": [
										{
											"id": 993,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Collection",
										"id": 269,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.takeLast",
										"id": 291
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 246,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.takeLast",
								"id": 291
							}
						},
						{
							"id": 1043,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1044,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the time range extents of the `Collection` as a `TimeRange`.",
										"text": "Since this `Collection` is not necessarily in order, this method will traverse the\n`Collection` and determine the earliest and latest time represented within it.\n"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.timerange",
										"id": 368
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 570,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.timerange",
								"id": 368
							}
						},
						{
							"id": 984,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 985,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `Collection` as a regular JSON object."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.toJSON",
										"id": 280
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 149,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toJSON",
								"id": 280
							}
						},
						{
							"id": 986,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 987,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Serialize out the `Collection` as a string. This will be the\nstring representation of `toJSON()`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.toString",
										"id": 282
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 157,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.toString",
								"id": 282
							}
						},
						{
							"id": 967,
							"name": "window",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 968,
									"name": "window",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Window the `Collection` into a given period of time.",
										"text": "This is similar to `groupBy` except `Event`s are grouped by their timestamp\nbased on the `Period` supplied. The result is a `WindowedCollection`.\n\nThe windowing is controlled by the `WindowingOptions`, which takes the form:\n```\n{\n    window: WindowBase;\n    trigger?: Trigger;\n}\n```\nOptions:\n * `window` - a `WindowBase` subclass, currently `Window` or `DayWindow`\n * `trigger` - not needed in this context\n\nExample:\n\n```\nconst c = new Collection()\n    .addEvent(event(time(\"2015-04-22T02:28:00Z\"), map({ team: \"a\", value: 3 })))\n    .addEvent(event(time(\"2015-04-22T02:29:00Z\"), map({ team: \"a\", value: 4 })))\n    .addEvent(event(time(\"2015-04-22T02:30:00Z\"), map({ team: \"b\", value: 5 })));\n\nconst thirtyMinutes = window(duration(\"30m\"));\n\nconst windowedCollection = c.window({\n    window: thirtyMinutes\n});\n\n```\n"
									},
									"parameters": [
										{
											"id": 969,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 350,
									"character": 17
								}
							]
						},
						{
							"id": 978,
							"name": "buildKeyMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 979,
									"name": "buildKeyMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rebuild the keyMap from scratch"
									},
									"typeParameter": [
										{
											"id": 980,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 981,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "S",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Collection.buildKeyMap",
										"id": 271
									}
								}
							],
							"sources": [
								{
									"fileName": "collection.ts",
									"line": 87,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Collection.buildKeyMap",
								"id": 271
							}
						},
						{
							"id": 970,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 971,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two collections to each other. If the collections\nare of the same value as each other then equals will return true."
									},
									"parameters": [
										{
											"id": 972,
											"name": "collection1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 973,
											"name": "collection2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "sortedcollection.ts",
									"line": 359,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								917
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								982,
								983
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								920,
								1045,
								955,
								1004,
								1007,
								1079,
								951,
								974,
								1148,
								1018,
								1014,
								1016,
								961,
								944,
								1049,
								1010,
								936,
								1020,
								964,
								924,
								1002,
								1059,
								1012,
								928,
								1027,
								1089,
								1109,
								1099,
								1154,
								1129,
								1143,
								958,
								988,
								1041,
								1151,
								994,
								997,
								999,
								1037,
								1034,
								926,
								1119,
								1069,
								991,
								1043,
								984,
								986,
								967,
								978,
								970
							]
						}
					],
					"sources": [
						{
							"fileName": "sortedcollection.ts",
							"line": 37,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Collection",
							"id": 269,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							]
						}
					]
				},
				{
					"id": 1157,
					"name": "sortedCollectionFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1158,
							"name": "sortedCollectionFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1159,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 1160,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 269,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedCollection",
								"id": 915,
								"typeArguments": [
									{
										"type": "unknown",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "sortedcollection.ts",
							"line": 382,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						915
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1157
					]
				}
			],
			"sources": [
				{
					"fileName": "sortedcollection.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 495,
			"name": "\"stream\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/stream.ts",
			"children": [
				{
					"id": 733,
					"name": "AggregationNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 734,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 735,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 737,
									"name": "new AggregationNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 738,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 1505,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AggregationNode",
										"id": 733
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 292,
									"character": 85
								}
							]
						},
						{
							"id": 736,
							"name": "aggregationSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 293,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"name": "AggregationSpec",
								"id": 1505,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								]
							}
						},
						{
							"id": 742,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 743,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 744,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 745,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Index",
																"id": 1689
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 749,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 750,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 751,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Index",
														"id": 1689
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 739,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 740,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 741,
											"name": "keyedCollection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Index",
														"id": 1689
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 297,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 746,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 747,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 748,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								735
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								736,
								742
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								743,
								749,
								739,
								746
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 292,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 853,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Index",
											"id": 1689
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 638,
					"name": "AlignNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 639,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 641,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 642,
									"name": "new AlignNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 643,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AlignNode",
										"id": 638
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 207,
									"character": 32
								}
							]
						},
						{
							"id": 647,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 640,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 207,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Align",
								"id": 1912,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 648,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 649,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 650,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 654,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 655,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 656,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 644,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 645,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 646,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 213,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 651,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 652,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 653,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								641
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								647,
								640
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								648,
								654,
								644,
								651
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 206,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 676,
					"name": "CollapseNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 677,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 679,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 680,
									"name": "new CollapseNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 681,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CollapseNode",
										"id": 676
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 241,
									"character": 35
								}
							]
						},
						{
							"id": 685,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 678,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 241,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Collapse",
								"id": 140,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 686,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 687,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 688,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 692,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 693,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 694,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 682,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 683,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 684,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 247,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 689,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 690,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 691,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								679
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								685,
								678
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								686,
								692,
								682,
								689
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 240,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 512,
					"name": "EventInputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 513,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 514,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 515,
									"name": "new EventInputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EventInputNode",
										"id": 512
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 108,
									"character": 70
								}
							]
						},
						{
							"id": 519,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 520,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 521,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 522,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 526,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 527,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 528,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 516,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 517,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 518,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 113,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 523,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 524,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 525,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								514
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								519
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								520,
								526,
								516,
								523
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 108,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 529,
					"name": "EventOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 530,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 531,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 533,
									"name": "new EventOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 534,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventCallback",
												"id": 844
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventOutputNode",
										"id": 529
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 123,
									"character": 71
								}
							]
						},
						{
							"id": 532,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 124,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "EventCallback",
								"id": 844
							}
						},
						{
							"id": 538,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 539,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 540,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 541,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 545,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 546,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 547,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 535,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 536,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 537,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 128,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 542,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 543,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 544,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								531
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								532,
								538
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								539,
								545,
								535,
								542
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 123,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 752,
					"name": "EventStream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An `EventStream` is the interface to the stream provided for manipulation of\nparts of the streaming pipeline that map a stream of Events of type <T>.",
						"text": "For example a stream of Events<Time> can be mapped to an output stream of\nnew Events<Time> that are aligned to a fixed period boundary. Less or more Events\nmay result.\n\nThe type parameter `<U>` is the input `Event` type at the top of the stream, since each\ninterface exposes the `addEvent(Event<U>)` method for inserting events at the top of\nthe stream.\n\nThe type parameter `<T>` is the type of `Event`s in this part of the stream. That is\nnodes created by the API at this point of the stream will expect Events of type T,\nand will output new Events, potentially of a different type.\n"
					},
					"typeParameter": [
						{
							"id": 753,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 754,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 755,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 757,
									"name": "new EventStream",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 758,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Stream",
												"id": 813,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 331,
									"character": 56
								}
							]
						},
						{
							"id": 756,
							"name": "stream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 333,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 813,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 759,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 760,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 761,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 340,
									"character": 12
								}
							]
						},
						{
							"id": 779,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 780,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Align Events in the stream to a specific boundary at a fixed period.\nOptions are a `AlignmentOptions` object where you specify which field to\nalign with `fieldSpec`, what boundary period to use with `window` and\nthe method of alignment with `method` (which can be either `Linear`\ninterpolation, or `Hold`).",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst s = stream()\n    .align({\n        fieldSpec: \"value\",\n        window: period(\"1m\"),\n        method: AlignmentMethod.Linear\n    })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 781,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 403,
									"character": 9
								}
							]
						},
						{
							"id": 788,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 789,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming events to new events with specified\nfields collapsed into a new field using an aggregation function.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nEvents with fields a, b, c can be mapped to events with only a field\ncontaining the avg of a and b called \"ab\".\n\n```\nconst s = stream()\n     .collapse({\n         fieldSpecList: [\"a\", \"b\"],\n         fieldName: \"ab\",\n         reducer: avg(),\n         append: false\n     })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 790,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 470,
									"character": 12
								}
							]
						},
						{
							"id": 776,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 777,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fill missing values in stream events.",
										"text": "Missing values can be filled with different `method`s:\n * FillMethod.Linear - linear interpolation\n * FillMethod.Pad - as padding (filling with a previous value)\n * FillMethod.Zero or filled with zeros.\n\nYou can also specify the number of events you are willing to fill\nbefore giving up using the `limit` option. This is because commonly\nyou might want to fill the occasional hole in data, but if you have\na true outage of data then you want to keep that instead of a\nworthless fill.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream()\n    .fill({ method: FillMethod.Linear, fieldSpec: \"value\", limit: 2 })\n    .output(event => {\n        const e = event as Event;\n        results.push(e);\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 778,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 1482
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 382,
									"character": 8
								}
							]
						},
						{
							"id": 769,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 770,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remaps each Event<T> in the stream to 0, 1 or many Event<M>s."
									},
									"typeParameter": [
										{
											"id": 771,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 772,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 773,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 774,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 775,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "M",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 354,
															"character": 34
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "M"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 354,
									"character": 11
								}
							]
						},
						{
							"id": 794,
							"name": "groupByWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 795,
									"name": "groupByWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The heart of the streaming code is that in addition to remapping operations of\na stream of events, you can also group by a window. This is what allows you to do\nrollups with the streaming code.",
										"text": "A window is defined with the `WindowingOptions`, which allows you to specify\nthe window period as a `Period` (e.g. `period(\"30m\")` for each 30 minutes window)\nas the `window` and a `Trigger` enum value (emit a completed window on each\nincoming `Event` or on each completed window).\n\nThe return type of this operation will no longer be an `EventStream` but rather\na `KeyedCollectionStream` as each entity passed down the stream is no longer an\n`Event` but rather a tuple mapping a key (the window name) to a `Collection`\nwhich contains all `Event`s in the window. So, see `KeyedCollectionStream`\nfor what can be done as the next pipeline step. But spoiler alert, generally\nthe next step is to `aggregate()` those windows back to `Events` or to `output()`\nto `Collection`s.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst source = stream<Time>()\n    .groupByWindow({\n        window: period(\"30m\"),\n        trigger: Trigger.perEvent\n    })\n    .aggregate({...})\n    .output(event => {\n        ...\n    });\n"
											}
										]
									},
									"parameters": [
										{
											"id": 796,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 797,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 527,
									"character": 17
								}
							]
						},
						{
							"id": 762,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 763,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remaps each Event<T> in the stream to a new Event<M>."
									},
									"typeParameter": [
										{
											"id": 764,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 765,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 766,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 767,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 768,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 347,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "M"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 347,
									"character": 7
								}
							]
						},
						{
							"id": 791,
							"name": "output",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 792,
									"name": "output",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An output, specified as an `EventCallback`, essentially `(event: Event<Key>) => void`.\nUsing this method you are able to access the stream result. Your callback\nfunction will be called whenever a new Event is available. Not that currently the\ntype will be Event<Key> as the event is generically passed through the stream, but\nyou can cast the type (if you are using Typescript).",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream<Time>()\n    .groupByWindow({...})\n    .aggregate({...})\n    .output(event => {\n        const e = event as Event<Index>;\n        // Do something with the event e\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 793,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventCallback",
												"id": 844
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 492,
									"character": 10
								}
							]
						},
						{
							"id": 782,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 783,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming Events in the stream to rates (essentially taking\nthe derivative over time). The resulting output Events will be\nof type `Event<TimeRange>`, where the `TimeRange` key will be\nthe time span over which the rate was calculated. If you want you\ncan remap this later and decide on a timestamp to use instead.",
										"text": "Options are a `RateOptions` object, where you specify which field\nto take the rate of with `fieldSpec` and can also optionally choose\nto include negative rates with `allowNegative`. (the default\nis to ignore negative rates). This is a useful option if you expect\nthe incoming values to always increase while a decrease is considered\na bad condition (e.g. network counters or click counts).\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst s = stream()\n    .align({...})\n    .rate({ fieldSpec: \"value\", allowNegative: false })\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 784,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 429,
									"character": 8
								}
							]
						},
						{
							"id": 785,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 786,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert incoming events to new events with on the specified\nfields selected out of the source.",
										"tags": [
											{
												"tag": "example",
												"text": "\n\nEvents with fields a, b, c can be mapped to events with only\nb and c:\n\n```\nconst s = stream()\n     .select([\"b\", \"c\"])\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 787,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 447,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								755
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								756
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								759,
								779,
								788,
								776,
								769,
								794,
								762,
								791,
								782,
								785
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 331,
							"character": 24
						}
					]
				},
				{
					"id": 619,
					"name": "FillNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 620,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 622,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 623,
									"name": "new FillNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 624,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 1482
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FillNode",
										"id": 619
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 190,
									"character": 31
								}
							]
						},
						{
							"id": 628,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 621,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 190,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Fill",
								"id": 150,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 629,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 630,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 631,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 635,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 636,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 637,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 625,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 626,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 627,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 196,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 632,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 633,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 634,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								622
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								628,
								621
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								629,
								635,
								625,
								632
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 189,
							"character": 14
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 593,
					"name": "FlatMapNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 594,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 595,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 596,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 601,
									"name": "new FlatMapNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 602,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 603,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 604,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 605,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "M",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 175,
															"character": 31
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FlatMapNode",
										"id": 593
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 174,
									"character": 82
								}
							]
						},
						{
							"id": 597,
							"name": "mapper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 175,
									"character": 30
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 598,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 599,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 600,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "stream.ts",
											"line": 175,
											"character": 31
										}
									]
								}
							}
						},
						{
							"id": 609,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 610,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 611,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 612,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 616,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 617,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 618,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 606,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 607,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 608,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "M"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 179,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 613,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 614,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 615,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								596
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								597,
								609
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								610,
								616,
								606,
								613
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 174,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "M",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 548,
					"name": "KeyedCollectionOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 549,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 550,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 552,
									"name": "new KeyedCollectionOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 553,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionCallback",
												"id": 848,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionOutputNode",
										"id": 548
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 142,
									"character": 3
								}
							]
						},
						{
							"id": 551,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 143,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "KeyedCollectionCallback",
								"id": 848,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 557,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 558,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 559,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 560,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "KeyedCollection",
														"id": 853,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 564,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 565,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 566,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 554,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 555,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 556,
											"name": "keyedCollection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 147,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 561,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 562,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 563,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								550
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								551,
								557
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								558,
								564,
								554,
								561
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 139,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 853,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 853,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 797,
					"name": "KeyedCollectionStream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 798,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 799,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 800,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 802,
									"name": "new KeyedCollectionStream",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 803,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Stream",
												"id": 813,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 797
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 536,
									"character": 66
								}
							]
						},
						{
							"id": 801,
							"name": "stream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 537,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "Stream",
								"id": 813,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 804,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 805,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 806,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 543,
									"character": 12
								}
							]
						},
						{
							"id": 810,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 811,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes an incoming tuple mapping a key (the window name) to a `Collection`\n(containing all `Event`s in the window) and reduces that down\nto an output `Event<Index>` using an aggregation specification. As\nindicated, the output is an `IndexedEvent`, since the `Index` describes\nthe the window the aggregation was made from.",
										"text": "The `AggregationSpec` which describes the reduction, is a mapping of the\nthe desired output field to the combination of input field and aggregation function.\nIn the example below, `in_avg` is the new field, which is the aggregation\nof all the `in` fields in the `Collection` using the `avg()` function. Thus an\noutput event would contain just the `in_avg` field and its value would be\nthe average of all the `in` fields in the collection, for that window. That\n`Event` would have an `Index` which describes the window from which it came.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```\nconst source = stream()\n    .groupByWindow({\n        window: period(\"30m\"),\n        trigger: Trigger.perEvent\n    })\n    .aggregate({\n        in_avg: [\"in\", avg()],\n        out_avg: [\"out\", avg()]\n    })\n    .output(event => {\n        ...\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 812,
											"name": "spec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 1505,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 601,
									"character": 13
								}
							]
						},
						{
							"id": 807,
							"name": "output",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 808,
									"name": "output",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An output, specified as an `KeyedCollectionCallback`, essentially\n`(collection: Collection<T>,vkey: string) => void`.",
										"text": "Using this method you are able to access the stream result. Your callback\nfunction will be called whenever a new `Collection` is available.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nconst source = stream<Time>()\n    .groupByWindow({...})\n    .output(collection => {\n        // Do something with the collection\n    });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 809,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionCallback",
												"id": 848,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 797,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 563,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								800
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								801
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								804,
								810,
								807
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 536,
							"character": 34
						}
					]
				},
				{
					"id": 567,
					"name": "MapNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 568,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						},
						{
							"id": 569,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 570,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 575,
									"name": "new MapNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 576,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 577,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 578,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 579,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "stream.ts",
															"line": 160,
															"character": 31
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MapNode",
										"id": 567
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 159,
									"character": 78
								}
							]
						},
						{
							"id": 571,
							"name": "mapper",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 160,
									"character": 30
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 572,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 573,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 574,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "stream.ts",
											"line": 160,
											"character": 31
										}
									]
								}
							}
						},
						{
							"id": 583,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 584,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 585,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 586,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 590,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 591,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 592,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 580,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 581,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 582,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 164,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 587,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 588,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 589,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								570
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								571,
								583
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								584,
								590,
								580,
								587
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 159,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "M",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 496,
					"name": "Node",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true,
						"isExported": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 497,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Base",
								"id": 1763
							}
						},
						{
							"id": 498,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Base",
								"id": 1763
							}
						}
					],
					"children": [
						{
							"id": 499,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()"
						},
						{
							"id": 500,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 501,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 502,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Base",
															"id": 1763
														}
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							]
						},
						{
							"id": 506,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 507,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 508,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1763
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							]
						},
						{
							"id": 509,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 510,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 511,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1763
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1763
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 96,
									"character": 30
								}
							]
						},
						{
							"id": 503,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 504,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 505,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "reference",
													"name": "Base",
													"id": 1763
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								499
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								500,
								506,
								509,
								503
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 73,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "EventInputNode",
							"id": 512
						},
						{
							"type": "reference",
							"name": "EventOutputNode",
							"id": 529
						},
						{
							"type": "reference",
							"name": "KeyedCollectionOutputNode",
							"id": 548
						},
						{
							"type": "reference",
							"name": "MapNode",
							"id": 567
						},
						{
							"type": "reference",
							"name": "FlatMapNode",
							"id": 593
						},
						{
							"type": "reference",
							"name": "FillNode",
							"id": 619
						},
						{
							"type": "reference",
							"name": "AlignNode",
							"id": 638
						},
						{
							"type": "reference",
							"name": "SelectNode",
							"id": 657
						},
						{
							"type": "reference",
							"name": "CollapseNode",
							"id": 676
						},
						{
							"type": "reference",
							"name": "RateNode",
							"id": 695
						},
						{
							"type": "reference",
							"name": "WindowOutputNode",
							"id": 714
						},
						{
							"type": "reference",
							"name": "AggregationNode",
							"id": 733
						}
					]
				},
				{
					"id": 695,
					"name": "RateNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 696,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 698,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 699,
									"name": "new RateNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 700,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RateNode",
										"id": 695
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 258,
									"character": 31
								}
							]
						},
						{
							"id": 704,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 697,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 258,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Rate",
								"id": 178,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 705,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 706,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 707,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "reference",
																"name": "TimeRange",
																"id": 1601
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 711,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 712,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 713,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 701,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 702,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 703,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 264,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 708,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 709,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 710,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								698
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								704,
								697
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								705,
								711,
								701,
								708
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 257,
							"character": 14
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "reference",
											"name": "TimeRange",
											"id": 1601
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 657,
					"name": "SelectNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 658,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 660,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 661,
									"name": "new SelectNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 662,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SelectNode",
										"id": 657
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 224,
									"character": 33
								}
							]
						},
						{
							"id": 666,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 659,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 224,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Select",
								"id": 193,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 667,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 668,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 669,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 673,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 674,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 675,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 663,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 664,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 665,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "T"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 230,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 670,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 671,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 672,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								660
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								666,
								659
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								667,
								673,
								663,
								670
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 223,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 813,
					"name": "Stream",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Processing of incoming `Event` streams to for real time processing.",
						"text": "Supports remapping, filtering, windowing and aggregation. It is designed for\nrelatively light weight handling of incoming events.\n\nA `Stream` object manages a chain of processing nodes, each type of which\nprovides an appropiate interface. When a `Stream` is initially created with\nthe `stream()` factory function the interface you will be returned in an\n`EventStream`. If you perform a windowing operation you will be exposed to\n`KeyedCollectionStream`. While if you aggregate a `KeyedCollectionStream` you\nwill be back to an `EventStream` and so on.\n\n---\nNote:\n\nGeneric grouping (\"group by\") should be handled outside of Pond now by creating\nmultiple streams and mapping incoming `Event`s to those streams. This allows for flexibility\nas to where those streams live and how work should be divided.\n\nFor \"at scale\" stream processing, use Apache Beam or Spark. This library is intended to\nsimplify passing of events to a browser and enabling convenient processing for visualization\npurposes, or for light weight handling of events in Node.\n\n---\nExample:\n\n```typescript\nconst result = {};\nconst slidingWindow = window(duration(\"3m\"), period(duration(\"1m\")));\nconst fixedHourlyWindow = window(duration(\"1h\"));\n\nconst source = stream()\n    .groupByWindow({\n        window: slidingWindow,\n        trigger: Trigger.onDiscardedWindow\n    })\n    .aggregate({\n        in_avg: [\"in\", avg()],\n        out_avg: [\"out\", avg()],\n        count: [\"in\", count()]\n    })\n    .map(e =>\n        new Event<Time>(time(e.timerange().end()), e.getData())\n    )\n    .groupByWindow({\n        window: fixedHourlyWindow,\n        trigger: Trigger.perEvent\n    })\n    .output((col, key) => {\n        result[key] = col as Collection<Time>;\n        calls += 1;\n    });\n\nsource.addEvent(e1)\nsource.addEvent(e2)\n...\n```\n"
					},
					"typeParameter": [
						{
							"id": 814,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 815,
							"name": "head",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 689,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 496,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Base",
										"id": 1763
									},
									{
										"type": "reference",
										"name": "Base",
										"id": 1763
									}
								]
							}
						},
						{
							"id": 816,
							"name": "tail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 690,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 496,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Base",
										"id": 1763
									},
									{
										"type": "reference",
										"name": "Base",
										"id": 1763
									}
								]
							}
						},
						{
							"id": 832,
							"name": "addCollectionToEventNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 833,
									"name": "addCollectionToEventNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"typeParameter": [
										{
											"id": 834,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 835,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 836,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionToEvent",
												"id": 855,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 719,
									"character": 28
								}
							]
						},
						{
							"id": 827,
							"name": "addCollectorMappingNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 828,
									"name": "addCollectorMappingNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"typeParameter": [
										{
											"id": 829,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 830,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 831,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollectionMap",
												"id": 856,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 797,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 711,
									"character": 27
								}
							]
						},
						{
							"id": 837,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 838,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add an `Event` into the stream"
									},
									"typeParameter": [
										{
											"id": 839,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 840,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "U",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 727,
									"character": 12
								}
							]
						},
						{
							"id": 817,
							"name": "addEventMappingNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 818,
									"name": "addEventMappingNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"typeParameter": [
										{
											"id": 819,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 820,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 821,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventMap",
												"id": 857,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EventStream",
										"id": 752,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 695,
									"character": 23
								}
							]
						},
						{
							"id": 822,
							"name": "addEventToCollectorNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 823,
									"name": "addEventToCollectorNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"typeParameter": [
										{
											"id": 824,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										},
										{
											"id": 825,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 826,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventToKeyedCollection",
												"id": 854,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "KeyedCollectionStream",
										"id": 797,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "U"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 703,
									"character": 27
								}
							]
						},
						{
							"id": 841,
							"name": "addNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 842,
									"name": "addNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 843,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 736,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								815,
								816
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								832,
								827,
								837,
								817,
								822,
								841
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 688,
							"character": 19
						}
					]
				},
				{
					"id": 714,
					"name": "WindowOutputNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isPrivate": true
					},
					"comment": {},
					"typeParameter": [
						{
							"id": 715,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 717,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 718,
									"name": "new WindowOutputNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 719,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowOutputNode",
										"id": 714
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 275,
									"character": 45
								}
							]
						},
						{
							"id": 723,
							"name": "observers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Node",
										"id": 496,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "Base",
												"id": 1763
											}
										]
									}
								]
							},
							"defaultValue": " Immutable.List<Node<T, Base>>()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.observers",
								"id": 499
							}
						},
						{
							"id": 716,
							"name": "processor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 275,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowedCollection",
								"id": 862,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 724,
							"name": "addObserver",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 725,
									"name": "addObserver",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 726,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 496,
												"typeArguments": [
													{
														"type": "reference",
														"name": "KeyedCollection",
														"id": 853,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "Base",
														"id": 1763
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.addObserver",
										"id": 500
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 77,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.addObserver",
								"id": 500
							}
						},
						{
							"id": 730,
							"name": "notify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 731,
									"name": "notify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 732,
											"name": "output",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.notify",
										"id": 506
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 88,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.notify",
								"id": 506
							}
						},
						{
							"id": 720,
							"name": "process",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 721,
									"name": "process",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 722,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Node.process",
										"id": 509
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 281,
									"character": 11
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Node.process",
								"id": 509
							}
						},
						{
							"id": 727,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"signatures": [
								{
									"id": 728,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 729,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Node.set",
										"id": 503
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 81,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Node.set",
								"id": 503
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								717
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								723,
								716
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								724,
								730,
								720,
								727
							]
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 274,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Node",
							"id": 496,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Event",
									"id": 1765,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "KeyedCollection",
									"id": 853,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T",
											"constraint": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 844,
					"name": "EventCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Node is a transformation between type S and type T. Both S\nand T much extend Base.",
						"text": "The transformation happens when a `Node` has its `set()` method called\nby another `Node`. The `input` to set() is of type `S`. When this happens\na subclass specific implementation of `process` is called to actually\ntransform the input (of type `S` to an output of type `T`). Of course\n`S` and `T` maybe the same if the input and output types are expected\nto be the same. The result of `process`, of type `T`, is returned and\nthe passed onto other downstream Nodes, by calling their `set()` methods.\n"
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 60,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 845,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 846,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 847,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 60,
									"character": 27
								}
							]
						}
					}
				},
				{
					"id": 857,
					"name": "EventMap",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 622,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 496,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 854,
					"name": "EventToKeyedCollection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 610,
							"character": 34
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 496,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 853,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 853,
					"name": "KeyedCollection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 66,
							"character": 27
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Collection",
								"id": 269,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 848,
					"name": "KeyedCollectionCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 61,
							"character": 35
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 849,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 850,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 851,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 269,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										},
										{
											"id": 852,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "stream.ts",
									"line": 61,
									"character": 52
								}
							]
						}
					}
				},
				{
					"id": 856,
					"name": "KeyedCollectionMap",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 618,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 496,
						"typeArguments": [
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 853,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 853,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 855,
					"name": "KeyedCollectionToEvent",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 614,
							"character": 34
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 496,
						"typeArguments": [
							{
								"type": "reference",
								"name": "KeyedCollection",
								"id": 853,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "S"
									}
								]
							},
							{
								"type": "reference",
								"name": "Event",
								"id": 1765,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 858,
					"name": "streamFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 859,
							"name": "streamFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 860,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EventStream",
								"id": 752,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									},
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "stream.ts",
							"line": 747,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						733,
						638,
						676,
						512,
						529,
						752,
						619,
						593,
						548,
						797,
						567,
						496,
						695,
						657,
						813,
						714
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						844,
						857,
						854,
						853,
						848,
						856,
						855
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						858
					]
				}
			],
			"sources": [
				{
					"fileName": "stream.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1531,
			"name": "\"time\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/time.ts",
			"children": [
				{
					"id": 1532,
					"name": "Time",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Constructs a new `Time` object that can be used as a key for `Event`'s.",
						"text": "A `Time` object represents a timestamp, and is stored as a Javascript `Date`\nobject. The difference with just a `Date` is that is conforms to the interface\nrequired to be an `Event` key.\n"
					},
					"children": [
						{
							"id": 1537,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1538,
									"name": "new Time",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1539,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Date"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 29,
									"character": 21
								}
							]
						},
						{
							"id": 1536,
							"name": "_d",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "time.ts",
									"line": 29,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1554,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1555,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The begin time of this `Event`, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 84,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 1556,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1557,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The end time of this `Event`, which will be just the timestamp"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 91,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 1550,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1551,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 73,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 1542,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1543,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 48,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 1548,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1549,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in Local time, as a string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 66,
									"character": 17
								}
							]
						},
						{
							"id": 1544,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1545,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 52,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 1558,
							"name": "toTimeRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1559,
									"name": "toTimeRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1560,
											"name": "duration",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Duration",
												"id": 16
											}
										},
										{
											"id": 1561,
											"name": "align",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeAlignment",
												"id": 1452
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 95,
									"character": 15
								}
							]
						},
						{
							"id": 1546,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1547,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The timestamp of this data, in UTC time, as a string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 59,
									"character": 15
								}
							]
						},
						{
							"id": 1540,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1541,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 44,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 1552,
							"name": "valueOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1553,
									"name": "valueOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 77,
									"character": 11
								}
							]
						},
						{
							"id": 1533,
							"name": "isTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1534,
									"name": "isTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1535,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "time.ts",
									"line": 25,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1537
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1536
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1554,
								1556,
								1550,
								1542,
								1548,
								1544,
								1558,
								1546,
								1540,
								1552,
								1533
							]
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 24,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 1565,
					"name": "now",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1566,
							"name": "now",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the the current time as a `Time` object"
							},
							"type": {
								"type": "reference",
								"name": "Time",
								"id": 1532
							}
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 122,
							"character": 12
						}
					]
				},
				{
					"id": 1562,
					"name": "timeFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1563,
							"name": "timeFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs a new `Time` object. A `Time` object represents a timestamp,\nand is stored as a Javascript `Date` object. The difference with just a Date is that\nthis conforms to the interface required to be an `Event` key."
							},
							"parameters": [
								{
									"id": 1564,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Time",
								"id": 1532
							}
						}
					],
					"sources": [
						{
							"fileName": "time.ts",
							"line": 115,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1532
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1565,
						1562
					]
				}
			],
			"sources": [
				{
					"fileName": "time.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1600,
			"name": "\"timerange\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/timerange.ts",
			"children": [
				{
					"id": 1601,
					"name": "TimeRange",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `TimeRange` is a simple representation of a begin and end time, used\nto maintain consistency across an application.",
						"text": "You can define a `TimeRange` with `moments`, Javascript `Date objects\nor `ms` since UNIX epoch. Here we construct one with two moments:\n\n```js\nvar fmt = \"YYYY-MM-DD HH:mm\";\nvar beginTime = moment(\"2012-01-11 11:11\", fmt);\nvar endTime =   moment(\"2012-02-22 12:12\", fmt);\nvar range = new TimeRange(beginTime, endTime);\n```\n\nor with ms times:\n\n```js\nvar range = new TimeRange([1326309060000, 1329941520000]);\n```\n"
					},
					"children": [
						{
							"id": 1603,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
							},
							"signatures": [
								{
									"id": 1604,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 1605,
											"name": "arg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													},
													{
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Date"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								},
								{
									"id": 1606,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 1607,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 1608,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								},
								{
									"id": 1609,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 1610,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										},
										{
											"id": 1611,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								},
								{
									"id": 1612,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 1613,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										},
										{
											"id": 1614,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Moment"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								},
								{
									"id": 1615,
									"name": "new TimeRange",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeRange` which may be of several different formats:\n  - Another `TimeRange` (copy constructor)\n  - An `Immutable.List` containing two Dates.\n  - A Javascript array containing two `Date` or `ms` timestamps\n  - Two arguments, begin and end, each of which may be a `Date`,\n    a `Moment`, or a `ms` timestamp."
									},
									"parameters": [
										{
											"id": 1616,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1617,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 44,
									"character": 41
								},
								{
									"fileName": "timerange.ts",
									"line": 54,
									"character": 55
								},
								{
									"fileName": "timerange.ts",
									"line": 55,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 56,
									"character": 40
								},
								{
									"fileName": "timerange.ts",
									"line": 57,
									"character": 44
								},
								{
									"fileName": "timerange.ts",
									"line": 58,
									"character": 44
								}
							]
						},
						{
							"id": 1602,
							"name": "_range",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Internally, the timerange is stored as an Immutable.List"
							},
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 44,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Date"
									}
								]
							}
						},
						{
							"id": 1634,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1635,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the begin time of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.begin",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 151,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.begin",
								"id": 11
							}
						},
						{
							"id": 1651,
							"name": "contains",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1652,
									"name": "contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determine if a `Date` or a `TimeRange` is contained entirely\nwithin this `TimeRange`"
									},
									"parameters": [
										{
											"id": 1653,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Date"
													},
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 208,
									"character": 12
								}
							]
						},
						{
							"id": 1660,
							"name": "disjoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1661,
									"name": "disjoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other `TimeRange` in no way\noverlaps this `TimeRange`."
									},
									"parameters": [
										{
											"id": 1662,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 243,
									"character": 12
								}
							]
						},
						{
							"id": 1669,
							"name": "duration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1670,
									"name": "duration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the duration of the `TimeRange` in milliseconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 273,
									"character": 12
								}
							]
						},
						{
							"id": 1636,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1637,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the end time of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.end",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 158,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.end",
								"id": 13
							}
						},
						{
							"id": 1648,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1649,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns if the two `TimeRange`'s can be considered equal,\nin that they have the same times."
									},
									"parameters": [
										{
											"id": 1650,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 197,
									"character": 10
								}
							]
						},
						{
							"id": 1663,
							"name": "extents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1664,
									"name": "extents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `Timerange` which covers the extents of this and\nother combined."
									},
									"parameters": [
										{
											"id": 1665,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 251,
									"character": 11
								}
							]
						},
						{
							"id": 1630,
							"name": "humanize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1631,
									"name": "humanize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the `TimeRange`, e.g.\n\"Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 129,
									"character": 12
								}
							]
						},
						{
							"id": 1671,
							"name": "humanizeDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1672,
									"name": "humanizeDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A user friendly version of the duration."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 280,
									"character": 20
								}
							]
						},
						{
							"id": 1620,
							"name": "internal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1621,
									"name": "internal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the internal range, which is an `Immutable.List` of two elements\ncontaining begin and end times as `Date`'s."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 90,
									"character": 12
								}
							]
						},
						{
							"id": 1666,
							"name": "intersection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1667,
									"name": "intersection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `TimeRange` which represents the intersection\n(overlapping) part of this and other."
									},
									"parameters": [
										{
											"id": 1668,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											},
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 261,
									"character": 16
								}
							]
						},
						{
							"id": 1638,
							"name": "mid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1639,
									"name": "mid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 165,
									"character": 7
								}
							]
						},
						{
							"id": 1657,
							"name": "overlaps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1658,
									"name": "overlaps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the passed in other `TimeRange` overlaps\nthis `TimeRange`."
									},
									"parameters": [
										{
											"id": 1659,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 228,
									"character": 12
								}
							]
						},
						{
							"id": 1632,
							"name": "relativeString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1633,
									"name": "relativeString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a human friendly version of the `TimeRange`",
										"tags": [
											{
												"tag": "example",
												"text": "\nExample: \"a few seconds ago to a month ago\"\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 142,
									"character": 18
								}
							]
						},
						{
							"id": 1642,
							"name": "setBegin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1643,
									"name": "setBegin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new begin time on the `TimeRange`. The result will be\na new `TimeRange`."
									},
									"parameters": [
										{
											"id": 1644,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 181,
									"character": 12
								}
							]
						},
						{
							"id": 1645,
							"name": "setEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1646,
									"name": "setEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new end time on the `TimeRange`. The result will be\na new `TimeRange`."
									},
									"parameters": [
										{
											"id": 1647,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 189,
									"character": 10
								}
							]
						},
						{
							"id": 1640,
							"name": "timestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1641,
									"name": "timestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the midpoint of the `TimeRange` as the representitive\ntimestamp for the timerange."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.timestamp",
										"id": 9
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 173,
									"character": 13
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.timestamp",
								"id": 9
							}
						},
						{
							"id": 1622,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1623,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as JSON, which will be a Javascript array\nof two `ms` timestamps."
									},
									"type": {
										"type": "reference",
										"name": "__type"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toJSON",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 98,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toJSON",
								"id": 5
							}
						},
						{
							"id": 1626,
							"name": "toLocalString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1627,
									"name": "toLocalString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string expressed in local time"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 114,
									"character": 17
								}
							]
						},
						{
							"id": 1624,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1625,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string, useful for serialization.",
										"returns": "String representation of the TimeRange\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.toString",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 107,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.toString",
								"id": 7
							}
						},
						{
							"id": 1628,
							"name": "toUTCString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1629,
									"name": "toUTCString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the `TimeRange` as a string expressed in UTC time"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 121,
									"character": 15
								}
							]
						},
						{
							"id": 1618,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1619,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Key.type",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 82,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Key.type",
								"id": 3
							}
						},
						{
							"id": 1654,
							"name": "within",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1655,
									"name": "within",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `TimeRange` is completely within the supplied\nother `TimeRange`."
									},
									"parameters": [
										{
											"id": 1656,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timerange.ts",
									"line": 220,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1603
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1602
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1634,
								1651,
								1660,
								1669,
								1636,
								1648,
								1663,
								1630,
								1671,
								1620,
								1666,
								1638,
								1657,
								1632,
								1642,
								1645,
								1640,
								1622,
								1626,
								1624,
								1628,
								1618,
								1654
							]
						}
					],
					"sources": [
						{
							"fileName": "timerange.ts",
							"line": 40,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Key",
							"id": 2
						}
					]
				},
				{
					"id": 1673,
					"name": "timerange",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1674,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A `Timerange` is a simple representation of a begin and end time, used\nto maintain consistency across an application."
							},
							"parameters": [
								{
									"id": 1675,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											},
											{
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Date"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1676,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1677,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 1678,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1679,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1680,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								},
								{
									"id": 1681,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1682,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1683,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Moment"
									}
								},
								{
									"id": 1684,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Moment"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1685,
							"name": "timerange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1686,
									"name": "begin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1687,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "timerange.ts",
							"line": 289,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 290,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 291,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 292,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 293,
							"character": 18
						},
						{
							"fileName": "timerange.ts",
							"line": 294,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1601
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1673
					]
				}
			],
			"sources": [
				{
					"fileName": "timerange.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1212,
			"name": "\"timeseries\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/timeseries.ts",
			"children": [
				{
					"id": 1234,
					"name": "TimeSeries",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `TimeSeries<K>` represents a series of `Event<K>`'s, contained within a `Collection<K>`,\nalong with associated meta data.",
						"text": "Each `Event<K>`, a single entity in the Collection, is a combination of:\n* `Key` of type K (`Time`, `TimeRange`, or `Index`)\n* `data` of type Immutable.Map<string, any> - corresponding set of key/values\n\nTo construct a `TimeSeries` you would typicaly use the wire format, which is a data\nstructure passed into one of the helper factory functions. See the constructor\ndocs below for details of this format. It's fairly simple.\n\nYou can also construct a `TimeSeries` from a list of `Event`s.\n\nA `TimeSeries` supports some notion of what timezone it is in, and this can be\nspecified in the constructor. `Event`s in this `TimeSeries` are considered to\nbe in this timezone. Specifically, if they are `Event<Index>`'s an event might be\nat \"2014-08-31\". The actual timerange of that representation depends on where\nyou are. Note: an `Index` of \"1d-1234\" is always a UTC representation.\n\nMethods exist to query back out of the `TimeSeries`:\n\n * Specific `Event`s with `at()`, `atFirst()` and `atLast()`, or at a\nparticular time with `atTime()`.\n * Meta data can also be accessed using `name()`, `timezone()` and `isUTC()`,\nalong with `columns()` and the `eventList()` or `collection()` itself. More\ngeneral user defined meta data can be accessed with `meta()`.\n * The overall time range of the `TimeSeries` can be queried with `timerange()`,\nof for convenience also see `begin()` and `end()`.\n\nMutating a `TimeSeries` will always return a new `TimeSeries`:\n * Meta data can be modified with `setMeta()`, `setName()` and renameColumns().\n * The set of `Event`s can be altered with operations such as `slice()`, `crop()`.\n * Or alternatively you can `select()` specific columns.\n * You can take the `rate()` of data\n\nBasic statistics operations allow you to get percentiles, quantiles,\n`avg()`, `min()`, `max()`, `sum()`, `count()` etc for any column within the\n`TimeSeries`.\n\nTraversing over the `Event`s in the `TimeSeries` can be done most efficiently\nwith either `forEach()` or `map()`.\n\nReducing data within a `TimeSeries` is a common task:\n * `collapse()` will take a list of columns an collapse those down to\n   a single output column using a function (e.g. sum())\n * `fixedWindowRollup()` lets you aggregate into specific time windows\n   to produce a new series.\n * `hourlyRollup()` and `dailyRollup()` similarly\n * You can also make a new mapping from a window to a `Collection` out\n   of the `TimeSeries` with `collectionByWindow()`\n * see also static functions for reducing and merging\n   multiple `TimeSeries` together\n\nFixing or transforming non-ideal data is another important function:\n * `sizeValid()` will tell you how many `Event`s are valid\n * statistic functions all take a filter function that can filter the\n   `Event`s being processed to handle missing or bad data\n * `fill()` will fix missing data by inserting a new value where undefined,\n   null or NaN values are found, using interpolation or 0.\n * `align()` will change the time position of data to lie on specific time\n   boundaries using different interpolation methods (e.g. align to each minute)\n\nSome static methods also exist:\n * `equal()` and `is()` are two was to compare if a `TimeSeries` is the same.\n * `timeSeriesListMerge()` can be used to concatenate two `TimeSeries` together\n   or to merge multiple `TimeSeries` together that have different column names.\n * `timeSeriesListReduce()` can be used for operations like summing multiple\n   `TimeSeries` together\n\n"
					},
					"typeParameter": [
						{
							"id": 1235,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1238,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "You can initialize a `TimeSeries` with either a list of `Event`'s, or with\nwhat we call the wire format. Usually you would want to construct a `TimeSeries`\nby converting your data into this format.",
								"text": "The format of the data is an object which has several special keys,\ni.e. fields that have special meaning for the `TimeSeries` and additional keys\nthat are optionally added to form the meta data for the `TimeSeries`:\n\nSpecial keys:\n\n - **name** - The name of the series (optional)\n - **columns** - are necessary and give labels to the data in the points. The first\n                 column is special, it is the the key for the row and should be\n                 either \"time\", \"timerange\" or \"index\". Other columns are user\n                 defined. (required)\n - **points** - are an array of tuples. Each row is at a different time (or timerange),\n                and each value corresponds to the column labels. (required)\n - **tz** - timezone (optional)\n\nYou can add additional fields as meta data custom to your application.\n\nTo create a new `TimeSeries` object from the above data format, simply use one of\nthe factory functions. For `Time` based `TimeSeries` you would use `timeSeries()`.\nOther options are `timeRangeSeries()` and `indexedSeries()`:\n\nExample:\n\n```\nimport { timeSeries } from \"pondjs\";\n\nconst series = timeSeries({\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n        [1400425947000, 52, 12],\n        [1400425948000, 18, 42],\n        [1400425949000, 26, 81],\n        [1400425950000, 93, 11],\n        ...\n    ]\n});\n```\n\nAnother example:\n\n```\nconst availability = indexedSeries({\n    name: \"Last 3 months\",\n    columns: [\"index\", \"uptime\", incidents],\n    points: [\n        [\"2015-06\", \"100%\", 0], // 2015-06 specified here for June 2015\n        [\"2015-05\", \"92%\", 2],\n        [\"2015-04\", \"87%\", 5]\n    ]\n});\n```\n\nAlternatively, you can construct a `TimeSeries` with a list of events.\nTo do this you need to use the `TimeSeries` constructor directly.\n\nThese may be `TimeEvents`, `TimeRangeEvents` or `IndexedEvents`:\n\n```\nimport { TimeSeries } from \"pondjs\"\nconst events = [];\nevents.push(timeEvent(time(new Date(2015, 7, 1)), Immutable.Map({ value: 27 })));\nevents.push(timeEvent(time(new Date(2015, 8, 1)), Immutable.Map({ value: 14 })));\nconst series = new TimeSeries({\n    name: \"events\",\n    events: Immutable.List(events)\n});\n```\n"
							},
							"signatures": [
								{
									"id": 1239,
									"name": "new TimeSeries",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "You can initialize a `TimeSeries` with either a list of `Event`'s, or with\nwhat we call the wire format. Usually you would want to construct a `TimeSeries`\nby converting your data into this format.",
										"text": "The format of the data is an object which has several special keys,\ni.e. fields that have special meaning for the `TimeSeries` and additional keys\nthat are optionally added to form the meta data for the `TimeSeries`:\n\nSpecial keys:\n\n - **name** - The name of the series (optional)\n - **columns** - are necessary and give labels to the data in the points. The first\n                 column is special, it is the the key for the row and should be\n                 either \"time\", \"timerange\" or \"index\". Other columns are user\n                 defined. (required)\n - **points** - are an array of tuples. Each row is at a different time (or timerange),\n                and each value corresponds to the column labels. (required)\n - **tz** - timezone (optional)\n\nYou can add additional fields as meta data custom to your application.\n\nTo create a new `TimeSeries` object from the above data format, simply use one of\nthe factory functions. For `Time` based `TimeSeries` you would use `timeSeries()`.\nOther options are `timeRangeSeries()` and `indexedSeries()`:\n\nExample:\n\n```\nimport { timeSeries } from \"pondjs\";\n\nconst series = timeSeries({\n    name: \"traffic\",\n    columns: [\"time\", \"in\", \"out\"],\n    points: [\n        [1400425947000, 52, 12],\n        [1400425948000, 18, 42],\n        [1400425949000, 26, 81],\n        [1400425950000, 93, 11],\n        ...\n    ]\n});\n```\n\nAnother example:\n\n```\nconst availability = indexedSeries({\n    name: \"Last 3 months\",\n    columns: [\"index\", \"uptime\", incidents],\n    points: [\n        [\"2015-06\", \"100%\", 0], // 2015-06 specified here for June 2015\n        [\"2015-05\", \"92%\", 2],\n        [\"2015-04\", \"87%\", 5]\n    ]\n});\n```\n\nAlternatively, you can construct a `TimeSeries` with a list of events.\nTo do this you need to use the `TimeSeries` constructor directly.\n\nThese may be `TimeEvents`, `TimeRangeEvents` or `IndexedEvents`:\n\n```\nimport { TimeSeries } from \"pondjs\"\nconst events = [];\nevents.push(timeEvent(time(new Date(2015, 7, 1)), Immutable.Map({ value: 27 })));\nevents.push(timeEvent(time(new Date(2015, 8, 1)), Immutable.Map({ value: 14 })));\nconst series = new TimeSeries({\n    name: \"events\",\n    events: Immutable.List(events)\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1240,
											"name": "arg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TimeSeries",
														"id": 1234,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TimeSeriesEvents",
														"id": 1220,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 279,
									"character": 25
								}
							]
						},
						{
							"id": 1236,
							"name": "_collection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 278,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "SortedCollection",
								"id": 915,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 1237,
							"name": "_data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 279,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": " null"
						},
						{
							"id": 1410,
							"name": "_rollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1411,
									"name": "_rollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 1412,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 1486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1293,
									"character": 11
								}
							]
						},
						{
							"id": 1343,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1344,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `TimeSeries` `Event`s down to a single value per field.",
										"text": "This makes use of a user defined function suppled as the `func` to do\nthe reduction of values to a single value. The `ReducerFunction` is defined\nlike so:\n\n```\n(values: number[]) => number\n```\n\nFields to be aggregated are specified using a `fieldSpec` argument, which\ncan be a field name or array of field names.\n\nIf the `fieldSpec` matches multiple fields then an object is returned\nwith keys being the fields and the values being the aggregated value for\nthose fields. If the `fieldSpec` is for a single field then just the\naggregated value is returned.\n\nNote: The `TimeSeries` class itself contains most of the common aggregation functions\nbuilt in (e.g. `series.avg(\"value\")`), but this is here to help when what\nyou need isn't supplied out of the box.\n"
									},
									"parameters": [
										{
											"id": 1345,
											"name": "func",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReducerFunction",
												"id": 1513
											}
										},
										{
											"id": 1346,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 775,
									"character": 13
								}
							]
						},
						{
							"id": 1395,
							"name": "align",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1396,
									"name": "align",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Align event values to regular time boundaries. The value at\nthe boundary is interpolated. Only the new interpolated\npoints are returned. If limit is reached nulls will be\nreturned at each boundary position.",
										"text": "One use case for this is to modify irregular data (i.e. data\nthat falls at slightly irregular times) so that it falls into a\nsequence of evenly spaced values. We use this to take data we\nget from the network which is approximately every 30 second\n(:32, 1:02, 1:34, ...) and output data on exact 30 second\nboundaries (:30, 1:00, 1:30, ...).\n\nAnother use case is data that might be already aligned to\nsome regular interval, but that contains missing points.\nWhile `fill()` can be used to replace `null` values, `align()`\ncan be used to add in missing points completely. Those points\ncan have an interpolated value, or by setting limit to 0,\ncan be filled with nulls. This is really useful when downstream\nprocessing depends on complete sequences.\n\nExample:\n```\nconst aligned = ts.align({\n    fieldSpec: \"value\",\n    period: \"1m\",\n    method: \"linear\"\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1397,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AlignmentOptions",
												"id": 1469
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1112,
									"character": 9
								}
							]
						},
						{
							"id": 1253,
							"name": "at",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1254,
									"name": "at",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Access a specific `TimeSeries` event via its position"
									},
									"parameters": [
										{
											"id": 1255,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 439,
									"character": 6
								}
							]
						},
						{
							"id": 1259,
							"name": "atFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1260,
									"name": "atFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the first `Event` in the series."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 457,
									"character": 11
								}
							]
						},
						{
							"id": 1261,
							"name": "atLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1262,
									"name": "atLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the last `Event` in the series."
									},
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 464,
									"character": 10
								}
							]
						},
						{
							"id": 1256,
							"name": "atTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1257,
									"name": "atTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an event in the series by its time. This is the same\nas calling `bisect()` first and then using `at()` with the index."
									},
									"parameters": [
										{
											"id": 1258,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 447,
									"character": 10
								}
							]
						},
						{
							"id": 1325,
							"name": "avg",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1326,
									"name": "avg",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `TimeSeries` down\nto their average(s).",
										"text": "The `fieldSpec` passed into the avg function is either\na field name or a list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nExample:\n```\nconst series = timeSeries({\n    name: \"data\",\n    columns: [\"time\", \"temperature\"],\n    points: [\n        [1509725624100, 5],\n        [1509725624200, 8],\n        [1509725624300, 2]\n    ]\n});\nconst avg = series.avg(\"temperature\"); // 5\n```\n"
									},
									"parameters": [
										{
											"id": 1327,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1328,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 704,
									"character": 7
								}
							]
						},
						{
							"id": 1249,
							"name": "begin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1250,
									"name": "begin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the earliest time represented in the `TimeSeries`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 425,
									"character": 9
								}
							]
						},
						{
							"id": 1267,
							"name": "bisect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1268,
									"name": "bisect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index that bisects the `TimeSeries` at the time specified."
									},
									"parameters": [
										{
											"id": 1269,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 1270,
											"name": "b",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 485,
									"character": 10
								}
							]
						},
						{
							"id": 1386,
							"name": "collapse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1387,
									"name": "collapse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collapse multiple columns of a `Collection` into a new column.",
										"text": "The `collapse()` method needs to be supplied with a `CollapseOptions`\nobject. You use this to specify the columns to collapse, the column name\nof the column to collapse to and the reducer function. In addition you\ncan choose to append this new column or use it in place of the columns\ncollapsed.\n\n```\n{\n   fieldSpecList: string[];\n   fieldName: string;\n   reducer: any;\n   append: boolean;\n}\n```\nOptions:\n * `fieldSpecList` - the list of fields to collapse\n * `fieldName` - the new field's name\n * `reducer()` - a function to collapse using e.g. `avg()`\n * `append` - to include only the new field, or include it in addition\n    to the previous fields.\n\nExample:\n```\nconst series = timeSeries({\n    name: \"data\",\n    columns: [\"time\", \"a\", \"b\"],\n    points: [\n        [1509725624100, 5, 6],\n        [1509725624200, 4, 2],\n        [1509725624300, 6, 3]\n    ]\n});\n\n// Sum columns \"a\" and \"b\" into a new column \"v\"\nconst sums = series.collapse({\n    fieldSpecList: [\"a\", \"b\"],\n    fieldName: \"v\",\n    reducer: sum(),\n    append: false\n});\n\nsums.at(0).get(\"v\")  // 11\nsums.at(1).get(\"v\")  // 6\nsums.at(2).get(\"v\")  // 9\n```\n"
									},
									"parameters": [
										{
											"id": 1388,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CollapseOptions",
												"id": 1474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 986,
									"character": 12
								}
							]
						},
						{
							"id": 1413,
							"name": "collectByWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1414,
									"name": "collectByWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds multiple `Collection`s, each collects together\nevents within a window of size `windowSize`. Note that these\nare windows defined relative to Jan 1st, 1970, and are UTC.",
										"text": "Example:\n```\nconst timeseries = new TimeSeries(data);\nconst collections = timeseries.collectByFixedWindow({windowSize: \"1d\"});\nconsole.log(collections); // {1d-16314: Collection, 1d-16315: Collection, ...}\n```\n\n"
									},
									"parameters": [
										{
											"id": 1415,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 1486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Collection",
												"id": 269,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1316,
									"character": 19
								}
							]
						},
						{
							"id": 1297,
							"name": "collection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1298,
									"name": "collection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the internal `SortedCollection` of events for this `TimeSeries`"
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 592,
									"character": 14
								}
							]
						},
						{
							"id": 1293,
							"name": "columns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1294,
									"name": "columns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the list of column names as a list of string.\nThis is determined by traversing though the events and collecting the set.\nNote: the order is not defined"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 570,
									"character": 11
								}
							]
						},
						{
							"id": 1311,
							"name": "count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1312,
									"name": "count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of events in this `TimeSeries`. Alias\nfor size()."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 644,
									"character": 9
								}
							]
						},
						{
							"id": 1275,
							"name": "crop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1276,
									"name": "crop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Crop the `TimeSeries` to the specified `TimeRange` and return a new `TimeSeries`."
									},
									"parameters": [
										{
											"id": 1277,
											"name": "tr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 502,
									"character": 8
								}
							]
						},
						{
							"id": 1407,
							"name": "dailyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1408,
									"name": "dailyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into days.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n\n"
									},
									"parameters": [
										{
											"id": 1409,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 1486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1226,
									"character": 15
								}
							]
						},
						{
							"id": 1251,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1252,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the latest time represented in the `TimeSeries`."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 432,
									"character": 7
								}
							]
						},
						{
							"id": 1295,
							"name": "eventList",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1296,
									"name": "eventList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the list of Events in the `Collection` of events for this `TimeSeries`\nThe result is an Immutable.List of the `Event`s."
									},
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 585,
									"character": 13
								}
							]
						},
						{
							"id": 1392,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1393,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take the data in this `TimeSeries` and \"fill\" any missing or invalid\nvalues. This could be setting `null` values to zero so mathematical\noperations will succeed, interpolate a new value, or pad with the\npreviously given value.",
										"text": "The fill is controlled by the `FillOptions`. This is an object of the form:\n```\n{\n    fieldSpec: string | string[];\n    method?: FillMethod;\n    limit?: number;\n}\n```\nOptions:\n * `fieldSpec` - the field to fill\n * `method` - the interpolation method, one of `FillMethod.Hold`, `FillMethod.Pad`\n              or `FillMethod.Linear`\n * `limit` - the number of missing values to fill before giving up\n\nExample:\n```\nconst filled = timeseries.fill({\n    fieldSpec: [\"direction.in\", \"direction.out\"],\n    method: \"zero\",\n    limit: 3\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1394,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FillOptions",
												"id": 1482
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1054,
									"character": 8
								}
							]
						},
						{
							"id": 1376,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1377,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter the `TimeSeries`'s `Event`'s with the supplied function.",
										"text": "The function `predicate` is passed each `Event` and should return\ntrue to keep the `Event` or false to discard.\n\nExample:\n```\nconst filtered = series.filter(e => e.get(\"a\") < 8)\n```\n"
									},
									"parameters": [
										{
											"id": 1378,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1379,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1380,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1381,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1382,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"sources": [
														{
															"fileName": "timeseries.ts",
															"line": 895,
															"character": 28
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 895,
									"character": 17
								}
							]
						},
						{
							"id": 1401,
							"name": "fixedWindowRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1402,
									"name": "fixedWindowRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events within the `TimeSeries`\nacross multiple fixed windows of size `windowSize`.",
										"text": "Note that these are windows defined relative to Jan 1st, 1970,\nand are UTC, so this is best suited to smaller window sizes\n(hourly, 5m, 30s, 1s etc), or in situations where you don't care\nabout the specific window, just that the data is smaller.\n\nEach window then has an aggregation specification applied as\n`aggregation`. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{ in_avg: { in: avg() }, out_avg: { out: avg() } }\n```\nwill aggregate both \"in\" and \"out\" using the average aggregation\nfunction and return the result as in_avg and out_avg.\n\nNote that each aggregation function, such as `avg()` also can take a\nfilter function to apply before the aggregation. A set of filter functions\nexists to do common data cleanup such as removing bad values. For example:\n```\n{ value_avg: { value: avg(filter.ignoreMissing) } }\n```\n\nExample:\n```\n    const timeseries = new TimeSeries(data);\n    const dailyAvg = timeseries.fixedWindowRollup({\n        windowSize: \"1d\",\n        aggregation: {value: {value: avg()}}\n    });\n```\n\nNote that to output the result as `TimeEvent`'s instead of `IndexedEvent`'s,\nyou can do the following :\n```\ntimeseries.fixedWindowRollup(options).mapKeys(index => time(index.asTimerange().mid()))\n```\n\n"
									},
									"parameters": [
										{
											"id": 1403,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 1486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1168,
									"character": 21
								}
							]
						},
						{
							"id": 1368,
							"name": "flatMap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1369,
									"name": "flatMap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flat map over the events in this `TimeSeries`.",
										"text": "For each `Event` passed to your callback function you should map that to\nzero, one or many `Event`s, returned as an `Immutable.List<Event>`.\n\nExample:\n```\nconst series = timeSeries({\n    name: \"Map Traffic\",\n    columns: [\"time\", \"NASA_north\", \"NASA_south\"],\n    points: [\n        [1400425951000, { in: 100, out: 200 }, { in: 145, out: 135 }],\n        [1400425952000, { in: 200, out: 400 }, { in: 146, out: 142 }],\n        [1400425953000, { in: 300, out: 600 }, { in: 147, out: 158 }],\n        [1400425954000, { in: 400, out: 800 }, { in: 155, out: 175, other: 42 }]\n    ]\n});\nconst split = series.flatMap(e =>\n    Immutable.List([\n        e.setData(e.get(\"NASA_north\")),\n        e.setData(e.get(\"NASA_south\"))\n    ])\n);\nsplit.toString();\n\n// {\n//     \"name\": \"Map Traffic\",\n//     \"tz\": \"Etc/UTC\",\n//     \"columns\": [\"time\",\"in\",\"out\",\"other\"],\n//     \"points\":[\n//         [1400425951000, 100, 200, null],\n//         [1400425951000, 145, 135, null],\n//         [1400425952000, 200, 400, null],\n//         [1400425952000, 146, 142, null],\n//         [1400425953000, 300, 600, null],\n//         [1400425953000, 147, 158, null],\n//         [1400425954000, 400, 800, null],\n//         [1400425954000, 155, 175, 42]\n//     ]\n// }\n```\n"
									},
									"typeParameter": [
										{
											"id": 1370,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1371,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1372,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1373,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1374,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1375,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "List",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "M",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "timeseries.ts",
															"line": 878,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 877,
									"character": 11
								}
							]
						},
						{
							"id": 1352,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1353,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterate over the events in this `TimeSeries`.",
										"text": "`Event`s are in the chronological. The `sideEffect` is a user supplied\nfunction which is passed the `Event<T>` and the index:\n```\n(e: Event<T>, index: number) => { //... }\n```\n\nReturns the number of items iterated.\n\nExample:\n```\nseries.forEach((e, i) => {\n    console.log(`Event[${i}] is ${e.toString()}`);\n})\n```\n"
									},
									"typeParameter": [
										{
											"id": 1354,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1355,
											"name": "sideEffect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1356,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1357,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1358,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1359,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "timeseries.ts",
															"line": 810,
															"character": 38
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 810,
									"character": 11
								}
							]
						},
						{
							"id": 1404,
							"name": "hourlyRollup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1405,
									"name": "hourlyRollup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new `TimeSeries` by dividing events into hours.",
										"text": "Each window then has an aggregation specification `aggregation`\napplied. This specification describes a mapping of output\nfieldNames to aggregation functions and their fieldPath. For example:\n```\n{in_avg: {in: avg()}, out_avg: {out: avg()}}\n```\n\n"
									},
									"parameters": [
										{
											"id": 1406,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RollupOptions",
												"id": 1486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1200,
									"character": 16
								}
							]
						},
						{
							"id": 1283,
							"name": "index",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1284,
									"name": "index",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeSeries `Index`, if it has one. This is still in the\nAPI for historical reasons but is just a short cut to calling\n`series.getMeta(\"index\")`."
									},
									"type": {
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 533,
									"character": 9
								}
							]
						},
						{
							"id": 1287,
							"name": "indexAsRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1288,
									"name": "indexAsRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeseries `Index`, as a `TimeRange`, if it has one."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 547,
									"character": 16
								}
							]
						},
						{
							"id": 1285,
							"name": "indexAsString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1286,
									"name": "indexAsString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the timeSeries `Index`, as a `string`, if it has one."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 540,
									"character": 17
								}
							]
						},
						{
							"id": 1289,
							"name": "isUTC",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1290,
									"name": "isUTC",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch if the timezone is UTC"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 554,
									"character": 9
								}
							]
						},
						{
							"id": 1360,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1361,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Map the `Event`s in this `TimeSeries` to new `Event`s.",
										"text": "For each `Event` passed to your `mapper` function you return a new Event:\n```\n(event: Event<T>, index: number) => Event<M>\n```\n\nExample:\n```\nconst mapped = sorted.map(e => {\n    return new Event(e.key(), { a: e.get(\"x\") * 2 });\n});\n```\n"
									},
									"typeParameter": [
										{
											"id": 1362,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1363,
											"name": "mapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1364,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1365,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1366,
																	"name": "event",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"name": "Event",
																		"id": 1765,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T",
																				"constraint": {
																					"type": "reference",
																					"name": "Key",
																					"id": 2
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1367,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "M",
																		"constraint": {
																			"type": "reference",
																			"name": "Key",
																			"id": 2
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "timeseries.ts",
															"line": 829,
															"character": 30
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 829,
									"character": 7
								}
							]
						},
						{
							"id": 1317,
							"name": "max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1318,
									"name": "max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the `Event`'s in this `TimeSeries` down to\ntheir maximum value(s).",
										"text": "The `fieldSpec` passed into the avg function is either a field name or\na list of fields.\n\nThe `filter` is one of the Pond filter functions that can be used to remove\nbad values in different ways before filtering.\n\nThe result is the maximum value if the fieldSpec is for one field. If\nmultiple fields then a map of fieldName -> max values is returned\n"
									},
									"parameters": [
										{
											"id": 1319,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1320,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 669,
									"character": 7
								}
							]
						},
						{
							"id": 1329,
							"name": "median",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1330,
									"name": "median",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their medium value"
									},
									"parameters": [
										{
											"id": 1331,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1332,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 711,
									"character": 10
								}
							]
						},
						{
							"id": 1299,
							"name": "meta",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1300,
									"name": "meta",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the meta data about this `TimeSeries` as a JSON object.\nAny extra data supplied to the `TimeSeries` constructor will be\nplaced in the meta data object. This returns either all of that\ndata as a JSON object, or a specific key if `key` is supplied."
									},
									"parameters": [
										{
											"id": 1301,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 602,
									"character": 8
								}
							]
						},
						{
							"id": 1321,
							"name": "min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1322,
									"name": "min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their minimum value"
									},
									"parameters": [
										{
											"id": 1323,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1324,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 676,
									"character": 7
								}
							]
						},
						{
							"id": 1278,
							"name": "name",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1279,
									"name": "name",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the `TimeSeries` name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 517,
									"character": 8
								}
							]
						},
						{
							"id": 1337,
							"name": "percentile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1338,
									"name": "percentile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets percentile q within the `TimeSeries`. This works the same way as numpy.",
										"text": "The percentile function has several parameters that can be supplied:\n* `q` - The percentile (should be between 0 and 100)\n* `fieldSpec` - Field or fields to find the percentile of\n* `interp` - Specifies the interpolation method to use when the desired, see below\n* `filter` - Optional filter function used to clean data before aggregating\n\nFor `interp` a `InterpolationType` should be supplied if the default (\"linear\") is\nnot used. This enum is defined like so:\n```\nenum InterpolationType {\n    linear = 1,  // i + (j - i) * fraction\n    lower,       // i\n    higher,      // j\n    nearest,     // i or j, whichever is nearest\n    midpoint     // (i + j) / 2\n}\n```\n"
									},
									"parameters": [
										{
											"id": 1339,
											"name": "q",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1340,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1341,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											},
											"defaultValue": " InterpolationType.linear"
										},
										{
											"id": 1342,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 743,
									"character": 14
								}
							]
						},
						{
							"id": 1347,
							"name": "quantile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1348,
									"name": "quantile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets n quantiles within the `TimeSeries`. This works the same way as numpy's percentile().\nFor example `timeseries.quantile(4)` would be the same as using percentile\nwith q = 0.25, 0.5 and 0.75."
									},
									"parameters": [
										{
											"id": 1349,
											"name": "quantity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1350,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1351,
											"name": "interp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "InterpolationType",
												"id": 203
											},
											"defaultValue": " InterpolationType.linear"
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 784,
									"character": 12
								}
							]
						},
						{
							"id": 1247,
							"name": "range",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1248,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Alias for `timerange()`"
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 418,
									"character": 9
								}
							]
						},
						{
							"id": 1398,
							"name": "rate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1399,
									"name": "rate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the derivative of the `TimeSeries` for the given columns. The result will\nbe per second. Optionally you can substitute in `null` values if the rate\nis negative. This is useful when a negative rate would be considered invalid."
									},
									"parameters": [
										{
											"id": 1400,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RateOptions",
												"id": 1479
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1122,
									"character": 8
								}
							]
						},
						{
							"id": 1389,
							"name": "renameColumns",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1390,
									"name": "renameColumns",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rename columns in the underlying events.",
										"text": "Takes a object of columns to rename. Returns a new `TimeSeries` containing\nnew events. Columns not in the dict will be retained and not renamed.\n\nExample:\n```\nnew_ts = ts.renameColumns({\n    renameMap: {in: \"new_in\", out: \"new_out\"}\n});\n```\n\nAs the name implies, this will only rename the main\n\"top level\" (ie: non-deep) columns. If you need more\nextravagant renaming, roll your own using `TimeSeries.map()`.\n"
									},
									"parameters": [
										{
											"id": 1391,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RenameColumnOptions",
												"id": 1494
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1008,
									"character": 17
								}
							]
						},
						{
							"id": 1383,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1384,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Select out specified columns from the `Event`s within this `TimeSeries`.",
										"text": "The `select()` method needs to be supplied with a `SelectOptions`\nobject, which takes the following form:\n\n```\n{\n    fields: string[];\n}\n```\nOptions:\n * `fields` - array of columns to keep within each `Event`.\n\nExample:\n```\nconst series = timeSeries({\n    name: \"data\",\n    columns: [\"time\", \"a\", \"b\", \"c\"],\n    points: [\n        [1509725624100, 5, 3, 4],\n        [1509725624200, 8, 1, 3],\n        [1509725624300, 2, 9, 1]\n    ]\n});\nconst newSeries = series.select({\n    fields: [\"b\", \"c\"]\n});\n\n// returns a series with columns [\"b\", \"c\"] only, \"a\" is discarded.\n```\n"
									},
									"parameters": [
										{
											"id": 1385,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SelectOptions",
												"id": 1492
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 932,
									"character": 10
								}
							]
						},
						{
							"id": 1263,
							"name": "setCollection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1264,
									"name": "setCollection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a new underlying collection for this `TimeSeries` and retuns a\nnew `TimeSeries`."
									},
									"typeParameter": [
										{
											"id": 1265,
											"name": "M",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										}
									],
									"parameters": [
										{
											"id": 1266,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "M",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 472,
									"character": 17
								}
							]
						},
						{
							"id": 1302,
							"name": "setMeta",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1303,
									"name": "setMeta",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set new meta data for the `TimeSeries` using a `key` and `value`.\nThe result will be a new `TimeSeries`."
									},
									"parameters": [
										{
											"id": 1304,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1305,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 614,
									"character": 11
								}
							]
						},
						{
							"id": 1280,
							"name": "setName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1281,
									"name": "setName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Rename the `TimeSeries`"
									},
									"parameters": [
										{
											"id": 1282,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 524,
									"character": 11
								}
							]
						},
						{
							"id": 1306,
							"name": "size",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1307,
									"name": "size",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of events in this `TimeSeries`"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 625,
									"character": 8
								}
							]
						},
						{
							"id": 1308,
							"name": "sizeValid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1309,
									"name": "sizeValid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of valid items in this `TimeSeries`.",
										"text": "Uses the `fieldSpec` to look up values in all events.\nIt then counts the number that are considered valid, which\nspecifically are not NaN, undefined or null.\n"
									},
									"parameters": [
										{
											"id": 1310,
											"name": "fieldSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 636,
									"character": 13
								}
							]
						},
						{
							"id": 1271,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1272,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform a slice of events within the `TimeSeries`, returns a new\n`TimeSeries` representing a portion of this `TimeSeries` from\n`begin` up to but not including `end`."
									},
									"parameters": [
										{
											"id": 1273,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1274,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 494,
									"character": 9
								}
							]
						},
						{
							"id": 1333,
							"name": "stdev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1334,
									"name": "stdev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Aggregates the events down to their stdev"
									},
									"parameters": [
										{
											"id": 1335,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1336,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 718,
									"character": 9
								}
							]
						},
						{
							"id": 1313,
							"name": "sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1314,
									"name": "sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the sum of the `Event`'s in this `Collection`\nfor the `fieldspec`. Optionally pass in a filter function."
									},
									"parameters": [
										{
											"id": 1315,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"value\""
										},
										{
											"id": 1316,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 652,
									"character": 7
								}
							]
						},
						{
							"id": 1245,
							"name": "timerange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1246,
									"name": "timerange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the extents of the `TimeSeries` as a `TimeRange`."
									},
									"type": {
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 411,
									"character": 13
								}
							]
						},
						{
							"id": 1291,
							"name": "timezone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1292,
									"name": "timezone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the timezone set on this `TimeSeries`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 561,
									"character": 12
								}
							]
						},
						{
							"id": 1241,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1242,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Turn the `TimeSeries` into regular javascript objects"
									},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 385,
									"character": 10
								}
							]
						},
						{
							"id": 1243,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1244,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Represent the `TimeSeries` as a string, which is useful for\nserializing it across the network."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 404,
									"character": 12
								}
							]
						},
						{
							"id": 1416,
							"name": "equal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1417,
									"name": "equal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two `TimeSeries` to each other. If the `TimeSeries`\nare of the same instance as each other then equals will return true."
									},
									"parameters": [
										{
											"id": 1418,
											"name": "series1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 1234,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1419,
											"name": "series2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 1234,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1328,
									"character": 16
								}
							]
						},
						{
							"id": 1420,
							"name": "is",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1421,
									"name": "is",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Static function to compare two `TimeSeries` to each other. If the `TimeSeries`\nare of the same value as each other then equals will return true."
									},
									"parameters": [
										{
											"id": 1422,
											"name": "series1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 1234,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										},
										{
											"id": 1423,
											"name": "series2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeries",
												"id": 1234,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1336,
									"character": 13
								}
							]
						},
						{
							"id": 1430,
							"name": "timeSeriesListEventReduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1431,
									"name": "timeSeriesListEventReduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 1432,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesListReducerOptions",
												"id": 1225
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1414,
									"character": 36
								}
							]
						},
						{
							"id": 1427,
							"name": "timeSeriesListMerge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1428,
									"name": "timeSeriesListMerge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a list of `TimeSeries` and merges them together to form a new\n`TimeSeries`.",
										"text": "Merging will produce a new `Event` only when events are conflict free, so\nit is useful in the following cases:\n * to combine multiple `TimeSeries` which have different time ranges, essentially\n concatenating them together\n * combine `TimeSeries` which have different columns, for example inTraffic has\n a column \"in\" and outTraffic has a column \"out\" and you want to produce a merged\n trafficSeries with columns \"in\" and \"out\".\n\nExample:\n```\nconst inTraffic = new TimeSeries(trafficDataIn);\nconst outTraffic = new TimeSeries(trafficDataOut);\nconst trafficSeries = TimeSeries.timeSeriesListMerge({\n    name: \"traffic\",\n    seriesList: [inTraffic, outTraffic]\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1429,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesOptions",
												"id": 1499
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1400,
									"character": 30
								}
							]
						},
						{
							"id": 1424,
							"name": "timeSeriesListReduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1425,
									"name": "timeSeriesListReduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reduces a list of `TimeSeries` objects using a reducer function. This works\nby taking each event in each `TimeSeries` and collecting them together\nbased on timestamp. All events for a given time are then merged together\nusing the reducer function to produce a new event. The reducer function is\napplied to all columns in the `fieldSpec`. Those new events are then\ncollected together to form a new `TimeSeries`.",
										"text": "Example:\n\nFor example you might have two TimeSeries with columns \"in\" and \"out\" which\ncorresponds to two measurements per timestamp. You could use this function to\nobtain a new TimeSeries which was the sum of the the three measurements using\nthe `sum()` reducer function and an [\"in\", \"out\"] fieldSpec.\n\n```\nconst totalSeries = TimeSeries.timeSeriesListReduce({\n    name: \"totals\",\n    seriesList: [inTraffic, outTraffic],\n    reducer: sum(),\n    fieldSpec: [ \"in\", \"out\" ]\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1426,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TimeSeriesOptions",
												"id": 1499
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 1367,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1238
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1236,
								1237
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1410,
								1343,
								1395,
								1253,
								1259,
								1261,
								1256,
								1325,
								1249,
								1267,
								1386,
								1413,
								1297,
								1293,
								1311,
								1275,
								1407,
								1251,
								1295,
								1392,
								1376,
								1401,
								1368,
								1352,
								1404,
								1283,
								1287,
								1285,
								1289,
								1360,
								1317,
								1329,
								1299,
								1321,
								1278,
								1337,
								1347,
								1247,
								1398,
								1389,
								1383,
								1263,
								1302,
								1280,
								1306,
								1308,
								1271,
								1333,
								1313,
								1245,
								1291,
								1241,
								1243,
								1416,
								1420,
								1430,
								1427,
								1424
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 277,
							"character": 23
						}
					]
				},
				{
					"id": 1220,
					"name": "TimeSeriesEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "You can construct a `TimeSeries` with a list of Events, by passing in an\nobject containing a single property \"events\".",
						"text": "```\n{ \"events\": [event-1, event-2, ..., event-n]}\n```\n"
					},
					"typeParameter": [
						{
							"id": 1221,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 1223,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "You can construct a `TimeSeries` with a list of Events, by passing in an\nobject containing a single property \"events\".",
								"text": "```\n{ \"events\": [event-1, event-2, ..., event-n]}\n```\n"
							},
							"parameters": [
								{
									"id": 1224,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 1222,
							"name": "events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 112,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "List",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1222
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 111,
							"character": 33
						}
					]
				},
				{
					"id": 1225,
					"name": "TimeSeriesListReducerOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 1232,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 1233,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 1231,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 119,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1227,
							"name": "reducer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 118,
									"character": 11
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1228,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1229,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1230,
													"name": "events",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "List",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Event",
																"id": 1765,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "Key",
																		"id": 2
																	}
																]
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Key",
																"id": 2
															}
														]
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "timeseries.ts",
											"line": 118,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 1226,
							"name": "seriesList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 117,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1231,
								1227,
								1226
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 116,
							"character": 45
						}
					]
				},
				{
					"id": 1213,
					"name": "TimeSeriesWireFormat",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 1218,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 1219,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 1216,
							"name": "columns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 98,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1214,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 96,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1217,
							"name": "points",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 99,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 1215,
							"name": "tz",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "timeseries.ts",
									"line": 97,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1216,
								1214,
								1217,
								1215
							]
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 95,
							"character": 37
						}
					]
				},
				{
					"id": 1433,
					"name": "buildMetaData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1434,
							"name": "buildMetaData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1435,
									"name": "meta",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "Object"
									},
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 57,
							"character": 22
						}
					]
				},
				{
					"id": 1439,
					"name": "indexedSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1440,
							"name": "indexedSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create an `Index` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"index\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 1441,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 1213
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 1234,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Index",
										"id": 1689
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 163,
							"character": 22
						}
					]
				},
				{
					"id": 1442,
					"name": "timeRangeSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1443,
							"name": "timeRangeSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a `Timerange` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"timerange\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 1444,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 1213
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 1234,
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeRange",
										"id": 1601
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 189,
							"character": 24
						}
					]
				},
				{
					"id": 1436,
					"name": "timeSeries",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1437,
							"name": "timeSeries",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a `Time` based `TimeSeries` using the wire format\n```\n{\n  \"name\": name,\n  \"columns\": [\"time\", column-1, ..., column-n]\n  \"points\": [\n     [t1, v1, v2, ..., v2],\n     [t2, v1, v2, ..., vn],\n     ...\n  ]\n}\n```"
							},
							"parameters": [
								{
									"id": 1438,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TimeSeriesWireFormat",
										"id": 1213
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeSeries",
								"id": 1234,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Time",
										"id": 1532
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "timeseries.ts",
							"line": 137,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1234
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1220,
						1225,
						1213
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1433,
						1439,
						1442,
						1436
					]
				}
			],
			"sources": [
				{
					"fileName": "timeseries.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1445,
			"name": "\"types\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/types.ts",
			"children": [
				{
					"id": 1459,
					"name": "AlignmentMethod",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method of interpolation used by the `align()` function:\n * `Hold` - Emits the last known good value at alignment boundaries\n * `Linear` - Emits linearly interpolated values at alignment boundaries"
					},
					"children": [
						{
							"id": 1460,
							"name": "Hold",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 72,
									"character": 8
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1461,
							"name": "Linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 73,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1460,
								1461
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 71,
							"character": 27
						}
					]
				},
				{
					"id": 1462,
					"name": "FillMethod",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Method of filling used by the `fill()` function:\n * `Hold` - Fill with the previous value\n * `Linear` - Fill between the last value and the next value linearly\n * `Zero` - Fill with 0"
					},
					"children": [
						{
							"id": 1465,
							"name": "Linear",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 85,
									"character": 10
								}
							]
						},
						{
							"id": 1464,
							"name": "Pad",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 84,
									"character": 7
								}
							]
						},
						{
							"id": 1463,
							"name": "Zero",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 83,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1465,
								1464,
								1463
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 82,
							"character": 22
						}
					]
				},
				{
					"id": 1452,
					"name": "TimeAlignment",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "When relating a `TimeRange` to a `Time` this enum lets you specify where\nin the `TimeRange` you mean:\n * `Begin`\n * `Middle`\n * `End`"
					},
					"children": [
						{
							"id": 1453,
							"name": "Begin",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 51,
									"character": 9
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1455,
							"name": "End",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 53,
									"character": 7
								}
							]
						},
						{
							"id": 1454,
							"name": "Middle",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1453,
								1455,
								1454
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 50,
							"character": 25
						}
					]
				},
				{
					"id": 1456,
					"name": "Trigger",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Rate of emit from within a stream:\n * `perEvent` - an updated `Collection` is emitted on each new `Event`\n * `onDiscardedWindow` - an updated `Collection` is emitted whenever a window is no longer used"
					},
					"children": [
						{
							"id": 1458,
							"name": "onDiscardedWindow",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 63,
									"character": 21
								}
							]
						},
						{
							"id": 1457,
							"name": "perEvent",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 12
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1458,
								1457
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 61,
							"character": 19
						}
					]
				},
				{
					"id": 1505,
					"name": "AggregationSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```\nconst spec: AggregationSpec = {\n   in_avg: [\"in\", avg(), \"bob\"],\n   out_avg: [\"out\", avg()],\n};\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 1506,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"indexSignature": [
						{
							"id": 1507,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1508,
									"name": "dest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Aggregation",
								"id": 1530,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 265,
							"character": 32
						}
					]
				},
				{
					"id": 1469,
					"name": "AlignmentOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `align()` function:\n * `fieldSpec` - the field to align\n * `window` - the `Period` of the window whose boundaries we want to align to\n * `method` - the interpolation method, one of `AlignmentMethod.Hold` or `AlignmentMethod.Linear`\n * `limit` - the number of boundaries to align to without a new Event, before emitting `null` on\n             the boundaries"
					},
					"children": [
						{
							"id": 1470,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 112,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1473,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 115,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1472,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 114,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "AlignmentMethod",
								"id": 1459
							}
						},
						{
							"id": 1471,
							"name": "period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 113,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 1568
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1470,
								1473,
								1472,
								1471
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 111,
							"character": 33
						}
					]
				},
				{
					"id": 1474,
					"name": "CollapseOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object passed to the `collapse()` function:\n * `fieldSpecList` - the list of fields to collapse\n * `fieldName` - the new field's name\n * `reducer()` - a function to collapse using e.g. `avg()`\n * `append` - to include only the new field, or include it in addition to the previous fields."
					},
					"children": [
						{
							"id": 1478,
							"name": "append",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 129,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1476,
							"name": "fieldName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 127,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1475,
							"name": "fieldSpecList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 126,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1477,
							"name": "reducer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 128,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1478,
								1476,
								1475,
								1477
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 125,
							"character": 32
						}
					]
				},
				{
					"id": 1482,
					"name": "FillOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `fill()` function:\n * `fieldSpec` - the field to fill\n * `method` - the interpolation method, one of\n   `FillMethod.Hold`, `FillMethod.Pad` or `FillMethod.Linear`\n * `limit` - the number of missing values to fill before giving up"
					},
					"children": [
						{
							"id": 1483,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 150,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1485,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 152,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1484,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "FillMethod",
								"id": 1462
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1483,
								1485,
								1484
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 149,
							"character": 28
						}
					]
				},
				{
					"id": 1479,
					"name": "RateOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Option object passed to the `rate()` function:\n * fieldSpec - the field to calculate the rate on\n * allowNegative - allow emit of negative rates"
					},
					"children": [
						{
							"id": 1481,
							"name": "allowNegative",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 139,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1480,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 138,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1481,
								1480
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 137,
							"character": 28
						}
					]
				},
				{
					"id": 1494,
					"name": "RenameColumnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `select()` function:\n * `fields` - the fields to select out of the Event"
					},
					"children": [
						{
							"id": 1495,
							"name": "renameMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 182,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1496,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1497,
											"name": "key",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 183,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1498,
											"name": "value",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 184,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1497,
												1498
											]
										}
									],
									"sources": [
										{
											"fileName": "types.ts",
											"line": 182,
											"character": 14
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1495
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 181,
							"character": 36
						}
					]
				},
				{
					"id": 1486,
					"name": "RollupOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `fixedWindowRollup()` function:\n * `window` - the window specification. e.g. window(duration(\"6h\"))\n * `aggregation` - the aggregation specification\n * `toTimeEvents` - Convert the rollup events to `TimeEvent`s, otherwise it\n                    will be returned as a `TimeSeries` of `IndexedEvent`s"
					},
					"typeParameter": [
						{
							"id": 1487,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 1490,
							"name": "aggregation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 165,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "AggregationSpec",
								"id": 1505,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Key",
											"id": 2
										}
									}
								]
							}
						},
						{
							"id": 1489,
							"name": "timezone",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 164,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1491,
							"name": "toTimeEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 166,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1488,
							"name": "window",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 163,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowBase",
								"id": 1167
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1490,
								1489,
								1491,
								1488
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 162,
							"character": 30
						}
					]
				},
				{
					"id": 1492,
					"name": "SelectOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `select()` function:\n * `fields` - the fields to select out of the Event"
					},
					"children": [
						{
							"id": 1493,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 174,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1493
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 173,
							"character": 30
						}
					]
				},
				{
					"id": 1499,
					"name": "TimeSeriesOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `TimeSeries` merge and reduce functions:\n * `seriesList` - A list of `TimeSeries` (required)\n * `reducer` - The reducer function e.g. `max()`\n * `fieldSpec` - Column or columns to reduce. If you\n                 need to retrieve multiple deep\n                 nested values that ['can.be', 'done.with',\n                 'this.notation']. A single deep value with a\n                 string.like.this."
					},
					"indexSignature": [
						{
							"id": 1503,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Options object expected by the `TimeSeries` merge and reduce functions:\n * `seriesList` - A list of `TimeSeries` (required)\n * `reducer` - The reducer function e.g. `max()`\n * `fieldSpec` - Column or columns to reduce. If you\n                 need to retrieve multiple deep\n                 nested values that ['can.be', 'done.with',\n                 'this.notation']. A single deep value with a\n                 string.like.this."
							},
							"parameters": [
								{
									"id": 1504,
									"name": "propName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 1502,
							"name": "fieldSpec",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 201,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1501,
							"name": "reducer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 200,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReducerFunction",
										"id": 1513
									},
									{
										"type": "reference",
										"name": "ArrayReducer",
										"id": 1517
									},
									{
										"type": "reference",
										"name": "ListReducer",
										"id": 1521
									}
								]
							}
						},
						{
							"id": 1500,
							"name": "seriesList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 199,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TimeSeries",
										"id": 1234,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Key",
												"id": 2
											}
										]
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1502,
								1501,
								1500
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 198,
							"character": 34
						}
					]
				},
				{
					"id": 1446,
					"name": "ValueListMap",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A mapping from string to list of numbers"
					},
					"indexSignature": [
						{
							"id": 1447,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "A mapping from string to list of numbers"
							},
							"parameters": [
								{
									"id": 1448,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 28,
							"character": 29
						}
					]
				},
				{
					"id": 1449,
					"name": "ValueMap",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A mapping from string to number"
					},
					"indexSignature": [
						{
							"id": 1450,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "A mapping from string to number"
							},
							"parameters": [
								{
									"id": 1451,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 35,
							"character": 25
						}
					]
				},
				{
					"id": 1466,
					"name": "WindowingOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options object expected by the `windowBy...()` functions. At this point,\nthis just defines the fixed window (e.g. window: period(\"1d\")) and the\ntrigger for downstream notification, which can currently be either\non every incoming event, or whenever a window is about to be discarded.\n * `type` - the type of the window, currently either Fixed or Sliding\n * `window` - the size of the window, expressed as a `Period`\n * `trigger` - the output rate of the window, currently either\n               Trigger.perEvent or Trigger.onDiscardedWindow"
					},
					"children": [
						{
							"id": 1468,
							"name": "trigger",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 100,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Trigger",
								"id": 1456
							}
						},
						{
							"id": 1467,
							"name": "window",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 99,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowBase",
								"id": 1167
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1468,
								1467
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 98,
							"character": 33
						}
					]
				},
				{
					"id": 1530,
					"name": "Aggregation",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A general aggregation specification, either as a `AggregationTuple` or\n`AggregationMapFunction`. Your choice."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 254,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "AggregationTuple",
								"id": 1525
							},
							{
								"type": "reference",
								"name": "AggregationMapFunction",
								"id": 1526,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						]
					}
				},
				{
					"id": 1526,
					"name": "AggregationMapFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An alternative to the `AggregationTuple` where you can specify a function to\ngenerate the resulting aggregation given the full `Collection` as input."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 248,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1527,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1528,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1529,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Collection",
												"id": 269,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 248,
									"character": 51
								}
							]
						}
					}
				},
				{
					"id": 1525,
					"name": "AggregationTuple",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Tuple mapping a string -> `ReducerFunction`\ne.g. `[\"value\", avg()]`"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 242,
							"character": 28
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "ReducerFunction",
								"id": 1513
							}
						]
					}
				},
				{
					"id": 1517,
					"name": "ArrayReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which combines an array of events into a new array of events"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 227,
							"character": 24
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1518,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1519,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1520,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Key",
																"id": 2
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 227,
									"character": 26
								}
							]
						}
					}
				},
				{
					"id": 1509,
					"name": "DedupFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function that takes a list of `Event`s and returns a new `Event`.\nWhen deduping a `Collection` or `TimeSeries` a `DedupFunction` can be\nsupplied to let you control the de-duplication result. It will\nbe called with all `Event`s which are considered duplicates and\nthe result you return will be the `Event` that those `Event`s will\nbe replaced with."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 217,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1510,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1511,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1512,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Event",
										"id": 1765,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 217,
									"character": 42
								}
							]
						}
					}
				},
				{
					"id": 1521,
					"name": "ListReducer",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which combines a list of events into a new list of events"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 232,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1522,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1523,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1524,
											"name": "events",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "List",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Event",
														"id": 1765,
														"typeArguments": [
															{
																"type": "reference",
																"name": "Key",
																"id": 2
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "reference",
														"name": "Key",
														"id": 2
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 232,
									"character": 25
								}
							]
						}
					}
				},
				{
					"id": 1513,
					"name": "ReducerFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A function which takes a list of numbers and returns a single number."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 222,
							"character": 27
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1514,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1515,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1516,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "types.ts",
									"line": 222,
									"character": 29
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						1459,
						1462,
						1452,
						1456
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1505,
						1469,
						1474,
						1482,
						1479,
						1494,
						1486,
						1492,
						1499,
						1446,
						1449,
						1466
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1530,
						1526,
						1525,
						1517,
						1509,
						1521,
						1513
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 62,
			"name": "\"util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/util.ts",
			"children": [
				{
					"id": 63,
					"name": "DecodedIndexString",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 65,
							"name": "decodedDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "util.ts",
									"line": 76,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Duration",
								"id": 16
							}
						},
						{
							"id": 66,
							"name": "decodedIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "util.ts",
									"line": 77,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 64,
							"name": "decodedPeriod",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "util.ts",
									"line": 75,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 1568
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								65,
								66,
								64
							]
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 74,
							"character": 35
						}
					]
				},
				{
					"id": 98,
					"name": "indexStringRegex",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "util.ts",
							"line": 54,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "RegExp"
					},
					"defaultValue": " /^((([0-9]+)([smhdlun]))@)*(([0-9]+)([smhdlun]))(\\+([0-9]+))*-([0-9]+)$/"
				},
				{
					"id": 133,
					"name": "dataFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 134,
							"name": "dataFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor arg into an `Immutable.Map`\nof data."
							},
							"parameters": [
								{
									"id": 135,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "__type"
											},
											{
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 291,
							"character": 20
						}
					]
				},
				{
					"id": 102,
					"name": "decodeIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 103,
							"name": "decodeIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes a period based index string. The result is a structure containing:\n - decodedPeriod\n - decodedDuration\n - decodedIndex"
							},
							"parameters": [
								{
									"id": 104,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodedIndexString",
								"id": 63
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 86,
							"character": 26
						}
					]
				},
				{
					"id": 136,
					"name": "fieldAsArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 137,
							"name": "fieldAsArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert the `field spec` into a list if it is not already."
							},
							"parameters": [
								{
									"id": 138,
									"name": "field",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 314,
							"character": 21
						}
					]
				},
				{
					"id": 129,
					"name": "indexFromArgs",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 130,
							"name": "indexFromArgs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor of two args into an `Index`.\nThe second arg defines the timezone (local or UTC)"
							},
							"parameters": [
								{
									"id": 131,
									"name": "arg1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								},
								{
									"id": 132,
									"name": "arg2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Etc/UTC\""
								}
							],
							"type": {
								"type": "reference",
								"name": "Index",
								"id": 1689
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 277,
							"character": 22
						}
					]
				},
				{
					"id": 105,
					"name": "isIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 106,
							"name": "isIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 107,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 97,
							"character": 22
						}
					]
				},
				{
					"id": 120,
					"name": "isMissing",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 121,
							"name": "isMissing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if the value is null, undefined or NaN"
							},
							"parameters": [
								{
									"id": 122,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 233,
							"character": 18
						}
					]
				},
				{
					"id": 89,
					"name": "isValid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 90,
							"name": "isValid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A value is valid if it isn't either undefined, null, or a NaN"
							},
							"parameters": [
								{
									"id": 91,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 34,
							"character": 16
						}
					]
				},
				{
					"id": 95,
					"name": "leftPad",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 96,
							"name": "leftPad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Single zero left padding, for days and months."
							},
							"parameters": [
								{
									"id": 97,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 50,
							"character": 16
						}
					]
				},
				{
					"id": 116,
					"name": "niceIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 117,
							"name": "niceIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a nice string for an index string. If the index string is of\nthe form 1d-2345 then just that string is returned (there's not nice\nway to put it), but if it represents a day, month, or year\n(e.g. 2015-07) then a nice string like \"July\" will be returned. It's\nalso possible to pass in the format of the reply for these types of\nstrings. See moment's format naming conventions:\nhttp://momentjs.com/docs/#/displaying/format/"
							},
							"parameters": [
								{
									"id": 118,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 119,
									"name": "format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 183,
							"character": 24
						}
					]
				},
				{
					"id": 126,
					"name": "timeRangeFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 127,
							"name": "timeRangeFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a `TimeRange`"
							},
							"parameters": [
								{
									"id": 128,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TimeRange",
												"id": 1601
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Date"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 1601
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 259,
							"character": 25
						}
					]
				},
				{
					"id": 112,
					"name": "timeRangeFromIndexString",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 113,
							"name": "timeRangeFromIndexString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given an index string, return the `TimeRange` that represents. This is the\nmain parsing function as far as taking an index string and decoding it into\nthe timerange that it represents. For example, this is how the Index\nconstructor is able to take a string and represent a timerange. It is also\nused when windowing to determine trigger times."
							},
							"parameters": [
								{
									"id": 114,
									"name": "indexString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 115,
									"name": "tz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Etc/UTC\""
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 1601
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 118,
							"character": 33
						}
					]
				},
				{
					"id": 123,
					"name": "timestampFromArg",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 124,
							"name": "timestampFromArg",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function to turn a constructor args into a timestamp"
							},
							"parameters": [
								{
									"id": 125,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Date"
											},
											{
												"type": "reference",
												"name": "Moment"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 240,
							"character": 25
						}
					]
				},
				{
					"id": 92,
					"name": "untilNow",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 93,
							"name": "untilNow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The last duration of time until now, represented as a `TimeRange`"
							},
							"parameters": [
								{
									"id": 94,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TimeRange",
								"id": 1601
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 41,
							"character": 17
						}
					]
				},
				{
					"id": 99,
					"name": "windowDuration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 100,
							"name": "windowDuration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a duration in milliseconds given a window period.\nFor example \"30s\" (30 seconds) should return 30000ms. Accepts\nseconds (e.g. \"30s\"), minutes (e.g. \"5m\"), hours (e.g. \"6h\") and\ndays (e.g. \"30d\") as the period."
							},
							"parameters": [
								{
									"id": 101,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 62,
							"character": 23
						}
					]
				},
				{
					"id": 108,
					"name": "windowPositionFromDate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 109,
							"name": "windowPositionFromDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Helper function to get the window position relative\nto Jan 1, 1970."
							},
							"parameters": [
								{
									"id": 110,
									"name": "p",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 111,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 105,
							"character": 31
						}
					]
				},
				{
					"id": 67,
					"name": "UNITS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 86,
							"name": "d",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 87,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 28,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"days\""
								},
								{
									"id": 88,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 28,
											"character": 30
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " 60 * 60 * 24 * 1000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										87,
										88
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 28,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 83,
							"name": "h",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 84,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 27,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"hours\""
								},
								{
									"id": 85,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 27,
											"character": 31
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " 60 * 60 * 1000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										84,
										85
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 27,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 74,
							"name": "l",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 75,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 24,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"milliseconds\""
								},
								{
									"id": 76,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 24,
											"character": 38
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										75,
										76
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 24,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 80,
							"name": "m",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 81,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 26,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"minutes\""
								},
								{
									"id": 82,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 26,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " 60 * 1000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										81,
										82
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 26,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 68,
							"name": "n",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 69,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"nanoseconds\""
								},
								{
									"id": 70,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 22,
											"character": 37
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " 1 / 1000000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										69,
										70
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 22,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 77,
							"name": "s",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 78,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 25,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"seconds\""
								},
								{
									"id": 79,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 25,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										78,
										79
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 25,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 71,
							"name": "u",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 72,
									"name": "label",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"microseconds\""
								},
								{
									"id": 73,
									"name": "length",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "util.ts",
											"line": 23,
											"character": 38
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " 1 / 1000"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										72,
										73
									]
								}
							],
							"sources": [
								{
									"fileName": "util.ts",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								86,
								83,
								74,
								80,
								68,
								77,
								71
							]
						}
					],
					"sources": [
						{
							"fileName": "util.ts",
							"line": 21,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						63
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						98
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						133,
						102,
						136,
						129,
						105,
						120,
						89,
						95,
						116,
						126,
						112,
						123,
						92,
						99,
						108
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						67
					]
				}
			],
			"sources": [
				{
					"fileName": "util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1161,
			"name": "\"window\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/window.ts",
			"children": [
				{
					"id": 1162,
					"name": "WindowType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1163,
							"name": "Day",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 23,
									"character": 7
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1164,
							"name": "Month",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 24,
									"character": 9
								}
							]
						},
						{
							"id": 1165,
							"name": "Week",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 25,
									"character": 8
								}
							]
						},
						{
							"id": 1166,
							"name": "Year",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 26,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1163,
								1164,
								1165,
								1166
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 22,
							"character": 22
						}
					]
				},
				{
					"id": 1171,
					"name": "DayWindow",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies a repeating day duration specific to the supplied timezone. You can\ncreate one using the `daily()` factory function.",
						"text": "Example:\n```\nconst dayWindowNewYork = daily(\"America/New_York\");\nconst indexes = dayWindowNewYork.getIndexSet(Util.untilNow(duration(\"5d\")));\n```\n"
					},
					"children": [
						{
							"id": 1177,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Construct a new `DayWindow`, optionally supplying the timezone `tz`\nfor the `Window`. The default is `UTC`."
							},
							"signatures": [
								{
									"id": 1178,
									"name": "new DayWindow",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Construct a new `DayWindow`, optionally supplying the timezone `tz`\nfor the `Window`. The default is `UTC`."
									},
									"parameters": [
										{
											"id": 1179,
											"name": "tz",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"Etc/UTC\""
										}
									],
									"type": {
										"type": "reference",
										"name": "DayWindow",
										"id": 1171
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 70,
									"character": 24
								}
							]
						},
						{
							"id": 1176,
							"name": "_tz",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 70,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1180,
							"name": "getIndexSet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1181,
									"name": "getIndexSet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an `Immutable.OrderedSet<Index>` set of day `Index`es for the\n`Time` or `TimeRange` supplied as `t`.",
										"text": "The simplest invocation of this function would be to pass in a `Time`\nand get the day (e.g. \"2017-09-10\"). What day you get may depend on the\ntimezone specified when constructing this `DayWindow`. The most useful\naspect of a `DayWindow` is that you can use this index set to bucket\n`Event`s into days in a particular timezone.\n"
									},
									"parameters": [
										{
											"id": 1182,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Time",
														"id": 1532
													},
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedSet",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "WindowBase.getIndexSet",
										"id": 1168
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 91,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "WindowBase.getIndexSet",
								"id": 1168
							}
						},
						{
							"id": 1172,
							"name": "timeRangeOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1173,
									"name": "timeRangeOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Given an index string representing a day (e.g. \"2015-08-22\"), and optionally\nthe timezone (default is UTC), return the corresponding `TimeRange`."
									},
									"parameters": [
										{
											"id": 1174,
											"name": "indexString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1175,
											"name": "tz",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"Etc/UTC\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 49,
									"character": 29
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1177
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1176
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1180,
								1172
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 44,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "WindowBase",
							"id": 1167
						}
					]
				},
				{
					"id": 1183,
					"name": "Window",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `Window` is a specification for repeating range of time range which is\ntypically used in Pond to describe an aggregation bounds.",
						"text": "Windows have a `Period` (which defines the frequency and offset of window\nplacement) combined with a `Duration` (which is the size of the window\nitself).\n\nIf a `Window` is defined with only a `Duration` then the freqency of the\n`Window` is equal to the duration of the window (i.e. a fixed window).\nIf the period is smaller than the duration we have a sliding window.\n\nFrom a `Window` you can get a set of `Index`es for a specific `Time` or\n`TimeRange`, giving you the `Window` or `Window`s that overlap that `Time`\nor `TimeRange`. The main use of this is it allows you to easily bucket\n`Events` into the appropiate `Window`s.\n\nExample:\n```\nconst timeseries = timeSeries(data);\nconst everyThirtyMinutes = window(duration(\"30m\"));\nconst dailyAvg = timeseries.fixedWindowRollup({\n    window: everyThirtyMinutes,\n    aggregation: { average: [\"value\", avg()] }\n});\n```\n\nNote: You can also use `DayWindow` with a specified timezone for more\ncontrol over daily aggregations.\n"
					},
					"children": [
						{
							"id": 1186,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "To construct a `Window` you need to supply the `Duration` or length of the\nwindow and the sliding `Period` of the window.",
								"text": " * Supply the `Duration` as the `d` arg.\n * Optionally supply the `Period`\n\nRepeats of the Window are given an index to represent that specific repeat.\nThat index is represented by an `Index` object and can also be represented\nby a string that encodes the specific repeat.\n\nSince an `Index` can be a key for a `TimeSeries`, a repeated period and\nassociated data can be represented that way.\n\n```\n             |<- duration ---------->|\n|<- offset ->|<- freq ->|                  (<- period )\n             [-----------------------]\n                        [-----------------------]\n                                   [-----------------------]\n                                           ...\n```\n\n"
							},
							"signatures": [
								{
									"id": 1187,
									"name": "new Window",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "To construct a `Window` you need to supply the `Duration` or length of the\nwindow and the sliding `Period` of the window.",
										"text": " * Supply the `Duration` as the `d` arg.\n * Optionally supply the `Period`\n\nRepeats of the Window are given an index to represent that specific repeat.\nThat index is represented by an `Index` object and can also be represented\nby a string that encodes the specific repeat.\n\nSince an `Index` can be a key for a `TimeSeries`, a repeated period and\nassociated data can be represented that way.\n\n```\n             |<- duration ---------->|\n|<- offset ->|<- freq ->|                  (<- period )\n             [-----------------------]\n                        [-----------------------]\n                                   [-----------------------]\n                                           ...\n```\n\n"
									},
									"parameters": [
										{
											"id": 1188,
											"name": "d",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Duration",
												"id": 16
											}
										},
										{
											"id": 1189,
											"name": "period",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Period",
												"id": 1568
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Window",
										"id": 1183
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 143,
									"character": 32
								}
							]
						},
						{
							"id": 1185,
							"name": "_duration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 143,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Duration",
								"id": 16
							}
						},
						{
							"id": 1184,
							"name": "_period",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "window.ts",
									"line": 142,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Period",
								"id": 1568
							}
						},
						{
							"id": 1194,
							"name": "duration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1195,
									"name": "duration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the duration of the Window"
									},
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 198,
									"character": 12
								}
							]
						},
						{
							"id": 1196,
							"name": "every",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1197,
									"name": "every",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Specify how often the underlying period repeats"
									},
									"parameters": [
										{
											"id": 1198,
											"name": "frequency",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Duration",
												"id": 16
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Window",
										"id": 1183
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 205,
									"character": 9
								}
							]
						},
						{
							"id": 1202,
							"name": "getIndexSet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1203,
									"name": "getIndexSet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Window repeats as an `Immutable.Set<Index>` that covers\n(in whole or in part) the time or timerange supplied. In this example,\nB, C, D and E will be returned:",
										"text": "```\n                   t (Time)\n                   |\n [----------------]|                    A\n     [-------------|--]                 B*\n         [---------|------]             C*\n             [-----|----------]         D*\n                 [-|--------------]     E*\n                   | [----------------] F\n```\n\n"
									},
									"parameters": [
										{
											"id": 1204,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Time",
														"id": 1532
													},
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedSet",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "WindowBase.getIndexSet",
										"id": 1168
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 233,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "WindowBase.getIndexSet",
								"id": 1168
							}
						},
						{
							"id": 1199,
							"name": "offsetBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1200,
									"name": "offsetBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Specify an offset for the underlying period"
									},
									"parameters": [
										{
											"id": 1201,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Time",
												"id": 1532
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Window",
										"id": 1183
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 212,
									"character": 12
								}
							]
						},
						{
							"id": 1192,
							"name": "period",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1193,
									"name": "period",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the underlying period of the Window"
									},
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 1568
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 191,
									"character": 10
								}
							]
						},
						{
							"id": 1190,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1191,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 180,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1186
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1185,
								1184
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1194,
								1196,
								1202,
								1199,
								1192,
								1190
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 141,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "WindowBase",
							"id": 1167
						}
					]
				},
				{
					"id": 1167,
					"name": "WindowBase",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1168,
							"name": "getIndexSet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 1169,
									"name": "getIndexSet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1170,
											"name": "t",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Time",
														"id": 1532
													},
													{
														"type": "reference",
														"name": "TimeRange",
														"id": 1601
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OrderedSet",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "window.ts",
									"line": 30,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1168
							]
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 29,
							"character": 32
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DayWindow",
							"id": 1171
						},
						{
							"type": "reference",
							"name": "Window",
							"id": 1183
						}
					]
				},
				{
					"id": 1209,
					"name": "daily",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1210,
							"name": "daily",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1211,
									"name": "tz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Etc/UTC\""
								}
							],
							"type": {
								"type": "reference",
								"name": "DayWindow",
								"id": 1171
							}
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 273,
							"character": 14
						}
					]
				},
				{
					"id": 1205,
					"name": "window",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1206,
							"name": "window",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1207,
									"name": "d",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Duration",
										"id": 16
									}
								},
								{
									"id": 1208,
									"name": "period",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Period",
										"id": 1568
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Window",
								"id": 1183
							}
						}
					],
					"sources": [
						{
							"fileName": "window.ts",
							"line": 257,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						1162
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1171,
						1183,
						1167
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1209,
						1205
					]
				}
			],
			"sources": [
				{
					"fileName": "window.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 861,
			"name": "\"windowedcollection\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/pmurphy/code/pond/packages/pond/src/windowedcollection.ts",
			"children": [
				{
					"id": 862,
					"name": "WindowedCollection",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 863,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Key",
								"id": 2
							}
						}
					],
					"children": [
						{
							"id": 868,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `SortedCollection`s, one\nfor each group and window combination.",
								"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `SortedCollection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added via `addEvent()`, the windowing and grouping will be\napplied to it and it will be appended to the appropiate `SortedCollection`,\nor a new `SortedCollection` will be created.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to `SortedCollection`. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `GroupedCollection.window()`.\n"
							},
							"signatures": [
								{
									"id": 869,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `SortedCollection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `SortedCollection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added via `addEvent()`, the windowing and grouping will be\napplied to it and it will be appended to the appropiate `SortedCollection`,\nor a new `SortedCollection` will be created.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to `SortedCollection`. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `GroupedCollection.window()`.\n"
									},
									"parameters": [
										{
											"id": 870,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "SortedCollection",
														"id": 915,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862
									}
								},
								{
									"id": 871,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `SortedCollection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `SortedCollection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added via `addEvent()`, the windowing and grouping will be\napplied to it and it will be appended to the appropiate `SortedCollection`,\nor a new `SortedCollection` will be created.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to `SortedCollection`. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `GroupedCollection.window()`.\n"
									},
									"parameters": [
										{
											"id": 872,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										},
										{
											"id": 873,
											"name": "collectionMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "SortedCollection",
														"id": 915,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"name": "Key",
																	"id": 2
																}
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862
									}
								},
								{
									"id": 874,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `SortedCollection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `SortedCollection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added via `addEvent()`, the windowing and grouping will be\napplied to it and it will be appended to the appropiate `SortedCollection`,\nor a new `SortedCollection` will be created.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to `SortedCollection`. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `GroupedCollection.window()`.\n"
									},
									"parameters": [
										{
											"id": 875,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										},
										{
											"id": 876,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862
									}
								},
								{
									"id": 877,
									"name": "new WindowedCollection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a new grouping that is based on a window period. This is combined\nwith any groupBy to divide the events among multiple `SortedCollection`s, one\nfor each group and window combination.",
										"text": "The main way to construct a `WindowedCollection` is to pass in a \"window\"\ndefined as a `Period` and a \"group\", which can be a field to group by, or\na function that can be called to do the grouping. Optionally, you may pass\nin a `SortedCollection` of initial `Event`s to group, as is the case when this is\nused in a batch context.\n\nAs an `Event` is added via `addEvent()`, the windowing and grouping will be\napplied to it and it will be appended to the appropiate `SortedCollection`,\nor a new `SortedCollection` will be created.\n\nThe other way to construct a `WindowedCollection` is by passing in a map\nof group name to `SortedCollection`. This is generally used if there are are\nevents already grouped and you want to apply a window group on top of that.\nThis is the case when calling `GroupedCollection.window()`.\n"
									},
									"parameters": [
										{
											"id": 878,
											"name": "windowing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WindowingOptions",
												"id": 1466
											}
										},
										{
											"id": 879,
											"name": "group",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 880,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WindowedCollection",
										"id": 862
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 58,
									"character": 35
								},
								{
									"fileName": "windowedcollection.ts",
									"line": 80,
									"character": 75
								},
								{
									"fileName": "windowedcollection.ts",
									"line": 84,
									"character": 6
								},
								{
									"fileName": "windowedcollection.ts",
									"line": 85,
									"character": 79
								},
								{
									"fileName": "windowedcollection.ts",
									"line": 90,
									"character": 6
								}
							]
						},
						{
							"id": 864,
							"name": "collections",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 54,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 866,
							"name": "group",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 56,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "reference",
										"name": "GroupingFunction",
										"id": 1753,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 865,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 55,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WindowingOptions",
								"id": 1466
							}
						},
						{
							"id": 867,
							"name": "triggerThreshold",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 58,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 891,
							"name": "addEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 892,
									"name": "addEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 893,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "reference",
												"name": "KeyedCollection",
												"id": 853,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 205,
									"character": 12
								}
							]
						},
						{
							"id": 884,
							"name": "aggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 885,
									"name": "aggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Example:\n```\nconst rolledUp = collection\n  .groupBy(\"team\")\n  .window(period(\"30m\"))\n  .aggregate({\n      team: [\"team\", keep()],\n      total: [ \"score\", sum() ],\n  });\n```"
									},
									"parameters": [
										{
											"id": 886,
											"name": "aggregationSpec",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AggregationSpec",
												"id": 1505,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GroupedCollection",
										"id": 1725,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Index",
												"id": 1689
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 160,
									"character": 13
								}
							]
						},
						{
							"id": 887,
							"name": "flatten",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 888,
									"name": "flatten",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Collects all `Event`s from the groupings and returns them placed\ninto a single `SortedCollection`."
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 184,
									"character": 18
								}
							]
						},
						{
							"id": 881,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 882,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetch the SortedCollection of events contained in the windowed grouping"
									},
									"parameters": [
										{
											"id": 883,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 144,
									"character": 7
								}
							]
						},
						{
							"id": 894,
							"name": "getEventGroups",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 895,
									"name": "getEventGroups",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 896,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 1765,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "List",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 257,
									"character": 26
								}
							]
						},
						{
							"id": 889,
							"name": "ungroup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 890,
									"name": "ungroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes any grouping present, returning an Immutable.Map\nmapping just the window to the `SortedCollection`."
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "windowedcollection.ts",
									"line": 196,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								868
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								864,
								866,
								865,
								867
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								891,
								884,
								887,
								881,
								894,
								889
							]
						}
					],
					"sources": [
						{
							"fileName": "windowedcollection.ts",
							"line": 53,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Base",
							"id": 1763
						}
					]
				},
				{
					"id": 897,
					"name": "windowFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 898,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 899,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 900,
									"name": "collectionMap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 901,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 902,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 903,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 1466
									}
								},
								{
									"id": 904,
									"name": "collectionMap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "SortedCollection",
												"id": 915,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "Key",
															"id": 2
														}
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 905,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 906,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 907,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 1466
									}
								},
								{
									"id": 908,
									"name": "initialCollection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 909,
							"name": "windowFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 910,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Key",
										"id": 2
									}
								}
							],
							"parameters": [
								{
									"id": 911,
									"name": "windowOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "WindowingOptions",
										"id": 1466
									}
								},
								{
									"id": 912,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 913,
									"name": "initialCollection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "SortedCollection",
										"id": 915,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "Key",
													"id": 2
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "windowedcollection.ts",
							"line": 278,
							"character": 22
						},
						{
							"fileName": "windowedcollection.ts",
							"line": 279,
							"character": 22
						},
						{
							"fileName": "windowedcollection.ts",
							"line": 283,
							"character": 22
						},
						{
							"fileName": "windowedcollection.ts",
							"line": 287,
							"character": 22
						},
						{
							"fileName": "windowedcollection.ts",
							"line": 292,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						862
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						897
					]
				}
			],
			"sources": [
				{
					"fileName": "windowedcollection.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1911,
				1762,
				139,
				268,
				15,
				1764,
				1939,
				149,
				202,
				1720,
				1688,
				1,
				1567,
				54,
				177,
				192,
				914,
				495,
				1531,
				1600,
				1212,
				1445,
				62,
				1161,
				861
			]
		}
	]
}